(function (f) {
    if (typeof exports === 'object' && typeof module !== 'undefined') {
        module.exports = f();
    } else if (typeof define === 'function' && define.amd) {
        define([], f);
    } else {
        var g;
        if (typeof window !== 'undefined') {
            g = window;
        } else if (typeof global !== 'undefined') {
            g = global;
        } else if (typeof self !== 'undefined') {
            g = self;
        } else {
            g = this;
        }
        Object.defineProperty(g, 'hook', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: f()
        });
        if (g.constructor.name === 'ServiceWorkerGlobalScope') {
            for (let h in hook.serviceWorkerHandlers) {
                g.addEventListener(h, hook.serviceWorkerHandlers[h]);
            }
        }
        if (g.constructor.name === 'Window') {
            hook.registerServiceWorker();
        }
    }
}(function () {
    var define, module, exports;
    return function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = typeof require == 'function' && require;
                    if (!u && a)
                        return a(o, !0);
                    if (i)
                        return i(o, !0);
                    var f = new Error('Cannot find module \'' + o + '\'');
                    throw f.code = 'MODULE_NOT_FOUND', f;
                }
                var l = n[o] = { exports: {} };
                t[o][0].call(l.exports, function (e) {
                    var n = t[o][1][e];
                    return s(n ? n : e);
                }, l, l.exports, e, t, n, r);
            }
            return n[o].exports;
        }
        var i = typeof require == 'function' && require;
        for (var o = 0; o < r.length; o++)
            s(r[o]);
        return s;
    }({
        1: [
            function (require, module, exports) {
                'use strict';
                var XHTMLEntities = require('./xhtml');
                var hexNumber = /^[\da-fA-F]+$/;
                var decimalNumber = /^\d+$/;
                module.exports = function (acorn) {
                    var tt = acorn.tokTypes;
                    var tc = acorn.tokContexts;
                    tc.j_oTag = new acorn.TokContext('<tag', false);
                    tc.j_cTag = new acorn.TokContext('</tag', false);
                    tc.j_expr = new acorn.TokContext('<tag>...</tag>', true, true);
                    tt.jsxName = new acorn.TokenType('jsxName');
                    tt.jsxText = new acorn.TokenType('jsxText', { beforeExpr: true });
                    tt.jsxTagStart = new acorn.TokenType('jsxTagStart');
                    tt.jsxTagEnd = new acorn.TokenType('jsxTagEnd');
                    tt.jsxTagStart.updateContext = function () {
                        this.context.push(tc.j_expr);
                        this.context.push(tc.j_oTag);
                        this.exprAllowed = false;
                    };
                    tt.jsxTagEnd.updateContext = function (prevType) {
                        var out = this.context.pop();
                        if (out === tc.j_oTag && prevType === tt.slash || out === tc.j_cTag) {
                            this.context.pop();
                            this.exprAllowed = this.curContext() === tc.j_expr;
                        } else {
                            this.exprAllowed = true;
                        }
                    };
                    var pp = acorn.Parser.prototype;
                    pp.jsx_readToken = function () {
                        var out = '', chunkStart = this.pos;
                        for (;;) {
                            if (this.pos >= this.input.length)
                                this.raise(this.start, 'Unterminated JSX contents');
                            var ch = this.input.charCodeAt(this.pos);
                            switch (ch) {
                            case 60:
                            case 123:
                                if (this.pos === this.start) {
                                    if (ch === 60 && this.exprAllowed) {
                                        ++this.pos;
                                        return this.finishToken(tt.jsxTagStart);
                                    }
                                    return this.getTokenFromCode(ch);
                                }
                                out += this.input.slice(chunkStart, this.pos);
                                return this.finishToken(tt.jsxText, out);
                            case 38:
                                out += this.input.slice(chunkStart, this.pos);
                                out += this.jsx_readEntity();
                                chunkStart = this.pos;
                                break;
                            default:
                                if (acorn.isNewLine(ch)) {
                                    out += this.input.slice(chunkStart, this.pos);
                                    out += this.jsx_readNewLine(true);
                                    chunkStart = this.pos;
                                } else {
                                    ++this.pos;
                                }
                            }
                        }
                    };
                    pp.jsx_readNewLine = function (normalizeCRLF) {
                        var ch = this.input.charCodeAt(this.pos);
                        var out;
                        ++this.pos;
                        if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {
                            ++this.pos;
                            out = normalizeCRLF ? '\n' : '\r\n';
                        } else {
                            out = String.fromCharCode(ch);
                        }
                        if (this.options.locations) {
                            ++this.curLine;
                            this.lineStart = this.pos;
                        }
                        return out;
                    };
                    pp.jsx_readString = function (quote) {
                        var out = '', chunkStart = ++this.pos;
                        for (;;) {
                            if (this.pos >= this.input.length)
                                this.raise(this.start, 'Unterminated string constant');
                            var ch = this.input.charCodeAt(this.pos);
                            if (ch === quote)
                                break;
                            if (ch === 38) {
                                out += this.input.slice(chunkStart, this.pos);
                                out += this.jsx_readEntity();
                                chunkStart = this.pos;
                            } else if (acorn.isNewLine(ch)) {
                                out += this.input.slice(chunkStart, this.pos);
                                out += this.jsx_readNewLine(false);
                                chunkStart = this.pos;
                            } else {
                                ++this.pos;
                            }
                        }
                        out += this.input.slice(chunkStart, this.pos++);
                        return this.finishToken(tt.string, out);
                    };
                    pp.jsx_readEntity = function () {
                        var str = '', count = 0, entity;
                        var ch = this.input[this.pos];
                        if (ch !== '&')
                            this.raise(this.pos, 'Entity must start with an ampersand');
                        var startPos = ++this.pos;
                        while (this.pos < this.input.length && count++ < 10) {
                            ch = this.input[this.pos++];
                            if (ch === ';') {
                                if (str[0] === '#') {
                                    if (str[1] === 'x') {
                                        str = str.substr(2);
                                        if (hexNumber.test(str))
                                            entity = String.fromCharCode(parseInt(str, 16));
                                    } else {
                                        str = str.substr(1);
                                        if (decimalNumber.test(str))
                                            entity = String.fromCharCode(parseInt(str, 10));
                                    }
                                } else {
                                    entity = XHTMLEntities[str];
                                }
                                break;
                            }
                            str += ch;
                        }
                        if (!entity) {
                            this.pos = startPos;
                            return '&';
                        }
                        return entity;
                    };
                    pp.jsx_readWord = function () {
                        var ch, start = this.pos;
                        do {
                            ch = this.input.charCodeAt(++this.pos);
                        } while (acorn.isIdentifierChar(ch) || ch === 45);
                        return this.finishToken(tt.jsxName, this.input.slice(start, this.pos));
                    };
                    function getQualifiedJSXName(object) {
                        if (object.type === 'JSXIdentifier')
                            return object.name;
                        if (object.type === 'JSXNamespacedName')
                            return object.namespace.name + ':' + object.name.name;
                        if (object.type === 'JSXMemberExpression')
                            return getQualifiedJSXName(object.object) + '.' + getQualifiedJSXName(object.property);
                    }
                    pp.jsx_parseIdentifier = function () {
                        var node = this.startNode();
                        if (this.type === tt.jsxName)
                            node.name = this.value;
                        else if (this.type.keyword)
                            node.name = this.type.keyword;
                        else
                            this.unexpected();
                        this.next();
                        return this.finishNode(node, 'JSXIdentifier');
                    };
                    pp.jsx_parseNamespacedName = function () {
                        var startPos = this.start, startLoc = this.startLoc;
                        var name = this.jsx_parseIdentifier();
                        if (!this.options.plugins.jsx.allowNamespaces || !this.eat(tt.colon))
                            return name;
                        var node = this.startNodeAt(startPos, startLoc);
                        node.namespace = name;
                        node.name = this.jsx_parseIdentifier();
                        return this.finishNode(node, 'JSXNamespacedName');
                    };
                    pp.jsx_parseElementName = function () {
                        var startPos = this.start, startLoc = this.startLoc;
                        var node = this.jsx_parseNamespacedName();
                        if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !this.options.plugins.jsx.allowNamespacedObjects) {
                            this.unexpected();
                        }
                        while (this.eat(tt.dot)) {
                            var newNode = this.startNodeAt(startPos, startLoc);
                            newNode.object = node;
                            newNode.property = this.jsx_parseIdentifier();
                            node = this.finishNode(newNode, 'JSXMemberExpression');
                        }
                        return node;
                    };
                    pp.jsx_parseAttributeValue = function () {
                        switch (this.type) {
                        case tt.braceL:
                            var node = this.jsx_parseExpressionContainer();
                            if (node.expression.type === 'JSXEmptyExpression')
                                this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');
                            return node;
                        case tt.jsxTagStart:
                        case tt.string:
                            return this.parseExprAtom();
                        default:
                            this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');
                        }
                    };
                    pp.jsx_parseEmptyExpression = function () {
                        var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
                        return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);
                    };
                    pp.jsx_parseExpressionContainer = function () {
                        var node = this.startNode();
                        this.next();
                        node.expression = this.type === tt.braceR ? this.jsx_parseEmptyExpression() : this.parseExpression();
                        this.expect(tt.braceR);
                        return this.finishNode(node, 'JSXExpressionContainer');
                    };
                    pp.jsx_parseAttribute = function () {
                        var node = this.startNode();
                        if (this.eat(tt.braceL)) {
                            this.expect(tt.ellipsis);
                            node.argument = this.parseMaybeAssign();
                            this.expect(tt.braceR);
                            return this.finishNode(node, 'JSXSpreadAttribute');
                        }
                        node.name = this.jsx_parseNamespacedName();
                        node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;
                        return this.finishNode(node, 'JSXAttribute');
                    };
                    pp.jsx_parseOpeningElementAt = function (startPos, startLoc) {
                        var node = this.startNodeAt(startPos, startLoc);
                        node.attributes = [];
                        node.name = this.jsx_parseElementName();
                        while (this.type !== tt.slash && this.type !== tt.jsxTagEnd)
                            node.attributes.push(this.jsx_parseAttribute());
                        node.selfClosing = this.eat(tt.slash);
                        this.expect(tt.jsxTagEnd);
                        return this.finishNode(node, 'JSXOpeningElement');
                    };
                    pp.jsx_parseClosingElementAt = function (startPos, startLoc) {
                        var node = this.startNodeAt(startPos, startLoc);
                        node.name = this.jsx_parseElementName();
                        this.expect(tt.jsxTagEnd);
                        return this.finishNode(node, 'JSXClosingElement');
                    };
                    pp.jsx_parseElementAt = function (startPos, startLoc) {
                        var node = this.startNodeAt(startPos, startLoc);
                        var children = [];
                        var openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);
                        var closingElement = null;
                        if (!openingElement.selfClosing) {
                            contents:
                                for (;;) {
                                    switch (this.type) {
                                    case tt.jsxTagStart:
                                        startPos = this.start;
                                        startLoc = this.startLoc;
                                        this.next();
                                        if (this.eat(tt.slash)) {
                                            closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);
                                            break contents;
                                        }
                                        children.push(this.jsx_parseElementAt(startPos, startLoc));
                                        break;
                                    case tt.jsxText:
                                        children.push(this.parseExprAtom());
                                        break;
                                    case tt.braceL:
                                        children.push(this.jsx_parseExpressionContainer());
                                        break;
                                    default:
                                        this.unexpected();
                                    }
                                }
                            if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
                                this.raise(closingElement.start, 'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');
                            }
                        }
                        node.openingElement = openingElement;
                        node.closingElement = closingElement;
                        node.children = children;
                        if (this.type === tt.relational && this.value === '<') {
                            this.raise(this.start, 'Adjacent JSX elements must be wrapped in an enclosing tag');
                        }
                        return this.finishNode(node, 'JSXElement');
                    };
                    pp.jsx_parseElement = function () {
                        var startPos = this.start, startLoc = this.startLoc;
                        this.next();
                        return this.jsx_parseElementAt(startPos, startLoc);
                    };
                    acorn.plugins.jsx = function (instance, opts) {
                        if (!opts) {
                            return;
                        }
                        if (typeof opts !== 'object') {
                            opts = {};
                        }
                        instance.options.plugins.jsx = {
                            allowNamespaces: opts.allowNamespaces !== false,
                            allowNamespacedObjects: !!opts.allowNamespacedObjects
                        };
                        instance.extend('parseExprAtom', function (inner) {
                            return function (refShortHandDefaultPos) {
                                if (this.type === tt.jsxText)
                                    return this.parseLiteral(this.value);
                                else if (this.type === tt.jsxTagStart)
                                    return this.jsx_parseElement();
                                else
                                    return inner.call(this, refShortHandDefaultPos);
                            };
                        });
                        instance.extend('readToken', function (inner) {
                            return function (code) {
                                var context = this.curContext();
                                if (context === tc.j_expr)
                                    return this.jsx_readToken();
                                if (context === tc.j_oTag || context === tc.j_cTag) {
                                    if (acorn.isIdentifierStart(code))
                                        return this.jsx_readWord();
                                    if (code == 62) {
                                        ++this.pos;
                                        return this.finishToken(tt.jsxTagEnd);
                                    }
                                    if ((code === 34 || code === 39) && context == tc.j_oTag)
                                        return this.jsx_readString(code);
                                }
                                if (code === 60 && this.exprAllowed) {
                                    ++this.pos;
                                    return this.finishToken(tt.jsxTagStart);
                                }
                                return inner.call(this, code);
                            };
                        });
                        instance.extend('updateContext', function (inner) {
                            return function (prevType) {
                                if (this.type == tt.braceL) {
                                    var curContext = this.curContext();
                                    if (curContext == tc.j_oTag)
                                        this.context.push(tc.b_expr);
                                    else if (curContext == tc.j_expr)
                                        this.context.push(tc.b_tmpl);
                                    else
                                        inner.call(this, prevType);
                                    this.exprAllowed = true;
                                } else if (this.type === tt.slash && prevType === tt.jsxTagStart) {
                                    this.context.length -= 2;
                                    this.context.push(tc.j_cTag);
                                    this.exprAllowed = false;
                                } else {
                                    return inner.call(this, prevType);
                                }
                            };
                        });
                    };
                    return acorn;
                };
            },
            { './xhtml': 2 }
        ],
        2: [
            function (require, module, exports) {
                module.exports = {
                    quot: '"',
                    amp: '&',
                    apos: '\'',
                    lt: '<',
                    gt: '>',
                    nbsp: '\xA0',
                    iexcl: '\xA1',
                    cent: '\xA2',
                    pound: '\xA3',
                    curren: '\xA4',
                    yen: '\xA5',
                    brvbar: '\xA6',
                    sect: '\xA7',
                    uml: '\xA8',
                    copy: '\xA9',
                    ordf: 'ª',
                    laquo: '\xAB',
                    not: '\xAC',
                    shy: '\xAD',
                    reg: '\xAE',
                    macr: '\xAF',
                    deg: '\xB0',
                    plusmn: '\xB1',
                    sup2: '\xB2',
                    sup3: '\xB3',
                    acute: '\xB4',
                    micro: 'µ',
                    para: '\xB6',
                    middot: '\xB7',
                    cedil: '\xB8',
                    sup1: '\xB9',
                    ordm: 'º',
                    raquo: '\xBB',
                    frac14: '\xBC',
                    frac12: '\xBD',
                    frac34: '\xBE',
                    iquest: '\xBF',
                    Agrave: 'À',
                    Aacute: 'Á',
                    Acirc: 'Â',
                    Atilde: 'Ã',
                    Auml: 'Ä',
                    Aring: 'Å',
                    AElig: 'Æ',
                    Ccedil: 'Ç',
                    Egrave: 'È',
                    Eacute: 'É',
                    Ecirc: 'Ê',
                    Euml: 'Ë',
                    Igrave: 'Ì',
                    Iacute: 'Í',
                    Icirc: 'Î',
                    Iuml: 'Ï',
                    ETH: 'Ð',
                    Ntilde: 'Ñ',
                    Ograve: 'Ò',
                    Oacute: 'Ó',
                    Ocirc: 'Ô',
                    Otilde: 'Õ',
                    Ouml: 'Ö',
                    times: '\xD7',
                    Oslash: 'Ø',
                    Ugrave: 'Ù',
                    Uacute: 'Ú',
                    Ucirc: 'Û',
                    Uuml: 'Ü',
                    Yacute: 'Ý',
                    THORN: 'Þ',
                    szlig: 'ß',
                    agrave: 'à',
                    aacute: 'á',
                    acirc: 'â',
                    atilde: 'ã',
                    auml: 'ä',
                    aring: 'å',
                    aelig: 'æ',
                    ccedil: 'ç',
                    egrave: 'è',
                    eacute: 'é',
                    ecirc: 'ê',
                    euml: 'ë',
                    igrave: 'ì',
                    iacute: 'í',
                    icirc: 'î',
                    iuml: 'ï',
                    eth: 'ð',
                    ntilde: 'ñ',
                    ograve: 'ò',
                    oacute: 'ó',
                    ocirc: 'ô',
                    otilde: 'õ',
                    ouml: 'ö',
                    divide: '\xF7',
                    oslash: 'ø',
                    ugrave: 'ù',
                    uacute: 'ú',
                    ucirc: 'û',
                    uuml: 'ü',
                    yacute: 'ý',
                    thorn: 'þ',
                    yuml: 'ÿ',
                    OElig: 'Œ',
                    oelig: 'œ',
                    Scaron: 'Š',
                    scaron: 'š',
                    Yuml: 'Ÿ',
                    fnof: 'ƒ',
                    circ: 'ˆ',
                    tilde: '\u02DC',
                    Alpha: 'Α',
                    Beta: 'Β',
                    Gamma: 'Γ',
                    Delta: 'Δ',
                    Epsilon: 'Ε',
                    Zeta: 'Ζ',
                    Eta: 'Η',
                    Theta: 'Θ',
                    Iota: 'Ι',
                    Kappa: 'Κ',
                    Lambda: 'Λ',
                    Mu: 'Μ',
                    Nu: 'Ν',
                    Xi: 'Ξ',
                    Omicron: 'Ο',
                    Pi: 'Π',
                    Rho: 'Ρ',
                    Sigma: 'Σ',
                    Tau: 'Τ',
                    Upsilon: 'Υ',
                    Phi: 'Φ',
                    Chi: 'Χ',
                    Psi: 'Ψ',
                    Omega: 'Ω',
                    alpha: 'α',
                    beta: 'β',
                    gamma: 'γ',
                    delta: 'δ',
                    epsilon: 'ε',
                    zeta: 'ζ',
                    eta: 'η',
                    theta: 'θ',
                    iota: 'ι',
                    kappa: 'κ',
                    lambda: 'λ',
                    mu: 'μ',
                    nu: 'ν',
                    xi: 'ξ',
                    omicron: 'ο',
                    pi: 'π',
                    rho: 'ρ',
                    sigmaf: 'ς',
                    sigma: 'σ',
                    tau: 'τ',
                    upsilon: 'υ',
                    phi: 'φ',
                    chi: 'χ',
                    psi: 'ψ',
                    omega: 'ω',
                    thetasym: 'ϑ',
                    upsih: 'ϒ',
                    piv: 'ϖ',
                    ensp: '\u2002',
                    emsp: '\u2003',
                    thinsp: '\u2009',
                    zwnj: '‌',
                    zwj: '‍',
                    lrm: '\u200E',
                    rlm: '\u200F',
                    ndash: '\u2013',
                    mdash: '\u2014',
                    lsquo: '\u2018',
                    rsquo: '\u2019',
                    sbquo: '\u201A',
                    ldquo: '\u201C',
                    rdquo: '\u201D',
                    bdquo: '\u201E',
                    dagger: '\u2020',
                    Dagger: '\u2021',
                    bull: '\u2022',
                    hellip: '\u2026',
                    permil: '\u2030',
                    prime: '\u2032',
                    Prime: '\u2033',
                    lsaquo: '\u2039',
                    rsaquo: '\u203A',
                    oline: '\u203E',
                    frasl: '\u2044',
                    euro: '\u20AC',
                    image: 'ℑ',
                    weierp: '\u2118',
                    real: 'ℜ',
                    trade: '\u2122',
                    alefsym: 'ℵ',
                    larr: '\u2190',
                    uarr: '\u2191',
                    rarr: '\u2192',
                    darr: '\u2193',
                    harr: '\u2194',
                    crarr: '\u21B5',
                    lArr: '\u21D0',
                    uArr: '\u21D1',
                    rArr: '\u21D2',
                    dArr: '\u21D3',
                    hArr: '\u21D4',
                    forall: '\u2200',
                    part: '\u2202',
                    exist: '\u2203',
                    empty: '\u2205',
                    nabla: '\u2207',
                    isin: '\u2208',
                    notin: '\u2209',
                    ni: '\u220B',
                    prod: '\u220F',
                    sum: '\u2211',
                    minus: '\u2212',
                    lowast: '\u2217',
                    radic: '\u221A',
                    prop: '\u221D',
                    infin: '\u221E',
                    ang: '\u2220',
                    and: '\u2227',
                    or: '\u2228',
                    cap: '\u2229',
                    cup: '\u222A',
                    'int': '\u222B',
                    there4: '\u2234',
                    sim: '\u223C',
                    cong: '\u2245',
                    asymp: '\u2248',
                    ne: '\u2260',
                    equiv: '\u2261',
                    le: '\u2264',
                    ge: '\u2265',
                    sub: '\u2282',
                    sup: '\u2283',
                    nsub: '\u2284',
                    sube: '\u2286',
                    supe: '\u2287',
                    oplus: '\u2295',
                    otimes: '\u2297',
                    perp: '\u22A5',
                    sdot: '\u22C5',
                    lceil: '\u2308',
                    rceil: '\u2309',
                    lfloor: '\u230A',
                    rfloor: '\u230B',
                    lang: '\u2329',
                    rang: '\u232A',
                    loz: '\u25CA',
                    spades: '\u2660',
                    clubs: '\u2663',
                    hearts: '\u2665',
                    diams: '\u2666'
                };
            },
            {}
        ],
        3: [
            function (require, module, exports) {
                (function (global, factory) {
                    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.acorn = global.acorn || {});
                }(this, function (exports) {
                    'use strict';
                    var reservedWords = {
                        3: 'abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile',
                        5: 'class enum extends super const export import',
                        6: 'enum',
                        strict: 'implements interface let package private protected public static yield',
                        strictBind: 'eval arguments'
                    };
                    var ecma5AndLessKeywords = 'break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this';
                    var keywords = {
                        5: ecma5AndLessKeywords,
                        6: ecma5AndLessKeywords + ' const class extends export import super'
                    };
                    var nonASCIIidentifierStartChars = '\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fd5\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ae\\ua7b0-\\ua7b7\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc';
                    var nonASCIIidentifierChars = '\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d4-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d01-\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf8\\u1cf9\\u1dc0-\\u1df5\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f';
                    var nonASCIIidentifierStart = new RegExp('[' + nonASCIIidentifierStartChars + ']');
                    var nonASCIIidentifier = new RegExp('[' + nonASCIIidentifierStartChars + nonASCIIidentifierChars + ']');
                    nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
                    var astralIdentifierStartCodes = [
                        0,
                        11,
                        2,
                        25,
                        2,
                        18,
                        2,
                        1,
                        2,
                        14,
                        3,
                        13,
                        35,
                        122,
                        70,
                        52,
                        268,
                        28,
                        4,
                        48,
                        48,
                        31,
                        17,
                        26,
                        6,
                        37,
                        11,
                        29,
                        3,
                        35,
                        5,
                        7,
                        2,
                        4,
                        43,
                        157,
                        19,
                        35,
                        5,
                        35,
                        5,
                        39,
                        9,
                        51,
                        157,
                        310,
                        10,
                        21,
                        11,
                        7,
                        153,
                        5,
                        3,
                        0,
                        2,
                        43,
                        2,
                        1,
                        4,
                        0,
                        3,
                        22,
                        11,
                        22,
                        10,
                        30,
                        66,
                        18,
                        2,
                        1,
                        11,
                        21,
                        11,
                        25,
                        71,
                        55,
                        7,
                        1,
                        65,
                        0,
                        16,
                        3,
                        2,
                        2,
                        2,
                        26,
                        45,
                        28,
                        4,
                        28,
                        36,
                        7,
                        2,
                        27,
                        28,
                        53,
                        11,
                        21,
                        11,
                        18,
                        14,
                        17,
                        111,
                        72,
                        56,
                        50,
                        14,
                        50,
                        785,
                        52,
                        76,
                        44,
                        33,
                        24,
                        27,
                        35,
                        42,
                        34,
                        4,
                        0,
                        13,
                        47,
                        15,
                        3,
                        22,
                        0,
                        2,
                        0,
                        36,
                        17,
                        2,
                        24,
                        85,
                        6,
                        2,
                        0,
                        2,
                        3,
                        2,
                        14,
                        2,
                        9,
                        8,
                        46,
                        39,
                        7,
                        3,
                        1,
                        3,
                        21,
                        2,
                        6,
                        2,
                        1,
                        2,
                        4,
                        4,
                        0,
                        19,
                        0,
                        13,
                        4,
                        159,
                        52,
                        19,
                        3,
                        54,
                        47,
                        21,
                        1,
                        2,
                        0,
                        185,
                        46,
                        42,
                        3,
                        37,
                        47,
                        21,
                        0,
                        60,
                        42,
                        86,
                        25,
                        391,
                        63,
                        32,
                        0,
                        449,
                        56,
                        264,
                        8,
                        2,
                        36,
                        18,
                        0,
                        50,
                        29,
                        881,
                        921,
                        103,
                        110,
                        18,
                        195,
                        2749,
                        1070,
                        4050,
                        582,
                        8634,
                        568,
                        8,
                        30,
                        114,
                        29,
                        19,
                        47,
                        17,
                        3,
                        32,
                        20,
                        6,
                        18,
                        881,
                        68,
                        12,
                        0,
                        67,
                        12,
                        65,
                        0,
                        32,
                        6124,
                        20,
                        754,
                        9486,
                        1,
                        3071,
                        106,
                        6,
                        12,
                        4,
                        8,
                        8,
                        9,
                        5991,
                        84,
                        2,
                        70,
                        2,
                        1,
                        3,
                        0,
                        3,
                        1,
                        3,
                        3,
                        2,
                        11,
                        2,
                        0,
                        2,
                        6,
                        2,
                        64,
                        2,
                        3,
                        3,
                        7,
                        2,
                        6,
                        2,
                        27,
                        2,
                        3,
                        2,
                        4,
                        2,
                        0,
                        4,
                        6,
                        2,
                        339,
                        3,
                        24,
                        2,
                        24,
                        2,
                        30,
                        2,
                        24,
                        2,
                        30,
                        2,
                        24,
                        2,
                        30,
                        2,
                        24,
                        2,
                        30,
                        2,
                        24,
                        2,
                        7,
                        4149,
                        196,
                        60,
                        67,
                        1213,
                        3,
                        2,
                        26,
                        2,
                        1,
                        2,
                        0,
                        3,
                        0,
                        2,
                        9,
                        2,
                        3,
                        2,
                        0,
                        2,
                        0,
                        7,
                        0,
                        5,
                        0,
                        2,
                        0,
                        2,
                        0,
                        2,
                        2,
                        2,
                        1,
                        2,
                        0,
                        3,
                        0,
                        2,
                        0,
                        2,
                        0,
                        2,
                        0,
                        2,
                        0,
                        2,
                        1,
                        2,
                        0,
                        3,
                        3,
                        2,
                        6,
                        2,
                        3,
                        2,
                        3,
                        2,
                        0,
                        2,
                        9,
                        2,
                        16,
                        6,
                        2,
                        2,
                        4,
                        2,
                        16,
                        4421,
                        42710,
                        42,
                        4148,
                        12,
                        221,
                        3,
                        5761,
                        10591,
                        541
                    ];
                    var astralIdentifierCodes = [
                        509,
                        0,
                        227,
                        0,
                        150,
                        4,
                        294,
                        9,
                        1368,
                        2,
                        2,
                        1,
                        6,
                        3,
                        41,
                        2,
                        5,
                        0,
                        166,
                        1,
                        1306,
                        2,
                        54,
                        14,
                        32,
                        9,
                        16,
                        3,
                        46,
                        10,
                        54,
                        9,
                        7,
                        2,
                        37,
                        13,
                        2,
                        9,
                        52,
                        0,
                        13,
                        2,
                        49,
                        13,
                        10,
                        2,
                        4,
                        9,
                        83,
                        11,
                        7,
                        0,
                        161,
                        11,
                        6,
                        9,
                        7,
                        3,
                        57,
                        0,
                        2,
                        6,
                        3,
                        1,
                        3,
                        2,
                        10,
                        0,
                        11,
                        1,
                        3,
                        6,
                        4,
                        4,
                        193,
                        17,
                        10,
                        9,
                        87,
                        19,
                        13,
                        9,
                        214,
                        6,
                        3,
                        8,
                        28,
                        1,
                        83,
                        16,
                        16,
                        9,
                        82,
                        12,
                        9,
                        9,
                        84,
                        14,
                        5,
                        9,
                        423,
                        9,
                        838,
                        7,
                        2,
                        7,
                        17,
                        9,
                        57,
                        21,
                        2,
                        13,
                        19882,
                        9,
                        135,
                        4,
                        60,
                        6,
                        26,
                        9,
                        1016,
                        45,
                        17,
                        3,
                        19723,
                        1,
                        5319,
                        4,
                        4,
                        5,
                        9,
                        7,
                        3,
                        6,
                        31,
                        3,
                        149,
                        2,
                        1418,
                        49,
                        513,
                        54,
                        5,
                        49,
                        9,
                        0,
                        15,
                        0,
                        23,
                        4,
                        2,
                        14,
                        1361,
                        6,
                        2,
                        16,
                        3,
                        6,
                        2,
                        1,
                        2,
                        4,
                        2214,
                        6,
                        110,
                        6,
                        6,
                        9,
                        792487,
                        239
                    ];
                    function isInAstralSet(code, set) {
                        var pos = 65536;
                        for (var i = 0; i < set.length; i += 2) {
                            pos += set[i];
                            if (pos > code) {
                                return false;
                            }
                            pos += set[i + 1];
                            if (pos >= code) {
                                return true;
                            }
                        }
                    }
                    function isIdentifierStart(code, astral) {
                        if (code < 65) {
                            return code === 36;
                        }
                        if (code < 91) {
                            return true;
                        }
                        if (code < 97) {
                            return code === 95;
                        }
                        if (code < 123) {
                            return true;
                        }
                        if (code <= 65535) {
                            return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
                        }
                        if (astral === false) {
                            return false;
                        }
                        return isInAstralSet(code, astralIdentifierStartCodes);
                    }
                    function isIdentifierChar(code, astral) {
                        if (code < 48) {
                            return code === 36;
                        }
                        if (code < 58) {
                            return true;
                        }
                        if (code < 65) {
                            return false;
                        }
                        if (code < 91) {
                            return true;
                        }
                        if (code < 97) {
                            return code === 95;
                        }
                        if (code < 123) {
                            return true;
                        }
                        if (code <= 65535) {
                            return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
                        }
                        if (astral === false) {
                            return false;
                        }
                        return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
                    }
                    var TokenType = function TokenType(label, conf) {
                        if (conf === void 0)
                            conf = {};
                        this.label = label;
                        this.keyword = conf.keyword;
                        this.beforeExpr = !!conf.beforeExpr;
                        this.startsExpr = !!conf.startsExpr;
                        this.isLoop = !!conf.isLoop;
                        this.isAssign = !!conf.isAssign;
                        this.prefix = !!conf.prefix;
                        this.postfix = !!conf.postfix;
                        this.binop = conf.binop || null;
                        this.updateContext = null;
                    };
                    function binop(name, prec) {
                        return new TokenType(name, {
                            beforeExpr: true,
                            binop: prec
                        });
                    }
                    var beforeExpr = { beforeExpr: true };
                    var startsExpr = { startsExpr: true };
                    var keywords$1 = {};
                    function kw(name, options) {
                        if (options === void 0)
                            options = {};
                        options.keyword = name;
                        return keywords$1[name] = new TokenType(name, options);
                    }
                    var types = {
                        num: new TokenType('num', startsExpr),
                        regexp: new TokenType('regexp', startsExpr),
                        string: new TokenType('string', startsExpr),
                        name: new TokenType('name', startsExpr),
                        eof: new TokenType('eof'),
                        bracketL: new TokenType('[', {
                            beforeExpr: true,
                            startsExpr: true
                        }),
                        bracketR: new TokenType(']'),
                        braceL: new TokenType('{', {
                            beforeExpr: true,
                            startsExpr: true
                        }),
                        braceR: new TokenType('}'),
                        parenL: new TokenType('(', {
                            beforeExpr: true,
                            startsExpr: true
                        }),
                        parenR: new TokenType(')'),
                        comma: new TokenType(',', beforeExpr),
                        semi: new TokenType(';', beforeExpr),
                        colon: new TokenType(':', beforeExpr),
                        dot: new TokenType('.'),
                        question: new TokenType('?', beforeExpr),
                        arrow: new TokenType('=>', beforeExpr),
                        template: new TokenType('template'),
                        invalidTemplate: new TokenType('invalidTemplate'),
                        ellipsis: new TokenType('...', beforeExpr),
                        backQuote: new TokenType('`', startsExpr),
                        dollarBraceL: new TokenType('${', {
                            beforeExpr: true,
                            startsExpr: true
                        }),
                        eq: new TokenType('=', {
                            beforeExpr: true,
                            isAssign: true
                        }),
                        assign: new TokenType('_=', {
                            beforeExpr: true,
                            isAssign: true
                        }),
                        incDec: new TokenType('++/--', {
                            prefix: true,
                            postfix: true,
                            startsExpr: true
                        }),
                        prefix: new TokenType('prefix', {
                            beforeExpr: true,
                            prefix: true,
                            startsExpr: true
                        }),
                        logicalOR: binop('||', 1),
                        logicalAND: binop('&&', 2),
                        bitwiseOR: binop('|', 3),
                        bitwiseXOR: binop('^', 4),
                        bitwiseAND: binop('&', 5),
                        equality: binop('==/!=', 6),
                        relational: binop('</>', 7),
                        bitShift: binop('<</>>', 8),
                        plusMin: new TokenType('+/-', {
                            beforeExpr: true,
                            binop: 9,
                            prefix: true,
                            startsExpr: true
                        }),
                        modulo: binop('%', 10),
                        star: binop('*', 10),
                        slash: binop('/', 10),
                        starstar: new TokenType('**', { beforeExpr: true }),
                        _break: kw('break'),
                        _case: kw('case', beforeExpr),
                        _catch: kw('catch'),
                        _continue: kw('continue'),
                        _debugger: kw('debugger'),
                        _default: kw('default', beforeExpr),
                        _do: kw('do', {
                            isLoop: true,
                            beforeExpr: true
                        }),
                        _else: kw('else', beforeExpr),
                        _finally: kw('finally'),
                        _for: kw('for', { isLoop: true }),
                        _function: kw('function', startsExpr),
                        _if: kw('if'),
                        _return: kw('return', beforeExpr),
                        _switch: kw('switch'),
                        _throw: kw('throw', beforeExpr),
                        _try: kw('try'),
                        _var: kw('var'),
                        _const: kw('const'),
                        _while: kw('while', { isLoop: true }),
                        _with: kw('with'),
                        _new: kw('new', {
                            beforeExpr: true,
                            startsExpr: true
                        }),
                        _this: kw('this', startsExpr),
                        _super: kw('super', startsExpr),
                        _class: kw('class', startsExpr),
                        _extends: kw('extends', beforeExpr),
                        _export: kw('export'),
                        _import: kw('import'),
                        _null: kw('null', startsExpr),
                        _true: kw('true', startsExpr),
                        _false: kw('false', startsExpr),
                        _in: kw('in', {
                            beforeExpr: true,
                            binop: 7
                        }),
                        _instanceof: kw('instanceof', {
                            beforeExpr: true,
                            binop: 7
                        }),
                        _typeof: kw('typeof', {
                            beforeExpr: true,
                            prefix: true,
                            startsExpr: true
                        }),
                        _void: kw('void', {
                            beforeExpr: true,
                            prefix: true,
                            startsExpr: true
                        }),
                        _delete: kw('delete', {
                            beforeExpr: true,
                            prefix: true,
                            startsExpr: true
                        })
                    };
                    var lineBreak = /\r\n?|\n|\u2028|\u2029/;
                    var lineBreakG = new RegExp(lineBreak.source, 'g');
                    function isNewLine(code) {
                        return code === 10 || code === 13 || code === 8232 || code === 8233;
                    }
                    var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
                    var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
                    var ref = Object.prototype;
                    var hasOwnProperty = ref.hasOwnProperty;
                    var toString = ref.toString;
                    function has(obj, propName) {
                        return hasOwnProperty.call(obj, propName);
                    }
                    var isArray = Array.isArray || function (obj) {
                        return toString.call(obj) === '[object Array]';
                    };
                    var Position = function Position(line, col) {
                        this.line = line;
                        this.column = col;
                    };
                    Position.prototype.offset = function offset(n) {
                        return new Position(this.line, this.column + n);
                    };
                    var SourceLocation = function SourceLocation(p, start, end) {
                        this.start = start;
                        this.end = end;
                        if (p.sourceFile !== null) {
                            this.source = p.sourceFile;
                        }
                    };
                    function getLineInfo(input, offset) {
                        for (var line = 1, cur = 0;;) {
                            lineBreakG.lastIndex = cur;
                            var match = lineBreakG.exec(input);
                            if (match && match.index < offset) {
                                ++line;
                                cur = match.index + match[0].length;
                            } else {
                                return new Position(line, offset - cur);
                            }
                        }
                    }
                    var defaultOptions = {
                        ecmaVersion: 7,
                        sourceType: 'script',
                        onInsertedSemicolon: null,
                        onTrailingComma: null,
                        allowReserved: null,
                        allowReturnOutsideFunction: false,
                        allowImportExportEverywhere: false,
                        allowHashBang: false,
                        locations: false,
                        onToken: null,
                        onComment: null,
                        ranges: false,
                        program: null,
                        sourceFile: null,
                        directSourceFile: null,
                        preserveParens: false,
                        plugins: {}
                    };
                    function getOptions(opts) {
                        var options = {};
                        for (var opt in defaultOptions) {
                            options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];
                        }
                        if (options.ecmaVersion >= 2015) {
                            options.ecmaVersion -= 2009;
                        }
                        if (options.allowReserved == null) {
                            options.allowReserved = options.ecmaVersion < 5;
                        }
                        if (isArray(options.onToken)) {
                            var tokens = options.onToken;
                            options.onToken = function (token) {
                                return tokens.push(token);
                            };
                        }
                        if (isArray(options.onComment)) {
                            options.onComment = pushComment(options, options.onComment);
                        }
                        return options;
                    }
                    function pushComment(options, array) {
                        return function (block, text, start, end, startLoc, endLoc) {
                            var comment = {
                                type: block ? 'Block' : 'Line',
                                value: text,
                                start: start,
                                end: end
                            };
                            if (options.locations) {
                                comment.loc = new SourceLocation(this, startLoc, endLoc);
                            }
                            if (options.ranges) {
                                comment.range = [
                                    start,
                                    end
                                ];
                            }
                            array.push(comment);
                        };
                    }
                    var plugins = {};
                    function keywordRegexp(words) {
                        return new RegExp('^(?:' + words.replace(/ /g, '|') + ')$');
                    }
                    var Parser = function Parser(options, input, startPos) {
                        this.options = options = getOptions(options);
                        this.sourceFile = options.sourceFile;
                        this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);
                        var reserved = '';
                        if (!options.allowReserved) {
                            for (var v = options.ecmaVersion;; v--) {
                                if (reserved = reservedWords[v]) {
                                    break;
                                }
                            }
                            if (options.sourceType == 'module') {
                                reserved += ' await';
                            }
                        }
                        this.reservedWords = keywordRegexp(reserved);
                        var reservedStrict = (reserved ? reserved + ' ' : '') + reservedWords.strict;
                        this.reservedWordsStrict = keywordRegexp(reservedStrict);
                        this.reservedWordsStrictBind = keywordRegexp(reservedStrict + ' ' + reservedWords.strictBind);
                        this.input = String(input);
                        this.containsEsc = false;
                        this.loadPlugins(options.plugins);
                        if (startPos) {
                            this.pos = startPos;
                            this.lineStart = this.input.lastIndexOf('\n', startPos - 1) + 1;
                            this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
                        } else {
                            this.pos = this.lineStart = 0;
                            this.curLine = 1;
                        }
                        this.type = types.eof;
                        this.value = null;
                        this.start = this.end = this.pos;
                        this.startLoc = this.endLoc = this.curPosition();
                        this.lastTokEndLoc = this.lastTokStartLoc = null;
                        this.lastTokStart = this.lastTokEnd = this.pos;
                        this.context = this.initialContext();
                        this.exprAllowed = true;
                        this.inModule = options.sourceType === 'module';
                        this.strict = this.inModule || this.strictDirective(this.pos);
                        this.potentialArrowAt = -1;
                        this.inFunction = this.inGenerator = this.inAsync = false;
                        this.yieldPos = this.awaitPos = 0;
                        this.labels = [];
                        if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!') {
                            this.skipLineComment(2);
                        }
                        this.scopeStack = [];
                        this.enterFunctionScope();
                    };
                    Parser.prototype.isKeyword = function isKeyword(word) {
                        return this.keywords.test(word);
                    };
                    Parser.prototype.isReservedWord = function isReservedWord(word) {
                        return this.reservedWords.test(word);
                    };
                    Parser.prototype.extend = function extend(name, f) {
                        this[name] = f(this[name]);
                    };
                    Parser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {
                        var this$1 = this;
                        for (var name in pluginConfigs) {
                            var plugin = plugins[name];
                            if (!plugin) {
                                throw new Error('Plugin \'' + name + '\' not found');
                            }
                            plugin(this$1, pluginConfigs[name]);
                        }
                    };
                    Parser.prototype.parse = function parse() {
                        var node = this.options.program || this.startNode();
                        this.nextToken();
                        return this.parseTopLevel(node);
                    };
                    var pp = Parser.prototype;
                    var literal = /^(?:'((?:[^']|\.)*)'|"((?:[^"]|\.)*)"|;)/;
                    pp.strictDirective = function (start) {
                        var this$1 = this;
                        for (;;) {
                            skipWhiteSpace.lastIndex = start;
                            start += skipWhiteSpace.exec(this$1.input)[0].length;
                            var match = literal.exec(this$1.input.slice(start));
                            if (!match) {
                                return false;
                            }
                            if ((match[1] || match[2]) == 'use strict') {
                                return true;
                            }
                            start += match[0].length;
                        }
                    };
                    pp.eat = function (type) {
                        if (this.type === type) {
                            this.next();
                            return true;
                        } else {
                            return false;
                        }
                    };
                    pp.isContextual = function (name) {
                        return this.type === types.name && this.value === name;
                    };
                    pp.eatContextual = function (name) {
                        return this.value === name && this.eat(types.name);
                    };
                    pp.expectContextual = function (name) {
                        if (!this.eatContextual(name)) {
                            this.unexpected();
                        }
                    };
                    pp.canInsertSemicolon = function () {
                        return this.type === types.eof || this.type === types.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
                    };
                    pp.insertSemicolon = function () {
                        if (this.canInsertSemicolon()) {
                            if (this.options.onInsertedSemicolon) {
                                this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
                            }
                            return true;
                        }
                    };
                    pp.semicolon = function () {
                        if (!this.eat(types.semi) && !this.insertSemicolon()) {
                            this.unexpected();
                        }
                    };
                    pp.afterTrailingComma = function (tokType, notNext) {
                        if (this.type == tokType) {
                            if (this.options.onTrailingComma) {
                                this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
                            }
                            if (!notNext) {
                                this.next();
                            }
                            return true;
                        }
                    };
                    pp.expect = function (type) {
                        this.eat(type) || this.unexpected();
                    };
                    pp.unexpected = function (pos) {
                        this.raise(pos != null ? pos : this.start, 'Unexpected token');
                    };
                    function DestructuringErrors() {
                        this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = -1;
                    }
                    pp.checkPatternErrors = function (refDestructuringErrors, isAssign) {
                        if (!refDestructuringErrors) {
                            return;
                        }
                        if (refDestructuringErrors.trailingComma > -1) {
                            this.raiseRecoverable(refDestructuringErrors.trailingComma, 'Comma is not permitted after the rest element');
                        }
                        var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
                        if (parens > -1) {
                            this.raiseRecoverable(parens, 'Parenthesized pattern');
                        }
                    };
                    pp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {
                        var pos = refDestructuringErrors ? refDestructuringErrors.shorthandAssign : -1;
                        if (!andThrow) {
                            return pos >= 0;
                        }
                        if (pos > -1) {
                            this.raise(pos, 'Shorthand property assignments are valid only in destructuring patterns');
                        }
                    };
                    pp.checkYieldAwaitInDefaultParams = function () {
                        if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
                            this.raise(this.yieldPos, 'Yield expression cannot be a default value');
                        }
                        if (this.awaitPos) {
                            this.raise(this.awaitPos, 'Await expression cannot be a default value');
                        }
                    };
                    pp.isSimpleAssignTarget = function (expr) {
                        if (expr.type === 'ParenthesizedExpression') {
                            return this.isSimpleAssignTarget(expr.expression);
                        }
                        return expr.type === 'Identifier' || expr.type === 'MemberExpression';
                    };
                    var pp$1 = Parser.prototype;
                    pp$1.parseTopLevel = function (node) {
                        var this$1 = this;
                        var exports = {};
                        if (!node.body) {
                            node.body = [];
                        }
                        while (this.type !== types.eof) {
                            var stmt = this$1.parseStatement(true, true, exports);
                            node.body.push(stmt);
                        }
                        this.next();
                        if (this.options.ecmaVersion >= 6) {
                            node.sourceType = this.options.sourceType;
                        }
                        return this.finishNode(node, 'Program');
                    };
                    var loopLabel = { kind: 'loop' };
                    var switchLabel = { kind: 'switch' };
                    pp$1.isLet = function () {
                        if (this.type !== types.name || this.options.ecmaVersion < 6 || this.value != 'let') {
                            return false;
                        }
                        skipWhiteSpace.lastIndex = this.pos;
                        var skip = skipWhiteSpace.exec(this.input);
                        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
                        if (nextCh === 91 || nextCh == 123) {
                            return true;
                        }
                        if (isIdentifierStart(nextCh, true)) {
                            var pos = next + 1;
                            while (isIdentifierChar(this.input.charCodeAt(pos), true)) {
                                ++pos;
                            }
                            var ident = this.input.slice(next, pos);
                            if (!this.isKeyword(ident)) {
                                return true;
                            }
                        }
                        return false;
                    };
                    pp$1.isAsyncFunction = function () {
                        if (this.type !== types.name || this.options.ecmaVersion < 8 || this.value != 'async') {
                            return false;
                        }
                        skipWhiteSpace.lastIndex = this.pos;
                        var skip = skipWhiteSpace.exec(this.input);
                        var next = this.pos + skip[0].length;
                        return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === 'function' && (next + 8 == this.input.length || !isIdentifierChar(this.input.charAt(next + 8)));
                    };
                    pp$1.parseStatement = function (declaration, topLevel, exports) {
                        var starttype = this.type, node = this.startNode(), kind;
                        if (this.isLet()) {
                            starttype = types._var;
                            kind = 'let';
                        }
                        switch (starttype) {
                        case types._break:
                        case types._continue:
                            return this.parseBreakContinueStatement(node, starttype.keyword);
                        case types._debugger:
                            return this.parseDebuggerStatement(node);
                        case types._do:
                            return this.parseDoStatement(node);
                        case types._for:
                            return this.parseForStatement(node);
                        case types._function:
                            if (!declaration && this.options.ecmaVersion >= 6) {
                                this.unexpected();
                            }
                            return this.parseFunctionStatement(node, false);
                        case types._class:
                            if (!declaration) {
                                this.unexpected();
                            }
                            return this.parseClass(node, true);
                        case types._if:
                            return this.parseIfStatement(node);
                        case types._return:
                            return this.parseReturnStatement(node);
                        case types._switch:
                            return this.parseSwitchStatement(node);
                        case types._throw:
                            return this.parseThrowStatement(node);
                        case types._try:
                            return this.parseTryStatement(node);
                        case types._const:
                        case types._var:
                            kind = kind || this.value;
                            if (!declaration && kind != 'var') {
                                this.unexpected();
                            }
                            return this.parseVarStatement(node, kind);
                        case types._while:
                            return this.parseWhileStatement(node);
                        case types._with:
                            return this.parseWithStatement(node);
                        case types.braceL:
                            return this.parseBlock();
                        case types.semi:
                            return this.parseEmptyStatement(node);
                        case types._export:
                        case types._import:
                            if (!this.options.allowImportExportEverywhere) {
                                if (!topLevel) {
                                    this.raise(this.start, '\'import\' and \'export\' may only appear at the top level');
                                }
                                if (!this.inModule) {
                                    this.raise(this.start, '\'import\' and \'export\' may appear only with \'sourceType: module\'');
                                }
                            }
                            return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports);
                        default:
                            if (this.isAsyncFunction() && declaration) {
                                this.next();
                                return this.parseFunctionStatement(node, true);
                            }
                            var maybeName = this.value, expr = this.parseExpression();
                            if (starttype === types.name && expr.type === 'Identifier' && this.eat(types.colon)) {
                                return this.parseLabeledStatement(node, maybeName, expr);
                            } else {
                                return this.parseExpressionStatement(node, expr);
                            }
                        }
                    };
                    pp$1.parseBreakContinueStatement = function (node, keyword) {
                        var this$1 = this;
                        var isBreak = keyword == 'break';
                        this.next();
                        if (this.eat(types.semi) || this.insertSemicolon()) {
                            node.label = null;
                        } else if (this.type !== types.name) {
                            this.unexpected();
                        } else {
                            node.label = this.parseIdent();
                            this.semicolon();
                        }
                        var i = 0;
                        for (; i < this.labels.length; ++i) {
                            var lab = this$1.labels[i];
                            if (node.label == null || lab.name === node.label.name) {
                                if (lab.kind != null && (isBreak || lab.kind === 'loop')) {
                                    break;
                                }
                                if (node.label && isBreak) {
                                    break;
                                }
                            }
                        }
                        if (i === this.labels.length) {
                            this.raise(node.start, 'Unsyntactic ' + keyword);
                        }
                        return this.finishNode(node, isBreak ? 'BreakStatement' : 'ContinueStatement');
                    };
                    pp$1.parseDebuggerStatement = function (node) {
                        this.next();
                        this.semicolon();
                        return this.finishNode(node, 'DebuggerStatement');
                    };
                    pp$1.parseDoStatement = function (node) {
                        this.next();
                        this.labels.push(loopLabel);
                        node.body = this.parseStatement(false);
                        this.labels.pop();
                        this.expect(types._while);
                        node.test = this.parseParenExpression();
                        if (this.options.ecmaVersion >= 6) {
                            this.eat(types.semi);
                        } else {
                            this.semicolon();
                        }
                        return this.finishNode(node, 'DoWhileStatement');
                    };
                    pp$1.parseForStatement = function (node) {
                        this.next();
                        this.labels.push(loopLabel);
                        this.enterLexicalScope();
                        this.expect(types.parenL);
                        if (this.type === types.semi) {
                            return this.parseFor(node, null);
                        }
                        var isLet = this.isLet();
                        if (this.type === types._var || this.type === types._const || isLet) {
                            var init$1 = this.startNode(), kind = isLet ? 'let' : this.value;
                            this.next();
                            this.parseVar(init$1, true, kind);
                            this.finishNode(init$1, 'VariableDeclaration');
                            if ((this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual('of')) && init$1.declarations.length === 1 && !(kind !== 'var' && init$1.declarations[0].init)) {
                                return this.parseForIn(node, init$1);
                            }
                            return this.parseFor(node, init$1);
                        }
                        var refDestructuringErrors = new DestructuringErrors();
                        var init = this.parseExpression(true, refDestructuringErrors);
                        if (this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual('of')) {
                            this.toAssignable(init);
                            this.checkLVal(init);
                            this.checkPatternErrors(refDestructuringErrors, true);
                            return this.parseForIn(node, init);
                        } else {
                            this.checkExpressionErrors(refDestructuringErrors, true);
                        }
                        return this.parseFor(node, init);
                    };
                    pp$1.parseFunctionStatement = function (node, isAsync) {
                        this.next();
                        return this.parseFunction(node, true, false, isAsync);
                    };
                    pp$1.isFunction = function () {
                        return this.type === types._function || this.isAsyncFunction();
                    };
                    pp$1.parseIfStatement = function (node) {
                        this.next();
                        node.test = this.parseParenExpression();
                        node.consequent = this.parseStatement(!this.strict && this.isFunction());
                        node.alternate = this.eat(types._else) ? this.parseStatement(!this.strict && this.isFunction()) : null;
                        return this.finishNode(node, 'IfStatement');
                    };
                    pp$1.parseReturnStatement = function (node) {
                        if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
                            this.raise(this.start, '\'return\' outside of function');
                        }
                        this.next();
                        if (this.eat(types.semi) || this.insertSemicolon()) {
                            node.argument = null;
                        } else {
                            node.argument = this.parseExpression();
                            this.semicolon();
                        }
                        return this.finishNode(node, 'ReturnStatement');
                    };
                    pp$1.parseSwitchStatement = function (node) {
                        var this$1 = this;
                        this.next();
                        node.discriminant = this.parseParenExpression();
                        node.cases = [];
                        this.expect(types.braceL);
                        this.labels.push(switchLabel);
                        this.enterLexicalScope();
                        var cur;
                        for (var sawDefault = false; this.type != types.braceR;) {
                            if (this$1.type === types._case || this$1.type === types._default) {
                                var isCase = this$1.type === types._case;
                                if (cur) {
                                    this$1.finishNode(cur, 'SwitchCase');
                                }
                                node.cases.push(cur = this$1.startNode());
                                cur.consequent = [];
                                this$1.next();
                                if (isCase) {
                                    cur.test = this$1.parseExpression();
                                } else {
                                    if (sawDefault) {
                                        this$1.raiseRecoverable(this$1.lastTokStart, 'Multiple default clauses');
                                    }
                                    sawDefault = true;
                                    cur.test = null;
                                }
                                this$1.expect(types.colon);
                            } else {
                                if (!cur) {
                                    this$1.unexpected();
                                }
                                cur.consequent.push(this$1.parseStatement(true));
                            }
                        }
                        this.exitLexicalScope();
                        if (cur) {
                            this.finishNode(cur, 'SwitchCase');
                        }
                        this.next();
                        this.labels.pop();
                        return this.finishNode(node, 'SwitchStatement');
                    };
                    pp$1.parseThrowStatement = function (node) {
                        this.next();
                        if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
                            this.raise(this.lastTokEnd, 'Illegal newline after throw');
                        }
                        node.argument = this.parseExpression();
                        this.semicolon();
                        return this.finishNode(node, 'ThrowStatement');
                    };
                    var empty = [];
                    pp$1.parseTryStatement = function (node) {
                        this.next();
                        node.block = this.parseBlock();
                        node.handler = null;
                        if (this.type === types._catch) {
                            var clause = this.startNode();
                            this.next();
                            this.expect(types.parenL);
                            clause.param = this.parseBindingAtom();
                            this.enterLexicalScope();
                            this.checkLVal(clause.param, 'let');
                            this.expect(types.parenR);
                            clause.body = this.parseBlock(false);
                            this.exitLexicalScope();
                            node.handler = this.finishNode(clause, 'CatchClause');
                        }
                        node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;
                        if (!node.handler && !node.finalizer) {
                            this.raise(node.start, 'Missing catch or finally clause');
                        }
                        return this.finishNode(node, 'TryStatement');
                    };
                    pp$1.parseVarStatement = function (node, kind) {
                        this.next();
                        this.parseVar(node, false, kind);
                        this.semicolon();
                        return this.finishNode(node, 'VariableDeclaration');
                    };
                    pp$1.parseWhileStatement = function (node) {
                        this.next();
                        node.test = this.parseParenExpression();
                        this.labels.push(loopLabel);
                        node.body = this.parseStatement(false);
                        this.labels.pop();
                        return this.finishNode(node, 'WhileStatement');
                    };
                    pp$1.parseWithStatement = function (node) {
                        if (this.strict) {
                            this.raise(this.start, '\'with\' in strict mode');
                        }
                        this.next();
                        node.object = this.parseParenExpression();
                        node.body = this.parseStatement(false);
                        return this.finishNode(node, 'WithStatement');
                    };
                    pp$1.parseEmptyStatement = function (node) {
                        this.next();
                        return this.finishNode(node, 'EmptyStatement');
                    };
                    pp$1.parseLabeledStatement = function (node, maybeName, expr) {
                        var this$1 = this;
                        for (var i$1 = 0, list = this$1.labels; i$1 < list.length; i$1 += 1) {
                            var label = list[i$1];
                            if (label.name === maybeName) {
                                this$1.raise(expr.start, 'Label \'' + maybeName + '\' is already declared');
                            }
                        }
                        var kind = this.type.isLoop ? 'loop' : this.type === types._switch ? 'switch' : null;
                        for (var i = this.labels.length - 1; i >= 0; i--) {
                            var label$1 = this$1.labels[i];
                            if (label$1.statementStart == node.start) {
                                label$1.statementStart = this$1.start;
                                label$1.kind = kind;
                            } else {
                                break;
                            }
                        }
                        this.labels.push({
                            name: maybeName,
                            kind: kind,
                            statementStart: this.start
                        });
                        node.body = this.parseStatement(true);
                        if (node.body.type == 'ClassDeclaration' || node.body.type == 'VariableDeclaration' && node.body.kind != 'var' || node.body.type == 'FunctionDeclaration' && (this.strict || node.body.generator)) {
                            this.raiseRecoverable(node.body.start, 'Invalid labeled declaration');
                        }
                        this.labels.pop();
                        node.label = expr;
                        return this.finishNode(node, 'LabeledStatement');
                    };
                    pp$1.parseExpressionStatement = function (node, expr) {
                        node.expression = expr;
                        this.semicolon();
                        return this.finishNode(node, 'ExpressionStatement');
                    };
                    pp$1.parseBlock = function (createNewLexicalScope) {
                        var this$1 = this;
                        if (createNewLexicalScope === void 0)
                            createNewLexicalScope = true;
                        var node = this.startNode();
                        node.body = [];
                        this.expect(types.braceL);
                        if (createNewLexicalScope) {
                            this.enterLexicalScope();
                        }
                        while (!this.eat(types.braceR)) {
                            var stmt = this$1.parseStatement(true);
                            node.body.push(stmt);
                        }
                        if (createNewLexicalScope) {
                            this.exitLexicalScope();
                        }
                        return this.finishNode(node, 'BlockStatement');
                    };
                    pp$1.parseFor = function (node, init) {
                        node.init = init;
                        this.expect(types.semi);
                        node.test = this.type === types.semi ? null : this.parseExpression();
                        this.expect(types.semi);
                        node.update = this.type === types.parenR ? null : this.parseExpression();
                        this.expect(types.parenR);
                        this.exitLexicalScope();
                        node.body = this.parseStatement(false);
                        this.labels.pop();
                        return this.finishNode(node, 'ForStatement');
                    };
                    pp$1.parseForIn = function (node, init) {
                        var type = this.type === types._in ? 'ForInStatement' : 'ForOfStatement';
                        this.next();
                        node.left = init;
                        node.right = this.parseExpression();
                        this.expect(types.parenR);
                        this.exitLexicalScope();
                        node.body = this.parseStatement(false);
                        this.labels.pop();
                        return this.finishNode(node, type);
                    };
                    pp$1.parseVar = function (node, isFor, kind) {
                        var this$1 = this;
                        node.declarations = [];
                        node.kind = kind;
                        for (;;) {
                            var decl = this$1.startNode();
                            this$1.parseVarId(decl, kind);
                            if (this$1.eat(types.eq)) {
                                decl.init = this$1.parseMaybeAssign(isFor);
                            } else if (kind === 'const' && !(this$1.type === types._in || this$1.options.ecmaVersion >= 6 && this$1.isContextual('of'))) {
                                this$1.unexpected();
                            } else if (decl.id.type != 'Identifier' && !(isFor && (this$1.type === types._in || this$1.isContextual('of')))) {
                                this$1.raise(this$1.lastTokEnd, 'Complex binding patterns require an initialization value');
                            } else {
                                decl.init = null;
                            }
                            node.declarations.push(this$1.finishNode(decl, 'VariableDeclarator'));
                            if (!this$1.eat(types.comma)) {
                                break;
                            }
                        }
                        return node;
                    };
                    pp$1.parseVarId = function (decl, kind) {
                        decl.id = this.parseBindingAtom(kind);
                        this.checkLVal(decl.id, kind, false);
                    };
                    pp$1.parseFunction = function (node, isStatement, allowExpressionBody, isAsync) {
                        this.initFunction(node);
                        if (this.options.ecmaVersion >= 6 && !isAsync) {
                            node.generator = this.eat(types.star);
                        }
                        if (this.options.ecmaVersion >= 8) {
                            node.async = !!isAsync;
                        }
                        if (isStatement) {
                            node.id = isStatement === 'nullableID' && this.type != types.name ? null : this.parseIdent();
                            if (node.id) {
                                this.checkLVal(node.id, 'var');
                            }
                        }
                        var oldInGen = this.inGenerator, oldInAsync = this.inAsync, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;
                        this.inGenerator = node.generator;
                        this.inAsync = node.async;
                        this.yieldPos = 0;
                        this.awaitPos = 0;
                        this.inFunction = true;
                        this.enterFunctionScope();
                        if (!isStatement) {
                            node.id = this.type == types.name ? this.parseIdent() : null;
                        }
                        this.parseFunctionParams(node);
                        this.parseFunctionBody(node, allowExpressionBody);
                        this.inGenerator = oldInGen;
                        this.inAsync = oldInAsync;
                        this.yieldPos = oldYieldPos;
                        this.awaitPos = oldAwaitPos;
                        this.inFunction = oldInFunc;
                        return this.finishNode(node, isStatement ? 'FunctionDeclaration' : 'FunctionExpression');
                    };
                    pp$1.parseFunctionParams = function (node) {
                        this.expect(types.parenL);
                        node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
                        this.checkYieldAwaitInDefaultParams();
                    };
                    pp$1.parseClass = function (node, isStatement) {
                        var this$1 = this;
                        this.next();
                        this.parseClassId(node, isStatement);
                        this.parseClassSuper(node);
                        var classBody = this.startNode();
                        var hadConstructor = false;
                        classBody.body = [];
                        this.expect(types.braceL);
                        while (!this.eat(types.braceR)) {
                            if (this$1.eat(types.semi)) {
                                continue;
                            }
                            var method = this$1.startNode();
                            var isGenerator = this$1.eat(types.star);
                            var isAsync = false;
                            var isMaybeStatic = this$1.type === types.name && this$1.value === 'static';
                            this$1.parsePropertyName(method);
                            method.static = isMaybeStatic && this$1.type !== types.parenL;
                            if (method.static) {
                                if (isGenerator) {
                                    this$1.unexpected();
                                }
                                isGenerator = this$1.eat(types.star);
                                this$1.parsePropertyName(method);
                            }
                            if (this$1.options.ecmaVersion >= 8 && !isGenerator && !method.computed && method.key.type === 'Identifier' && method.key.name === 'async' && this$1.type !== types.parenL && !this$1.canInsertSemicolon()) {
                                isAsync = true;
                                this$1.parsePropertyName(method);
                            }
                            method.kind = 'method';
                            var isGetSet = false;
                            if (!method.computed) {
                                var key = method.key;
                                if (!isGenerator && !isAsync && key.type === 'Identifier' && this$1.type !== types.parenL && (key.name === 'get' || key.name === 'set')) {
                                    isGetSet = true;
                                    method.kind = key.name;
                                    key = this$1.parsePropertyName(method);
                                }
                                if (!method.static && (key.type === 'Identifier' && key.name === 'constructor' || key.type === 'Literal' && key.value === 'constructor')) {
                                    if (hadConstructor) {
                                        this$1.raise(key.start, 'Duplicate constructor in the same class');
                                    }
                                    if (isGetSet) {
                                        this$1.raise(key.start, 'Constructor can\'t have get/set modifier');
                                    }
                                    if (isGenerator) {
                                        this$1.raise(key.start, 'Constructor can\'t be a generator');
                                    }
                                    if (isAsync) {
                                        this$1.raise(key.start, 'Constructor can\'t be an async method');
                                    }
                                    method.kind = 'constructor';
                                    hadConstructor = true;
                                }
                            }
                            this$1.parseClassMethod(classBody, method, isGenerator, isAsync);
                            if (isGetSet) {
                                var paramCount = method.kind === 'get' ? 0 : 1;
                                if (method.value.params.length !== paramCount) {
                                    var start = method.value.start;
                                    if (method.kind === 'get') {
                                        this$1.raiseRecoverable(start, 'getter should have no params');
                                    } else {
                                        this$1.raiseRecoverable(start, 'setter should have exactly one param');
                                    }
                                } else {
                                    if (method.kind === 'set' && method.value.params[0].type === 'RestElement') {
                                        this$1.raiseRecoverable(method.value.params[0].start, 'Setter cannot use rest params');
                                    }
                                }
                            }
                        }
                        node.body = this.finishNode(classBody, 'ClassBody');
                        return this.finishNode(node, isStatement ? 'ClassDeclaration' : 'ClassExpression');
                    };
                    pp$1.parseClassMethod = function (classBody, method, isGenerator, isAsync) {
                        method.value = this.parseMethod(isGenerator, isAsync);
                        classBody.body.push(this.finishNode(method, 'MethodDefinition'));
                    };
                    pp$1.parseClassId = function (node, isStatement) {
                        node.id = this.type === types.name ? this.parseIdent() : isStatement === true ? this.unexpected() : null;
                    };
                    pp$1.parseClassSuper = function (node) {
                        node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
                    };
                    pp$1.parseExport = function (node, exports) {
                        var this$1 = this;
                        this.next();
                        if (this.eat(types.star)) {
                            this.expectContextual('from');
                            node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
                            this.semicolon();
                            return this.finishNode(node, 'ExportAllDeclaration');
                        }
                        if (this.eat(types._default)) {
                            this.checkExport(exports, 'default', this.lastTokStart);
                            var isAsync;
                            if (this.type === types._function || (isAsync = this.isAsyncFunction())) {
                                var fNode = this.startNode();
                                this.next();
                                if (isAsync) {
                                    this.next();
                                }
                                node.declaration = this.parseFunction(fNode, 'nullableID', false, isAsync);
                            } else if (this.type === types._class) {
                                var cNode = this.startNode();
                                node.declaration = this.parseClass(cNode, 'nullableID');
                            } else {
                                node.declaration = this.parseMaybeAssign();
                                this.semicolon();
                            }
                            return this.finishNode(node, 'ExportDefaultDeclaration');
                        }
                        if (this.shouldParseExportStatement()) {
                            node.declaration = this.parseStatement(true);
                            if (node.declaration.type === 'VariableDeclaration') {
                                this.checkVariableExport(exports, node.declaration.declarations);
                            } else {
                                this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);
                            }
                            node.specifiers = [];
                            node.source = null;
                        } else {
                            node.declaration = null;
                            node.specifiers = this.parseExportSpecifiers(exports);
                            if (this.eatContextual('from')) {
                                node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
                            } else {
                                for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
                                    var spec = list[i];
                                    this$1.checkUnreserved(spec.local);
                                }
                                node.source = null;
                            }
                            this.semicolon();
                        }
                        return this.finishNode(node, 'ExportNamedDeclaration');
                    };
                    pp$1.checkExport = function (exports, name, pos) {
                        if (!exports) {
                            return;
                        }
                        if (has(exports, name)) {
                            this.raiseRecoverable(pos, 'Duplicate export \'' + name + '\'');
                        }
                        exports[name] = true;
                    };
                    pp$1.checkPatternExport = function (exports, pat) {
                        var this$1 = this;
                        var type = pat.type;
                        if (type == 'Identifier') {
                            this.checkExport(exports, pat.name, pat.start);
                        } else if (type == 'ObjectPattern') {
                            for (var i = 0, list = pat.properties; i < list.length; i += 1) {
                                var prop = list[i];
                                this$1.checkPatternExport(exports, prop.value);
                            }
                        } else if (type == 'ArrayPattern') {
                            for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
                                var elt = list$1[i$1];
                                if (elt) {
                                    this$1.checkPatternExport(exports, elt);
                                }
                            }
                        } else if (type == 'AssignmentPattern') {
                            this.checkPatternExport(exports, pat.left);
                        } else if (type == 'ParenthesizedExpression') {
                            this.checkPatternExport(exports, pat.expression);
                        }
                    };
                    pp$1.checkVariableExport = function (exports, decls) {
                        var this$1 = this;
                        if (!exports) {
                            return;
                        }
                        for (var i = 0, list = decls; i < list.length; i += 1) {
                            var decl = list[i];
                            this$1.checkPatternExport(exports, decl.id);
                        }
                    };
                    pp$1.shouldParseExportStatement = function () {
                        return this.type.keyword === 'var' || this.type.keyword === 'const' || this.type.keyword === 'class' || this.type.keyword === 'function' || this.isLet() || this.isAsyncFunction();
                    };
                    pp$1.parseExportSpecifiers = function (exports) {
                        var this$1 = this;
                        var nodes = [], first = true;
                        this.expect(types.braceL);
                        while (!this.eat(types.braceR)) {
                            if (!first) {
                                this$1.expect(types.comma);
                                if (this$1.afterTrailingComma(types.braceR)) {
                                    break;
                                }
                            } else {
                                first = false;
                            }
                            var node = this$1.startNode();
                            node.local = this$1.parseIdent(true);
                            node.exported = this$1.eatContextual('as') ? this$1.parseIdent(true) : node.local;
                            this$1.checkExport(exports, node.exported.name, node.exported.start);
                            nodes.push(this$1.finishNode(node, 'ExportSpecifier'));
                        }
                        return nodes;
                    };
                    pp$1.parseImport = function (node) {
                        this.next();
                        if (this.type === types.string) {
                            node.specifiers = empty;
                            node.source = this.parseExprAtom();
                        } else {
                            node.specifiers = this.parseImportSpecifiers();
                            this.expectContextual('from');
                            node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
                        }
                        this.semicolon();
                        return this.finishNode(node, 'ImportDeclaration');
                    };
                    pp$1.parseImportSpecifiers = function () {
                        var this$1 = this;
                        var nodes = [], first = true;
                        if (this.type === types.name) {
                            var node = this.startNode();
                            node.local = this.parseIdent();
                            this.checkLVal(node.local, 'let');
                            nodes.push(this.finishNode(node, 'ImportDefaultSpecifier'));
                            if (!this.eat(types.comma)) {
                                return nodes;
                            }
                        }
                        if (this.type === types.star) {
                            var node$1 = this.startNode();
                            this.next();
                            this.expectContextual('as');
                            node$1.local = this.parseIdent();
                            this.checkLVal(node$1.local, 'let');
                            nodes.push(this.finishNode(node$1, 'ImportNamespaceSpecifier'));
                            return nodes;
                        }
                        this.expect(types.braceL);
                        while (!this.eat(types.braceR)) {
                            if (!first) {
                                this$1.expect(types.comma);
                                if (this$1.afterTrailingComma(types.braceR)) {
                                    break;
                                }
                            } else {
                                first = false;
                            }
                            var node$2 = this$1.startNode();
                            node$2.imported = this$1.parseIdent(true);
                            if (this$1.eatContextual('as')) {
                                node$2.local = this$1.parseIdent();
                            } else {
                                this$1.checkUnreserved(node$2.imported);
                                node$2.local = node$2.imported;
                            }
                            this$1.checkLVal(node$2.local, 'let');
                            nodes.push(this$1.finishNode(node$2, 'ImportSpecifier'));
                        }
                        return nodes;
                    };
                    var pp$2 = Parser.prototype;
                    pp$2.toAssignable = function (node, isBinding) {
                        var this$1 = this;
                        if (this.options.ecmaVersion >= 6 && node) {
                            switch (node.type) {
                            case 'Identifier':
                                if (this.inAsync && node.name === 'await') {
                                    this.raise(node.start, 'Can not use \'await\' as identifier inside an async function');
                                }
                                break;
                            case 'ObjectPattern':
                            case 'ArrayPattern':
                                break;
                            case 'ObjectExpression':
                                node.type = 'ObjectPattern';
                                for (var i = 0, list = node.properties; i < list.length; i += 1) {
                                    var prop = list[i];
                                    if (prop.kind !== 'init') {
                                        this$1.raise(prop.key.start, 'Object pattern can\'t contain getter or setter');
                                    }
                                    this$1.toAssignable(prop.value, isBinding);
                                }
                                break;
                            case 'ArrayExpression':
                                node.type = 'ArrayPattern';
                                this.toAssignableList(node.elements, isBinding);
                                break;
                            case 'AssignmentExpression':
                                if (node.operator === '=') {
                                    node.type = 'AssignmentPattern';
                                    delete node.operator;
                                    this.toAssignable(node.left, isBinding);
                                } else {
                                    this.raise(node.left.end, 'Only \'=\' operator can be used for specifying default value.');
                                    break;
                                }
                            case 'AssignmentPattern':
                                break;
                            case 'ParenthesizedExpression':
                                this.toAssignable(node.expression, isBinding);
                                break;
                            case 'MemberExpression':
                                if (!isBinding) {
                                    break;
                                }
                            default:
                                this.raise(node.start, 'Assigning to rvalue');
                            }
                        }
                        return node;
                    };
                    pp$2.toAssignableList = function (exprList, isBinding) {
                        var this$1 = this;
                        var end = exprList.length;
                        if (end) {
                            var last = exprList[end - 1];
                            if (last && last.type == 'RestElement') {
                                --end;
                            } else if (last && last.type == 'SpreadElement') {
                                last.type = 'RestElement';
                                var arg = last.argument;
                                this.toAssignable(arg, isBinding);
                                --end;
                            }
                            if (this.options.ecmaVersion === 6 && isBinding && last && last.type === 'RestElement' && last.argument.type !== 'Identifier') {
                                this.unexpected(last.argument.start);
                            }
                        }
                        for (var i = 0; i < end; i++) {
                            var elt = exprList[i];
                            if (elt) {
                                this$1.toAssignable(elt, isBinding);
                            }
                        }
                        return exprList;
                    };
                    pp$2.parseSpread = function (refDestructuringErrors) {
                        var node = this.startNode();
                        this.next();
                        node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
                        return this.finishNode(node, 'SpreadElement');
                    };
                    pp$2.parseRestBinding = function () {
                        var node = this.startNode();
                        this.next();
                        if (this.options.ecmaVersion === 6 && this.type !== types.name) {
                            this.unexpected();
                        }
                        node.argument = this.parseBindingAtom();
                        return this.finishNode(node, 'RestElement');
                    };
                    pp$2.parseBindingAtom = function () {
                        if (this.options.ecmaVersion < 6) {
                            return this.parseIdent();
                        }
                        switch (this.type) {
                        case types.name:
                            return this.parseIdent();
                        case types.bracketL:
                            var node = this.startNode();
                            this.next();
                            node.elements = this.parseBindingList(types.bracketR, true, true);
                            return this.finishNode(node, 'ArrayPattern');
                        case types.braceL:
                            return this.parseObj(true);
                        default:
                            this.unexpected();
                        }
                    };
                    pp$2.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
                        var this$1 = this;
                        var elts = [], first = true;
                        while (!this.eat(close)) {
                            if (first) {
                                first = false;
                            } else {
                                this$1.expect(types.comma);
                            }
                            if (allowEmpty && this$1.type === types.comma) {
                                elts.push(null);
                            } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {
                                break;
                            } else if (this$1.type === types.ellipsis) {
                                var rest = this$1.parseRestBinding();
                                this$1.parseBindingListItem(rest);
                                elts.push(rest);
                                if (this$1.type === types.comma) {
                                    this$1.raise(this$1.start, 'Comma is not permitted after the rest element');
                                }
                                this$1.expect(close);
                                break;
                            } else {
                                var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc);
                                this$1.parseBindingListItem(elem);
                                elts.push(elem);
                            }
                        }
                        return elts;
                    };
                    pp$2.parseBindingListItem = function (param) {
                        return param;
                    };
                    pp$2.parseMaybeDefault = function (startPos, startLoc, left) {
                        left = left || this.parseBindingAtom();
                        if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) {
                            return left;
                        }
                        var node = this.startNodeAt(startPos, startLoc);
                        node.left = left;
                        node.right = this.parseMaybeAssign();
                        return this.finishNode(node, 'AssignmentPattern');
                    };
                    pp$2.checkLVal = function (expr, bindingType, checkClashes) {
                        var this$1 = this;
                        switch (expr.type) {
                        case 'Identifier':
                            if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
                                this.raiseRecoverable(expr.start, (bindingType ? 'Binding ' : 'Assigning to ') + expr.name + ' in strict mode');
                            }
                            if (checkClashes) {
                                if (has(checkClashes, expr.name)) {
                                    this.raiseRecoverable(expr.start, 'Argument name clash');
                                }
                                checkClashes[expr.name] = true;
                            }
                            if (bindingType && bindingType !== 'none') {
                                if (bindingType === 'var' && !this.canDeclareVarName(expr.name) || bindingType !== 'var' && !this.canDeclareLexicalName(expr.name)) {
                                    this.raiseRecoverable(expr.start, 'Identifier \'' + expr.name + '\' has already been declared');
                                }
                                if (bindingType === 'var') {
                                    this.declareVarName(expr.name);
                                } else {
                                    this.declareLexicalName(expr.name);
                                }
                            }
                            break;
                        case 'MemberExpression':
                            if (bindingType) {
                                this.raiseRecoverable(expr.start, (bindingType ? 'Binding' : 'Assigning to') + ' member expression');
                            }
                            break;
                        case 'ObjectPattern':
                            for (var i = 0, list = expr.properties; i < list.length; i += 1) {
                                var prop = list[i];
                                this$1.checkLVal(prop.value, bindingType, checkClashes);
                            }
                            break;
                        case 'ArrayPattern':
                            for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
                                var elem = list$1[i$1];
                                if (elem) {
                                    this$1.checkLVal(elem, bindingType, checkClashes);
                                }
                            }
                            break;
                        case 'AssignmentPattern':
                            this.checkLVal(expr.left, bindingType, checkClashes);
                            break;
                        case 'RestElement':
                            this.checkLVal(expr.argument, bindingType, checkClashes);
                            break;
                        case 'ParenthesizedExpression':
                            this.checkLVal(expr.expression, bindingType, checkClashes);
                            break;
                        default:
                            this.raise(expr.start, (bindingType ? 'Binding' : 'Assigning to') + ' rvalue');
                        }
                    };
                    var pp$3 = Parser.prototype;
                    pp$3.checkPropClash = function (prop, propHash) {
                        if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
                            return;
                        }
                        var key = prop.key;
                        var name;
                        switch (key.type) {
                        case 'Identifier':
                            name = key.name;
                            break;
                        case 'Literal':
                            name = String(key.value);
                            break;
                        default:
                            return;
                        }
                        var kind = prop.kind;
                        if (this.options.ecmaVersion >= 6) {
                            if (name === '__proto__' && kind === 'init') {
                                if (propHash.proto) {
                                    this.raiseRecoverable(key.start, 'Redefinition of __proto__ property');
                                }
                                propHash.proto = true;
                            }
                            return;
                        }
                        name = '$' + name;
                        var other = propHash[name];
                        if (other) {
                            var redefinition;
                            if (kind === 'init') {
                                redefinition = this.strict && other.init || other.get || other.set;
                            } else {
                                redefinition = other.init || other[kind];
                            }
                            if (redefinition) {
                                this.raiseRecoverable(key.start, 'Redefinition of property');
                            }
                        } else {
                            other = propHash[name] = {
                                init: false,
                                get: false,
                                set: false
                            };
                        }
                        other[kind] = true;
                    };
                    pp$3.parseExpression = function (noIn, refDestructuringErrors) {
                        var this$1 = this;
                        var startPos = this.start, startLoc = this.startLoc;
                        var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);
                        if (this.type === types.comma) {
                            var node = this.startNodeAt(startPos, startLoc);
                            node.expressions = [expr];
                            while (this.eat(types.comma)) {
                                node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors));
                            }
                            return this.finishNode(node, 'SequenceExpression');
                        }
                        return expr;
                    };
                    pp$3.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {
                        if (this.inGenerator && this.isContextual('yield')) {
                            return this.parseYield();
                        }
                        var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;
                        if (refDestructuringErrors) {
                            oldParenAssign = refDestructuringErrors.parenthesizedAssign;
                            oldTrailingComma = refDestructuringErrors.trailingComma;
                            refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
                        } else {
                            refDestructuringErrors = new DestructuringErrors();
                            ownDestructuringErrors = true;
                        }
                        var startPos = this.start, startLoc = this.startLoc;
                        if (this.type == types.parenL || this.type == types.name) {
                            this.potentialArrowAt = this.start;
                        }
                        var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
                        if (afterLeftParse) {
                            left = afterLeftParse.call(this, left, startPos, startLoc);
                        }
                        if (this.type.isAssign) {
                            this.checkPatternErrors(refDestructuringErrors, true);
                            if (!ownDestructuringErrors) {
                                DestructuringErrors.call(refDestructuringErrors);
                            }
                            var node = this.startNodeAt(startPos, startLoc);
                            node.operator = this.value;
                            node.left = this.type === types.eq ? this.toAssignable(left) : left;
                            refDestructuringErrors.shorthandAssign = -1;
                            this.checkLVal(left);
                            this.next();
                            node.right = this.parseMaybeAssign(noIn);
                            return this.finishNode(node, 'AssignmentExpression');
                        } else {
                            if (ownDestructuringErrors) {
                                this.checkExpressionErrors(refDestructuringErrors, true);
                            }
                        }
                        if (oldParenAssign > -1) {
                            refDestructuringErrors.parenthesizedAssign = oldParenAssign;
                        }
                        if (oldTrailingComma > -1) {
                            refDestructuringErrors.trailingComma = oldTrailingComma;
                        }
                        return left;
                    };
                    pp$3.parseMaybeConditional = function (noIn, refDestructuringErrors) {
                        var startPos = this.start, startLoc = this.startLoc;
                        var expr = this.parseExprOps(noIn, refDestructuringErrors);
                        if (this.checkExpressionErrors(refDestructuringErrors)) {
                            return expr;
                        }
                        if (this.eat(types.question)) {
                            var node = this.startNodeAt(startPos, startLoc);
                            node.test = expr;
                            node.consequent = this.parseMaybeAssign();
                            this.expect(types.colon);
                            node.alternate = this.parseMaybeAssign(noIn);
                            return this.finishNode(node, 'ConditionalExpression');
                        }
                        return expr;
                    };
                    pp$3.parseExprOps = function (noIn, refDestructuringErrors) {
                        var startPos = this.start, startLoc = this.startLoc;
                        var expr = this.parseMaybeUnary(refDestructuringErrors, false);
                        if (this.checkExpressionErrors(refDestructuringErrors)) {
                            return expr;
                        }
                        return expr.start == startPos && expr.type === 'ArrowFunctionExpression' ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);
                    };
                    pp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
                        var prec = this.type.binop;
                        if (prec != null && (!noIn || this.type !== types._in)) {
                            if (prec > minPrec) {
                                var logical = this.type === types.logicalOR || this.type === types.logicalAND;
                                var op = this.value;
                                this.next();
                                var startPos = this.start, startLoc = this.startLoc;
                                var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
                                var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);
                                return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
                            }
                        }
                        return left;
                    };
                    pp$3.buildBinary = function (startPos, startLoc, left, right, op, logical) {
                        var node = this.startNodeAt(startPos, startLoc);
                        node.left = left;
                        node.operator = op;
                        node.right = right;
                        return this.finishNode(node, logical ? 'LogicalExpression' : 'BinaryExpression');
                    };
                    pp$3.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {
                        var this$1 = this;
                        var startPos = this.start, startLoc = this.startLoc, expr;
                        if (this.inAsync && this.isContextual('await')) {
                            expr = this.parseAwait(refDestructuringErrors);
                            sawUnary = true;
                        } else if (this.type.prefix) {
                            var node = this.startNode(), update = this.type === types.incDec;
                            node.operator = this.value;
                            node.prefix = true;
                            this.next();
                            node.argument = this.parseMaybeUnary(null, true);
                            this.checkExpressionErrors(refDestructuringErrors, true);
                            if (update) {
                                this.checkLVal(node.argument);
                            } else if (this.strict && node.operator === 'delete' && node.argument.type === 'Identifier') {
                                this.raiseRecoverable(node.start, 'Deleting local variable in strict mode');
                            } else {
                                sawUnary = true;
                            }
                            expr = this.finishNode(node, update ? 'UpdateExpression' : 'UnaryExpression');
                        } else {
                            expr = this.parseExprSubscripts(refDestructuringErrors);
                            if (this.checkExpressionErrors(refDestructuringErrors)) {
                                return expr;
                            }
                            while (this.type.postfix && !this.canInsertSemicolon()) {
                                var node$1 = this$1.startNodeAt(startPos, startLoc);
                                node$1.operator = this$1.value;
                                node$1.prefix = false;
                                node$1.argument = expr;
                                this$1.checkLVal(expr);
                                this$1.next();
                                expr = this$1.finishNode(node$1, 'UpdateExpression');
                            }
                        }
                        if (!sawUnary && this.eat(types.starstar)) {
                            return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), '**', false);
                        } else {
                            return expr;
                        }
                    };
                    pp$3.parseExprSubscripts = function (refDestructuringErrors) {
                        var startPos = this.start, startLoc = this.startLoc;
                        var expr = this.parseExprAtom(refDestructuringErrors);
                        var skipArrowSubscripts = expr.type === 'ArrowFunctionExpression' && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ')';
                        if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) {
                            return expr;
                        }
                        var result = this.parseSubscripts(expr, startPos, startLoc);
                        if (refDestructuringErrors && result.type === 'MemberExpression') {
                            if (refDestructuringErrors.parenthesizedAssign >= result.start) {
                                refDestructuringErrors.parenthesizedAssign = -1;
                            }
                            if (refDestructuringErrors.parenthesizedBind >= result.start) {
                                refDestructuringErrors.parenthesizedBind = -1;
                            }
                        }
                        return result;
                    };
                    pp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {
                        var this$1 = this;
                        var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === 'Identifier' && base.name === 'async' && this.lastTokEnd == base.end && !this.canInsertSemicolon();
                        for (var computed = void 0;;) {
                            if ((computed = this$1.eat(types.bracketL)) || this$1.eat(types.dot)) {
                                var node = this$1.startNodeAt(startPos, startLoc);
                                node.object = base;
                                node.property = computed ? this$1.parseExpression() : this$1.parseIdent(true);
                                node.computed = !!computed;
                                if (computed) {
                                    this$1.expect(types.bracketR);
                                }
                                base = this$1.finishNode(node, 'MemberExpression');
                            } else if (!noCalls && this$1.eat(types.parenL)) {
                                var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this$1.yieldPos, oldAwaitPos = this$1.awaitPos;
                                this$1.yieldPos = 0;
                                this$1.awaitPos = 0;
                                var exprList = this$1.parseExprList(types.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors);
                                if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(types.arrow)) {
                                    this$1.checkPatternErrors(refDestructuringErrors, false);
                                    this$1.checkYieldAwaitInDefaultParams();
                                    this$1.yieldPos = oldYieldPos;
                                    this$1.awaitPos = oldAwaitPos;
                                    return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true);
                                }
                                this$1.checkExpressionErrors(refDestructuringErrors, true);
                                this$1.yieldPos = oldYieldPos || this$1.yieldPos;
                                this$1.awaitPos = oldAwaitPos || this$1.awaitPos;
                                var node$1 = this$1.startNodeAt(startPos, startLoc);
                                node$1.callee = base;
                                node$1.arguments = exprList;
                                base = this$1.finishNode(node$1, 'CallExpression');
                            } else if (this$1.type === types.backQuote) {
                                var node$2 = this$1.startNodeAt(startPos, startLoc);
                                node$2.tag = base;
                                node$2.quasi = this$1.parseTemplate({ isTagged: true });
                                base = this$1.finishNode(node$2, 'TaggedTemplateExpression');
                            } else {
                                return base;
                            }
                        }
                    };
                    pp$3.parseExprAtom = function (refDestructuringErrors) {
                        var node, canBeArrow = this.potentialArrowAt == this.start;
                        switch (this.type) {
                        case types._super:
                            if (!this.inFunction) {
                                this.raise(this.start, '\'super\' outside of function or class');
                            }
                        case types._this:
                            var type = this.type === types._this ? 'ThisExpression' : 'Super';
                            node = this.startNode();
                            this.next();
                            return this.finishNode(node, type);
                        case types.name:
                            var startPos = this.start, startLoc = this.startLoc;
                            var id = this.parseIdent(this.type !== types.name);
                            if (this.options.ecmaVersion >= 8 && id.name === 'async' && !this.canInsertSemicolon() && this.eat(types._function)) {
                                return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true);
                            }
                            if (canBeArrow && !this.canInsertSemicolon()) {
                                if (this.eat(types.arrow)) {
                                    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);
                                }
                                if (this.options.ecmaVersion >= 8 && id.name === 'async' && this.type === types.name) {
                                    id = this.parseIdent();
                                    if (this.canInsertSemicolon() || !this.eat(types.arrow)) {
                                        this.unexpected();
                                    }
                                    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);
                                }
                            }
                            return id;
                        case types.regexp:
                            var value = this.value;
                            node = this.parseLiteral(value.value);
                            node.regex = {
                                pattern: value.pattern,
                                flags: value.flags
                            };
                            return node;
                        case types.num:
                        case types.string:
                            return this.parseLiteral(this.value);
                        case types._null:
                        case types._true:
                        case types._false:
                            node = this.startNode();
                            node.value = this.type === types._null ? null : this.type === types._true;
                            node.raw = this.type.keyword;
                            this.next();
                            return this.finishNode(node, 'Literal');
                        case types.parenL:
                            var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);
                            if (refDestructuringErrors) {
                                if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
                                    refDestructuringErrors.parenthesizedAssign = start;
                                }
                                if (refDestructuringErrors.parenthesizedBind < 0) {
                                    refDestructuringErrors.parenthesizedBind = start;
                                }
                            }
                            return expr;
                        case types.bracketL:
                            node = this.startNode();
                            this.next();
                            node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
                            return this.finishNode(node, 'ArrayExpression');
                        case types.braceL:
                            return this.parseObj(false, refDestructuringErrors);
                        case types._function:
                            node = this.startNode();
                            this.next();
                            return this.parseFunction(node, false);
                        case types._class:
                            return this.parseClass(this.startNode(), false);
                        case types._new:
                            return this.parseNew();
                        case types.backQuote:
                            return this.parseTemplate();
                        default:
                            this.unexpected();
                        }
                    };
                    pp$3.parseLiteral = function (value) {
                        var node = this.startNode();
                        node.value = value;
                        node.raw = this.input.slice(this.start, this.end);
                        this.next();
                        return this.finishNode(node, 'Literal');
                    };
                    pp$3.parseParenExpression = function () {
                        this.expect(types.parenL);
                        var val = this.parseExpression();
                        this.expect(types.parenR);
                        return val;
                    };
                    pp$3.parseParenAndDistinguishExpression = function (canBeArrow) {
                        var this$1 = this;
                        var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
                        if (this.options.ecmaVersion >= 6) {
                            this.next();
                            var innerStartPos = this.start, innerStartLoc = this.startLoc;
                            var exprList = [], first = true, lastIsComma = false;
                            var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart, innerParenStart;
                            this.yieldPos = 0;
                            this.awaitPos = 0;
                            while (this.type !== types.parenR) {
                                first ? first = false : this$1.expect(types.comma);
                                if (allowTrailingComma && this$1.afterTrailingComma(types.parenR, true)) {
                                    lastIsComma = true;
                                    break;
                                } else if (this$1.type === types.ellipsis) {
                                    spreadStart = this$1.start;
                                    exprList.push(this$1.parseParenItem(this$1.parseRestBinding()));
                                    if (this$1.type === types.comma) {
                                        this$1.raise(this$1.start, 'Comma is not permitted after the rest element');
                                    }
                                    break;
                                } else {
                                    if (this$1.type === types.parenL && !innerParenStart) {
                                        innerParenStart = this$1.start;
                                    }
                                    exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem));
                                }
                            }
                            var innerEndPos = this.start, innerEndLoc = this.startLoc;
                            this.expect(types.parenR);
                            if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
                                this.checkPatternErrors(refDestructuringErrors, false);
                                this.checkYieldAwaitInDefaultParams();
                                if (innerParenStart) {
                                    this.unexpected(innerParenStart);
                                }
                                this.yieldPos = oldYieldPos;
                                this.awaitPos = oldAwaitPos;
                                return this.parseParenArrowList(startPos, startLoc, exprList);
                            }
                            if (!exprList.length || lastIsComma) {
                                this.unexpected(this.lastTokStart);
                            }
                            if (spreadStart) {
                                this.unexpected(spreadStart);
                            }
                            this.checkExpressionErrors(refDestructuringErrors, true);
                            this.yieldPos = oldYieldPos || this.yieldPos;
                            this.awaitPos = oldAwaitPos || this.awaitPos;
                            if (exprList.length > 1) {
                                val = this.startNodeAt(innerStartPos, innerStartLoc);
                                val.expressions = exprList;
                                this.finishNodeAt(val, 'SequenceExpression', innerEndPos, innerEndLoc);
                            } else {
                                val = exprList[0];
                            }
                        } else {
                            val = this.parseParenExpression();
                        }
                        if (this.options.preserveParens) {
                            var par = this.startNodeAt(startPos, startLoc);
                            par.expression = val;
                            return this.finishNode(par, 'ParenthesizedExpression');
                        } else {
                            return val;
                        }
                    };
                    pp$3.parseParenItem = function (item) {
                        return item;
                    };
                    pp$3.parseParenArrowList = function (startPos, startLoc, exprList) {
                        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
                    };
                    var empty$1 = [];
                    pp$3.parseNew = function () {
                        var node = this.startNode();
                        var meta = this.parseIdent(true);
                        if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {
                            node.meta = meta;
                            node.property = this.parseIdent(true);
                            if (node.property.name !== 'target') {
                                this.raiseRecoverable(node.property.start, 'The only valid meta property for new is new.target');
                            }
                            if (!this.inFunction) {
                                this.raiseRecoverable(node.start, 'new.target can only be used in functions');
                            }
                            return this.finishNode(node, 'MetaProperty');
                        }
                        var startPos = this.start, startLoc = this.startLoc;
                        node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
                        if (this.eat(types.parenL)) {
                            node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false);
                        } else {
                            node.arguments = empty$1;
                        }
                        return this.finishNode(node, 'NewExpression');
                    };
                    pp$3.parseTemplateElement = function (ref) {
                        var isTagged = ref.isTagged;
                        var elem = this.startNode();
                        if (this.type === types.invalidTemplate) {
                            if (!isTagged) {
                                this.raiseRecoverable(this.start, 'Bad escape sequence in untagged template literal');
                            }
                            elem.value = {
                                raw: this.value,
                                cooked: null
                            };
                        } else {
                            elem.value = {
                                raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, '\n'),
                                cooked: this.value
                            };
                        }
                        this.next();
                        elem.tail = this.type === types.backQuote;
                        return this.finishNode(elem, 'TemplateElement');
                    };
                    pp$3.parseTemplate = function (ref) {
                        var this$1 = this;
                        if (ref === void 0)
                            ref = {};
                        var isTagged = ref.isTagged;
                        if (isTagged === void 0)
                            isTagged = false;
                        var node = this.startNode();
                        this.next();
                        node.expressions = [];
                        var curElt = this.parseTemplateElement({ isTagged: isTagged });
                        node.quasis = [curElt];
                        while (!curElt.tail) {
                            this$1.expect(types.dollarBraceL);
                            node.expressions.push(this$1.parseExpression());
                            this$1.expect(types.braceR);
                            node.quasis.push(curElt = this$1.parseTemplateElement({ isTagged: isTagged }));
                        }
                        this.next();
                        return this.finishNode(node, 'TemplateLiteral');
                    };
                    pp$3.isAsyncProp = function (prop) {
                        return !prop.computed && prop.key.type === 'Identifier' && prop.key.name === 'async' && (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
                    };
                    pp$3.parseObj = function (isPattern, refDestructuringErrors) {
                        var this$1 = this;
                        var node = this.startNode(), first = true, propHash = {};
                        node.properties = [];
                        this.next();
                        while (!this.eat(types.braceR)) {
                            if (!first) {
                                this$1.expect(types.comma);
                                if (this$1.afterTrailingComma(types.braceR)) {
                                    break;
                                }
                            } else {
                                first = false;
                            }
                            var prop = this$1.startNode(), isGenerator = void 0, isAsync = void 0, startPos = void 0, startLoc = void 0;
                            if (this$1.options.ecmaVersion >= 6) {
                                prop.method = false;
                                prop.shorthand = false;
                                if (isPattern || refDestructuringErrors) {
                                    startPos = this$1.start;
                                    startLoc = this$1.startLoc;
                                }
                                if (!isPattern) {
                                    isGenerator = this$1.eat(types.star);
                                }
                            }
                            this$1.parsePropertyName(prop);
                            if (!isPattern && this$1.options.ecmaVersion >= 8 && !isGenerator && this$1.isAsyncProp(prop)) {
                                isAsync = true;
                                this$1.parsePropertyName(prop, refDestructuringErrors);
                            } else {
                                isAsync = false;
                            }
                            this$1.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors);
                            this$1.checkPropClash(prop, propHash);
                            node.properties.push(this$1.finishNode(prop, 'Property'));
                        }
                        return this.finishNode(node, isPattern ? 'ObjectPattern' : 'ObjectExpression');
                    };
                    pp$3.parsePropertyValue = function (prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors) {
                        if ((isGenerator || isAsync) && this.type === types.colon) {
                            this.unexpected();
                        }
                        if (this.eat(types.colon)) {
                            prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
                            prop.kind = 'init';
                        } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {
                            if (isPattern) {
                                this.unexpected();
                            }
                            prop.kind = 'init';
                            prop.method = true;
                            prop.value = this.parseMethod(isGenerator, isAsync);
                        } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === 'Identifier' && (prop.key.name === 'get' || prop.key.name === 'set') && (this.type != types.comma && this.type != types.braceR)) {
                            if (isGenerator || isAsync || isPattern) {
                                this.unexpected();
                            }
                            prop.kind = prop.key.name;
                            this.parsePropertyName(prop);
                            prop.value = this.parseMethod(false);
                            var paramCount = prop.kind === 'get' ? 0 : 1;
                            if (prop.value.params.length !== paramCount) {
                                var start = prop.value.start;
                                if (prop.kind === 'get') {
                                    this.raiseRecoverable(start, 'getter should have no params');
                                } else {
                                    this.raiseRecoverable(start, 'setter should have exactly one param');
                                }
                            } else {
                                if (prop.kind === 'set' && prop.value.params[0].type === 'RestElement') {
                                    this.raiseRecoverable(prop.value.params[0].start, 'Setter cannot use rest params');
                                }
                            }
                        } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === 'Identifier') {
                            this.checkUnreserved(prop.key);
                            prop.kind = 'init';
                            if (isPattern) {
                                prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
                            } else if (this.type === types.eq && refDestructuringErrors) {
                                if (refDestructuringErrors.shorthandAssign < 0) {
                                    refDestructuringErrors.shorthandAssign = this.start;
                                }
                                prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
                            } else {
                                prop.value = prop.key;
                            }
                            prop.shorthand = true;
                        } else {
                            this.unexpected();
                        }
                    };
                    pp$3.parsePropertyName = function (prop) {
                        if (this.options.ecmaVersion >= 6) {
                            if (this.eat(types.bracketL)) {
                                prop.computed = true;
                                prop.key = this.parseMaybeAssign();
                                this.expect(types.bracketR);
                                return prop.key;
                            } else {
                                prop.computed = false;
                            }
                        }
                        return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(true);
                    };
                    pp$3.initFunction = function (node) {
                        node.id = null;
                        if (this.options.ecmaVersion >= 6) {
                            node.generator = false;
                            node.expression = false;
                        }
                        if (this.options.ecmaVersion >= 8) {
                            node.async = false;
                        }
                    };
                    pp$3.parseMethod = function (isGenerator, isAsync) {
                        var node = this.startNode(), oldInGen = this.inGenerator, oldInAsync = this.inAsync, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;
                        this.initFunction(node);
                        if (this.options.ecmaVersion >= 6) {
                            node.generator = isGenerator;
                        }
                        if (this.options.ecmaVersion >= 8) {
                            node.async = !!isAsync;
                        }
                        this.inGenerator = node.generator;
                        this.inAsync = node.async;
                        this.yieldPos = 0;
                        this.awaitPos = 0;
                        this.inFunction = true;
                        this.enterFunctionScope();
                        this.expect(types.parenL);
                        node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
                        this.checkYieldAwaitInDefaultParams();
                        this.parseFunctionBody(node, false);
                        this.inGenerator = oldInGen;
                        this.inAsync = oldInAsync;
                        this.yieldPos = oldYieldPos;
                        this.awaitPos = oldAwaitPos;
                        this.inFunction = oldInFunc;
                        return this.finishNode(node, 'FunctionExpression');
                    };
                    pp$3.parseArrowExpression = function (node, params, isAsync) {
                        var oldInGen = this.inGenerator, oldInAsync = this.inAsync, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;
                        this.enterFunctionScope();
                        this.initFunction(node);
                        if (this.options.ecmaVersion >= 8) {
                            node.async = !!isAsync;
                        }
                        this.inGenerator = false;
                        this.inAsync = node.async;
                        this.yieldPos = 0;
                        this.awaitPos = 0;
                        this.inFunction = true;
                        node.params = this.toAssignableList(params, true);
                        this.parseFunctionBody(node, true);
                        this.inGenerator = oldInGen;
                        this.inAsync = oldInAsync;
                        this.yieldPos = oldYieldPos;
                        this.awaitPos = oldAwaitPos;
                        this.inFunction = oldInFunc;
                        return this.finishNode(node, 'ArrowFunctionExpression');
                    };
                    pp$3.parseFunctionBody = function (node, isArrowFunction) {
                        var isExpression = isArrowFunction && this.type !== types.braceL;
                        var oldStrict = this.strict, useStrict = false;
                        if (isExpression) {
                            node.body = this.parseMaybeAssign();
                            node.expression = true;
                            this.checkParams(node, false);
                        } else {
                            var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
                            if (!oldStrict || nonSimple) {
                                useStrict = this.strictDirective(this.end);
                                if (useStrict && nonSimple) {
                                    this.raiseRecoverable(node.start, 'Illegal \'use strict\' directive in function with non-simple parameter list');
                                }
                            }
                            var oldLabels = this.labels;
                            this.labels = [];
                            if (useStrict) {
                                this.strict = true;
                            }
                            this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && this.isSimpleParamList(node.params));
                            node.body = this.parseBlock(false);
                            node.expression = false;
                            this.labels = oldLabels;
                        }
                        this.exitFunctionScope();
                        if (this.strict && node.id) {
                            this.checkLVal(node.id, 'none');
                        }
                        this.strict = oldStrict;
                    };
                    pp$3.isSimpleParamList = function (params) {
                        for (var i = 0, list = params; i < list.length; i += 1) {
                            var param = list[i];
                            if (param.type !== 'Identifier') {
                                return false;
                            }
                        }
                        return true;
                    };
                    pp$3.checkParams = function (node, allowDuplicates) {
                        var this$1 = this;
                        var nameHash = {};
                        for (var i = 0, list = node.params; i < list.length; i += 1) {
                            var param = list[i];
                            this$1.checkLVal(param, 'var', allowDuplicates ? null : nameHash);
                        }
                    };
                    pp$3.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
                        var this$1 = this;
                        var elts = [], first = true;
                        while (!this.eat(close)) {
                            if (!first) {
                                this$1.expect(types.comma);
                                if (allowTrailingComma && this$1.afterTrailingComma(close)) {
                                    break;
                                }
                            } else {
                                first = false;
                            }
                            var elt = void 0;
                            if (allowEmpty && this$1.type === types.comma) {
                                elt = null;
                            } else if (this$1.type === types.ellipsis) {
                                elt = this$1.parseSpread(refDestructuringErrors);
                                if (refDestructuringErrors && this$1.type === types.comma && refDestructuringErrors.trailingComma < 0) {
                                    refDestructuringErrors.trailingComma = this$1.start;
                                }
                            } else {
                                elt = this$1.parseMaybeAssign(false, refDestructuringErrors);
                            }
                            elts.push(elt);
                        }
                        return elts;
                    };
                    pp$3.checkUnreserved = function (ref) {
                        var start = ref.start;
                        var end = ref.end;
                        var name = ref.name;
                        if (this.inGenerator && name === 'yield') {
                            this.raiseRecoverable(start, 'Can not use \'yield\' as identifier inside a generator');
                        }
                        if (this.inAsync && name === 'await') {
                            this.raiseRecoverable(start, 'Can not use \'await\' as identifier inside an async function');
                        }
                        if (this.isKeyword(name)) {
                            this.raise(start, 'Unexpected keyword \'' + name + '\'');
                        }
                        if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf('\\') != -1) {
                            return;
                        }
                        var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
                        if (re.test(name)) {
                            this.raiseRecoverable(start, 'The keyword \'' + name + '\' is reserved');
                        }
                    };
                    pp$3.parseIdent = function (liberal, isBinding) {
                        var node = this.startNode();
                        if (liberal && this.options.allowReserved == 'never') {
                            liberal = false;
                        }
                        if (this.type === types.name) {
                            node.name = this.value;
                        } else if (this.type.keyword) {
                            node.name = this.type.keyword;
                        } else {
                            this.unexpected();
                        }
                        this.next();
                        this.finishNode(node, 'Identifier');
                        if (!liberal) {
                            this.checkUnreserved(node);
                        }
                        return node;
                    };
                    pp$3.parseYield = function () {
                        if (!this.yieldPos) {
                            this.yieldPos = this.start;
                        }
                        var node = this.startNode();
                        this.next();
                        if (this.type == types.semi || this.canInsertSemicolon() || this.type != types.star && !this.type.startsExpr) {
                            node.delegate = false;
                            node.argument = null;
                        } else {
                            node.delegate = this.eat(types.star);
                            node.argument = this.parseMaybeAssign();
                        }
                        return this.finishNode(node, 'YieldExpression');
                    };
                    pp$3.parseAwait = function () {
                        if (!this.awaitPos) {
                            this.awaitPos = this.start;
                        }
                        var node = this.startNode();
                        this.next();
                        node.argument = this.parseMaybeUnary(null, true);
                        return this.finishNode(node, 'AwaitExpression');
                    };
                    var pp$4 = Parser.prototype;
                    pp$4.raise = function (pos, message) {
                        var loc = getLineInfo(this.input, pos);
                        message += ' (' + loc.line + ':' + loc.column + ')';
                        var err = new SyntaxError(message);
                        err.pos = pos;
                        err.loc = loc;
                        err.raisedAt = this.pos;
                        throw err;
                    };
                    pp$4.raiseRecoverable = pp$4.raise;
                    pp$4.curPosition = function () {
                        if (this.options.locations) {
                            return new Position(this.curLine, this.pos - this.lineStart);
                        }
                    };
                    var pp$5 = Parser.prototype;
                    var assign = Object.assign || function (target) {
                        var sources = [], len = arguments.length - 1;
                        while (len-- > 0)
                            sources[len] = arguments[len + 1];
                        for (var i = 0, list = sources; i < list.length; i += 1) {
                            var source = list[i];
                            for (var key in source) {
                                if (has(source, key)) {
                                    target[key] = source[key];
                                }
                            }
                        }
                        return target;
                    };
                    pp$5.enterFunctionScope = function () {
                        this.scopeStack.push({
                            var: {},
                            lexical: {},
                            childVar: {},
                            parentLexical: {}
                        });
                    };
                    pp$5.exitFunctionScope = function () {
                        this.scopeStack.pop();
                    };
                    pp$5.enterLexicalScope = function () {
                        var parentScope = this.scopeStack[this.scopeStack.length - 1];
                        var childScope = {
                            var: {},
                            lexical: {},
                            childVar: {},
                            parentLexical: {}
                        };
                        this.scopeStack.push(childScope);
                        assign(childScope.parentLexical, parentScope.lexical, parentScope.parentLexical);
                    };
                    pp$5.exitLexicalScope = function () {
                        var childScope = this.scopeStack.pop();
                        var parentScope = this.scopeStack[this.scopeStack.length - 1];
                        assign(parentScope.childVar, childScope.var, childScope.childVar);
                    };
                    pp$5.canDeclareVarName = function (name) {
                        var currentScope = this.scopeStack[this.scopeStack.length - 1];
                        return !has(currentScope.lexical, name) && !has(currentScope.parentLexical, name);
                    };
                    pp$5.canDeclareLexicalName = function (name) {
                        var currentScope = this.scopeStack[this.scopeStack.length - 1];
                        return !has(currentScope.lexical, name) && !has(currentScope.var, name) && !has(currentScope.childVar, name);
                    };
                    pp$5.declareVarName = function (name) {
                        this.scopeStack[this.scopeStack.length - 1].var[name] = true;
                    };
                    pp$5.declareLexicalName = function (name) {
                        this.scopeStack[this.scopeStack.length - 1].lexical[name] = true;
                    };
                    var Node = function Node(parser, pos, loc) {
                        this.type = '';
                        this.start = pos;
                        this.end = 0;
                        if (parser.options.locations) {
                            this.loc = new SourceLocation(parser, loc);
                        }
                        if (parser.options.directSourceFile) {
                            this.sourceFile = parser.options.directSourceFile;
                        }
                        if (parser.options.ranges) {
                            this.range = [
                                pos,
                                0
                            ];
                        }
                    };
                    var pp$6 = Parser.prototype;
                    pp$6.startNode = function () {
                        return new Node(this, this.start, this.startLoc);
                    };
                    pp$6.startNodeAt = function (pos, loc) {
                        return new Node(this, pos, loc);
                    };
                    function finishNodeAt(node, type, pos, loc) {
                        node.type = type;
                        node.end = pos;
                        if (this.options.locations) {
                            node.loc.end = loc;
                        }
                        if (this.options.ranges) {
                            node.range[1] = pos;
                        }
                        return node;
                    }
                    pp$6.finishNode = function (node, type) {
                        return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
                    };
                    pp$6.finishNodeAt = function (node, type, pos, loc) {
                        return finishNodeAt.call(this, node, type, pos, loc);
                    };
                    var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
                        this.token = token;
                        this.isExpr = !!isExpr;
                        this.preserveSpace = !!preserveSpace;
                        this.override = override;
                        this.generator = !!generator;
                    };
                    var types$1 = {
                        b_stat: new TokContext('{', false),
                        b_expr: new TokContext('{', true),
                        b_tmpl: new TokContext('${', false),
                        p_stat: new TokContext('(', false),
                        p_expr: new TokContext('(', true),
                        q_tmpl: new TokContext('`', true, true, function (p) {
                            return p.tryReadTemplateToken();
                        }),
                        f_stat: new TokContext('function', false),
                        f_expr: new TokContext('function', true),
                        f_expr_gen: new TokContext('function', true, false, null, true),
                        f_gen: new TokContext('function', false, false, null, true)
                    };
                    var pp$7 = Parser.prototype;
                    pp$7.initialContext = function () {
                        return [types$1.b_stat];
                    };
                    pp$7.braceIsBlock = function (prevType) {
                        var parent = this.curContext();
                        if (parent === types$1.f_expr || parent === types$1.f_stat) {
                            return true;
                        }
                        if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr)) {
                            return !parent.isExpr;
                        }
                        if (prevType === types._return || prevType == types.name && this.exprAllowed) {
                            return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
                        }
                        if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType == types.arrow) {
                            return true;
                        }
                        if (prevType == types.braceL) {
                            return parent === types$1.b_stat;
                        }
                        if (prevType == types._var || prevType == types.name) {
                            return false;
                        }
                        return !this.exprAllowed;
                    };
                    pp$7.inGeneratorContext = function () {
                        var this$1 = this;
                        for (var i = this.context.length - 1; i >= 1; i--) {
                            var context = this$1.context[i];
                            if (context.token === 'function') {
                                return context.generator;
                            }
                        }
                        return false;
                    };
                    pp$7.updateContext = function (prevType) {
                        var update, type = this.type;
                        if (type.keyword && prevType == types.dot) {
                            this.exprAllowed = false;
                        } else if (update = type.updateContext) {
                            update.call(this, prevType);
                        } else {
                            this.exprAllowed = type.beforeExpr;
                        }
                    };
                    types.parenR.updateContext = types.braceR.updateContext = function () {
                        if (this.context.length == 1) {
                            this.exprAllowed = true;
                            return;
                        }
                        var out = this.context.pop();
                        if (out === types$1.b_stat && this.curContext().token === 'function') {
                            out = this.context.pop();
                        }
                        this.exprAllowed = !out.isExpr;
                    };
                    types.braceL.updateContext = function (prevType) {
                        this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
                        this.exprAllowed = true;
                    };
                    types.dollarBraceL.updateContext = function () {
                        this.context.push(types$1.b_tmpl);
                        this.exprAllowed = true;
                    };
                    types.parenL.updateContext = function (prevType) {
                        var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
                        this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
                        this.exprAllowed = true;
                    };
                    types.incDec.updateContext = function () {
                    };
                    types._function.updateContext = types._class.updateContext = function (prevType) {
                        if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {
                            this.context.push(types$1.f_expr);
                        } else {
                            this.context.push(types$1.f_stat);
                        }
                        this.exprAllowed = false;
                    };
                    types.backQuote.updateContext = function () {
                        if (this.curContext() === types$1.q_tmpl) {
                            this.context.pop();
                        } else {
                            this.context.push(types$1.q_tmpl);
                        }
                        this.exprAllowed = false;
                    };
                    types.star.updateContext = function (prevType) {
                        if (prevType == types._function) {
                            var index = this.context.length - 1;
                            if (this.context[index] === types$1.f_expr) {
                                this.context[index] = types$1.f_expr_gen;
                            } else {
                                this.context[index] = types$1.f_gen;
                            }
                        }
                        this.exprAllowed = true;
                    };
                    types.name.updateContext = function (prevType) {
                        var allowed = false;
                        if (this.options.ecmaVersion >= 6) {
                            if (this.value == 'of' && !this.exprAllowed || this.value == 'yield' && this.inGeneratorContext()) {
                                allowed = true;
                            }
                        }
                        this.exprAllowed = allowed;
                    };
                    var Token = function Token(p) {
                        this.type = p.type;
                        this.value = p.value;
                        this.start = p.start;
                        this.end = p.end;
                        if (p.options.locations) {
                            this.loc = new SourceLocation(p, p.startLoc, p.endLoc);
                        }
                        if (p.options.ranges) {
                            this.range = [
                                p.start,
                                p.end
                            ];
                        }
                    };
                    var pp$8 = Parser.prototype;
                    var isRhino = typeof Packages == 'object' && Object.prototype.toString.call(Packages) == '[object JavaPackage]';
                    pp$8.next = function () {
                        if (this.options.onToken) {
                            this.options.onToken(new Token(this));
                        }
                        this.lastTokEnd = this.end;
                        this.lastTokStart = this.start;
                        this.lastTokEndLoc = this.endLoc;
                        this.lastTokStartLoc = this.startLoc;
                        this.nextToken();
                    };
                    pp$8.getToken = function () {
                        this.next();
                        return new Token(this);
                    };
                    if (typeof Symbol !== 'undefined') {
                        pp$8[Symbol.iterator] = function () {
                            var this$1 = this;
                            return {
                                next: function () {
                                    var token = this$1.getToken();
                                    return {
                                        done: token.type === types.eof,
                                        value: token
                                    };
                                }
                            };
                        };
                    }
                    pp$8.curContext = function () {
                        return this.context[this.context.length - 1];
                    };
                    pp$8.nextToken = function () {
                        var curContext = this.curContext();
                        if (!curContext || !curContext.preserveSpace) {
                            this.skipSpace();
                        }
                        this.start = this.pos;
                        if (this.options.locations) {
                            this.startLoc = this.curPosition();
                        }
                        if (this.pos >= this.input.length) {
                            return this.finishToken(types.eof);
                        }
                        if (curContext.override) {
                            return curContext.override(this);
                        } else {
                            this.readToken(this.fullCharCodeAtPos());
                        }
                    };
                    pp$8.readToken = function (code) {
                        if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92) {
                            return this.readWord();
                        }
                        return this.getTokenFromCode(code);
                    };
                    pp$8.fullCharCodeAtPos = function () {
                        var code = this.input.charCodeAt(this.pos);
                        if (code <= 55295 || code >= 57344) {
                            return code;
                        }
                        var next = this.input.charCodeAt(this.pos + 1);
                        return (code << 10) + next - 56613888;
                    };
                    pp$8.skipBlockComment = function () {
                        var this$1 = this;
                        var startLoc = this.options.onComment && this.curPosition();
                        var start = this.pos, end = this.input.indexOf('*/', this.pos += 2);
                        if (end === -1) {
                            this.raise(this.pos - 2, 'Unterminated comment');
                        }
                        this.pos = end + 2;
                        if (this.options.locations) {
                            lineBreakG.lastIndex = start;
                            var match;
                            while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
                                ++this$1.curLine;
                                this$1.lineStart = match.index + match[0].length;
                            }
                        }
                        if (this.options.onComment) {
                            this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
                        }
                    };
                    pp$8.skipLineComment = function (startSkip) {
                        var this$1 = this;
                        var start = this.pos;
                        var startLoc = this.options.onComment && this.curPosition();
                        var ch = this.input.charCodeAt(this.pos += startSkip);
                        while (this.pos < this.input.length && !isNewLine(ch)) {
                            ch = this$1.input.charCodeAt(++this$1.pos);
                        }
                        if (this.options.onComment) {
                            this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
                        }
                    };
                    pp$8.skipSpace = function () {
                        var this$1 = this;
                        loop:
                            while (this.pos < this.input.length) {
                                var ch = this$1.input.charCodeAt(this$1.pos);
                                switch (ch) {
                                case 32:
                                case 160:
                                    ++this$1.pos;
                                    break;
                                case 13:
                                    if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {
                                        ++this$1.pos;
                                    }
                                case 10:
                                case 8232:
                                case 8233:
                                    ++this$1.pos;
                                    if (this$1.options.locations) {
                                        ++this$1.curLine;
                                        this$1.lineStart = this$1.pos;
                                    }
                                    break;
                                case 47:
                                    switch (this$1.input.charCodeAt(this$1.pos + 1)) {
                                    case 42:
                                        this$1.skipBlockComment();
                                        break;
                                    case 47:
                                        this$1.skipLineComment(2);
                                        break;
                                    default:
                                        break loop;
                                    }
                                    break;
                                default:
                                    if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                                        ++this$1.pos;
                                    } else {
                                        break loop;
                                    }
                                }
                            }
                    };
                    pp$8.finishToken = function (type, val) {
                        this.end = this.pos;
                        if (this.options.locations) {
                            this.endLoc = this.curPosition();
                        }
                        var prevType = this.type;
                        this.type = type;
                        this.value = val;
                        this.updateContext(prevType);
                    };
                    pp$8.readToken_dot = function () {
                        var next = this.input.charCodeAt(this.pos + 1);
                        if (next >= 48 && next <= 57) {
                            return this.readNumber(true);
                        }
                        var next2 = this.input.charCodeAt(this.pos + 2);
                        if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
                            this.pos += 3;
                            return this.finishToken(types.ellipsis);
                        } else {
                            ++this.pos;
                            return this.finishToken(types.dot);
                        }
                    };
                    pp$8.readToken_slash = function () {
                        var next = this.input.charCodeAt(this.pos + 1);
                        if (this.exprAllowed) {
                            ++this.pos;
                            return this.readRegexp();
                        }
                        if (next === 61) {
                            return this.finishOp(types.assign, 2);
                        }
                        return this.finishOp(types.slash, 1);
                    };
                    pp$8.readToken_mult_modulo_exp = function (code) {
                        var next = this.input.charCodeAt(this.pos + 1);
                        var size = 1;
                        var tokentype = code === 42 ? types.star : types.modulo;
                        if (this.options.ecmaVersion >= 7 && next === 42) {
                            ++size;
                            tokentype = types.starstar;
                            next = this.input.charCodeAt(this.pos + 2);
                        }
                        if (next === 61) {
                            return this.finishOp(types.assign, size + 1);
                        }
                        return this.finishOp(tokentype, size);
                    };
                    pp$8.readToken_pipe_amp = function (code) {
                        var next = this.input.charCodeAt(this.pos + 1);
                        if (next === code) {
                            return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);
                        }
                        if (next === 61) {
                            return this.finishOp(types.assign, 2);
                        }
                        return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);
                    };
                    pp$8.readToken_caret = function () {
                        var next = this.input.charCodeAt(this.pos + 1);
                        if (next === 61) {
                            return this.finishOp(types.assign, 2);
                        }
                        return this.finishOp(types.bitwiseXOR, 1);
                    };
                    pp$8.readToken_plus_min = function (code) {
                        var next = this.input.charCodeAt(this.pos + 1);
                        if (next === code) {
                            if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
                                this.skipLineComment(3);
                                this.skipSpace();
                                return this.nextToken();
                            }
                            return this.finishOp(types.incDec, 2);
                        }
                        if (next === 61) {
                            return this.finishOp(types.assign, 2);
                        }
                        return this.finishOp(types.plusMin, 1);
                    };
                    pp$8.readToken_lt_gt = function (code) {
                        var next = this.input.charCodeAt(this.pos + 1);
                        var size = 1;
                        if (next === code) {
                            size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
                            if (this.input.charCodeAt(this.pos + size) === 61) {
                                return this.finishOp(types.assign, size + 1);
                            }
                            return this.finishOp(types.bitShift, size);
                        }
                        if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 && this.input.charCodeAt(this.pos + 3) == 45) {
                            if (this.inModule) {
                                this.unexpected();
                            }
                            this.skipLineComment(4);
                            this.skipSpace();
                            return this.nextToken();
                        }
                        if (next === 61) {
                            size = 2;
                        }
                        return this.finishOp(types.relational, size);
                    };
                    pp$8.readToken_eq_excl = function (code) {
                        var next = this.input.charCodeAt(this.pos + 1);
                        if (next === 61) {
                            return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
                        }
                        if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
                            this.pos += 2;
                            return this.finishToken(types.arrow);
                        }
                        return this.finishOp(code === 61 ? types.eq : types.prefix, 1);
                    };
                    pp$8.getTokenFromCode = function (code) {
                        switch (code) {
                        case 46:
                            return this.readToken_dot();
                        case 40:
                            ++this.pos;
                            return this.finishToken(types.parenL);
                        case 41:
                            ++this.pos;
                            return this.finishToken(types.parenR);
                        case 59:
                            ++this.pos;
                            return this.finishToken(types.semi);
                        case 44:
                            ++this.pos;
                            return this.finishToken(types.comma);
                        case 91:
                            ++this.pos;
                            return this.finishToken(types.bracketL);
                        case 93:
                            ++this.pos;
                            return this.finishToken(types.bracketR);
                        case 123:
                            ++this.pos;
                            return this.finishToken(types.braceL);
                        case 125:
                            ++this.pos;
                            return this.finishToken(types.braceR);
                        case 58:
                            ++this.pos;
                            return this.finishToken(types.colon);
                        case 63:
                            ++this.pos;
                            return this.finishToken(types.question);
                        case 96:
                            if (this.options.ecmaVersion < 6) {
                                break;
                            }
                            ++this.pos;
                            return this.finishToken(types.backQuote);
                        case 48:
                            var next = this.input.charCodeAt(this.pos + 1);
                            if (next === 120 || next === 88) {
                                return this.readRadixNumber(16);
                            }
                            if (this.options.ecmaVersion >= 6) {
                                if (next === 111 || next === 79) {
                                    return this.readRadixNumber(8);
                                }
                                if (next === 98 || next === 66) {
                                    return this.readRadixNumber(2);
                                }
                            }
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                            return this.readNumber(false);
                        case 34:
                        case 39:
                            return this.readString(code);
                        case 47:
                            return this.readToken_slash();
                        case 37:
                        case 42:
                            return this.readToken_mult_modulo_exp(code);
                        case 124:
                        case 38:
                            return this.readToken_pipe_amp(code);
                        case 94:
                            return this.readToken_caret();
                        case 43:
                        case 45:
                            return this.readToken_plus_min(code);
                        case 60:
                        case 62:
                            return this.readToken_lt_gt(code);
                        case 61:
                        case 33:
                            return this.readToken_eq_excl(code);
                        case 126:
                            return this.finishOp(types.prefix, 1);
                        }
                        this.raise(this.pos, 'Unexpected character \'' + codePointToString(code) + '\'');
                    };
                    pp$8.finishOp = function (type, size) {
                        var str = this.input.slice(this.pos, this.pos + size);
                        this.pos += size;
                        return this.finishToken(type, str);
                    };
                    function tryCreateRegexp(src, flags, throwErrorAt, parser) {
                        try {
                            return new RegExp(src, flags);
                        } catch (e) {
                            if (throwErrorAt !== undefined) {
                                if (e instanceof SyntaxError) {
                                    parser.raise(throwErrorAt, 'Error parsing regular expression: ' + e.message);
                                }
                                throw e;
                            }
                        }
                    }
                    var regexpUnicodeSupport = !!tryCreateRegexp('\uFFFF', 'u');
                    pp$8.readRegexp = function () {
                        var this$1 = this;
                        var escaped, inClass, start = this.pos;
                        for (;;) {
                            if (this$1.pos >= this$1.input.length) {
                                this$1.raise(start, 'Unterminated regular expression');
                            }
                            var ch = this$1.input.charAt(this$1.pos);
                            if (lineBreak.test(ch)) {
                                this$1.raise(start, 'Unterminated regular expression');
                            }
                            if (!escaped) {
                                if (ch === '[') {
                                    inClass = true;
                                } else if (ch === ']' && inClass) {
                                    inClass = false;
                                } else if (ch === '/' && !inClass) {
                                    break;
                                }
                                escaped = ch === '\\';
                            } else {
                                escaped = false;
                            }
                            ++this$1.pos;
                        }
                        var content = this.input.slice(start, this.pos);
                        ++this.pos;
                        var mods = this.readWord1();
                        var tmp = content, tmpFlags = '';
                        if (mods) {
                            var validFlags = /^[gim]*$/;
                            if (this.options.ecmaVersion >= 6) {
                                validFlags = /^[gimuy]*$/;
                            }
                            if (!validFlags.test(mods)) {
                                this.raise(start, 'Invalid regular expression flag');
                            }
                            if (mods.indexOf('u') >= 0) {
                                if (regexpUnicodeSupport) {
                                    tmpFlags = 'u';
                                } else {
                                    tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, function (_match, code, offset) {
                                        code = Number('0x' + code);
                                        if (code > 1114111) {
                                            this$1.raise(start + offset + 3, 'Code point out of bounds');
                                        }
                                        return 'x';
                                    });
                                    tmp = tmp.replace(/\\u([a-fA-F0-9]{4})|[\uD800-\uDBFF][\uDC00-\uDFFF]/g, 'x');
                                    tmpFlags = tmpFlags.replace('u', '');
                                }
                            }
                        }
                        var value = null;
                        if (!isRhino) {
                            tryCreateRegexp(tmp, tmpFlags, start, this);
                            value = tryCreateRegexp(content, mods);
                        }
                        return this.finishToken(types.regexp, {
                            pattern: content,
                            flags: mods,
                            value: value
                        });
                    };
                    pp$8.readInt = function (radix, len) {
                        var this$1 = this;
                        var start = this.pos, total = 0;
                        for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
                            var code = this$1.input.charCodeAt(this$1.pos), val = void 0;
                            if (code >= 97) {
                                val = code - 97 + 10;
                            } else if (code >= 65) {
                                val = code - 65 + 10;
                            } else if (code >= 48 && code <= 57) {
                                val = code - 48;
                            } else {
                                val = Infinity;
                            }
                            if (val >= radix) {
                                break;
                            }
                            ++this$1.pos;
                            total = total * radix + val;
                        }
                        if (this.pos === start || len != null && this.pos - start !== len) {
                            return null;
                        }
                        return total;
                    };
                    pp$8.readRadixNumber = function (radix) {
                        this.pos += 2;
                        var val = this.readInt(radix);
                        if (val == null) {
                            this.raise(this.start + 2, 'Expected number in radix ' + radix);
                        }
                        if (isIdentifierStart(this.fullCharCodeAtPos())) {
                            this.raise(this.pos, 'Identifier directly after number');
                        }
                        return this.finishToken(types.num, val);
                    };
                    pp$8.readNumber = function (startsWithDot) {
                        var start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48;
                        if (!startsWithDot && this.readInt(10) === null) {
                            this.raise(start, 'Invalid number');
                        }
                        if (octal && this.pos == start + 1) {
                            octal = false;
                        }
                        var next = this.input.charCodeAt(this.pos);
                        if (next === 46 && !octal) {
                            ++this.pos;
                            this.readInt(10);
                            isFloat = true;
                            next = this.input.charCodeAt(this.pos);
                        }
                        if ((next === 69 || next === 101) && !octal) {
                            next = this.input.charCodeAt(++this.pos);
                            if (next === 43 || next === 45) {
                                ++this.pos;
                            }
                            if (this.readInt(10) === null) {
                                this.raise(start, 'Invalid number');
                            }
                            isFloat = true;
                        }
                        if (isIdentifierStart(this.fullCharCodeAtPos())) {
                            this.raise(this.pos, 'Identifier directly after number');
                        }
                        var str = this.input.slice(start, this.pos), val;
                        if (isFloat) {
                            val = parseFloat(str);
                        } else if (!octal || str.length === 1) {
                            val = parseInt(str, 10);
                        } else if (this.strict) {
                            this.raise(start, 'Invalid number');
                        } else if (/[89]/.test(str)) {
                            val = parseInt(str, 10);
                        } else {
                            val = parseInt(str, 8);
                        }
                        return this.finishToken(types.num, val);
                    };
                    pp$8.readCodePoint = function () {
                        var ch = this.input.charCodeAt(this.pos), code;
                        if (ch === 123) {
                            if (this.options.ecmaVersion < 6) {
                                this.unexpected();
                            }
                            var codePos = ++this.pos;
                            code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos);
                            ++this.pos;
                            if (code > 1114111) {
                                this.invalidStringToken(codePos, 'Code point out of bounds');
                            }
                        } else {
                            code = this.readHexChar(4);
                        }
                        return code;
                    };
                    function codePointToString(code) {
                        if (code <= 65535) {
                            return String.fromCharCode(code);
                        }
                        code -= 65536;
                        return String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
                    }
                    pp$8.readString = function (quote) {
                        var this$1 = this;
                        var out = '', chunkStart = ++this.pos;
                        for (;;) {
                            if (this$1.pos >= this$1.input.length) {
                                this$1.raise(this$1.start, 'Unterminated string constant');
                            }
                            var ch = this$1.input.charCodeAt(this$1.pos);
                            if (ch === quote) {
                                break;
                            }
                            if (ch === 92) {
                                out += this$1.input.slice(chunkStart, this$1.pos);
                                out += this$1.readEscapedChar(false);
                                chunkStart = this$1.pos;
                            } else {
                                if (isNewLine(ch)) {
                                    this$1.raise(this$1.start, 'Unterminated string constant');
                                }
                                ++this$1.pos;
                            }
                        }
                        out += this.input.slice(chunkStart, this.pos++);
                        return this.finishToken(types.string, out);
                    };
                    var INVALID_TEMPLATE_ESCAPE_ERROR = {};
                    pp$8.tryReadTemplateToken = function () {
                        this.inTemplateElement = true;
                        try {
                            this.readTmplToken();
                        } catch (err) {
                            if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
                                this.readInvalidTemplateToken();
                            } else {
                                throw err;
                            }
                        }
                        this.inTemplateElement = false;
                    };
                    pp$8.invalidStringToken = function (position, message) {
                        if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
                            throw INVALID_TEMPLATE_ESCAPE_ERROR;
                        } else {
                            this.raise(position, message);
                        }
                    };
                    pp$8.readTmplToken = function () {
                        var this$1 = this;
                        var out = '', chunkStart = this.pos;
                        for (;;) {
                            if (this$1.pos >= this$1.input.length) {
                                this$1.raise(this$1.start, 'Unterminated template');
                            }
                            var ch = this$1.input.charCodeAt(this$1.pos);
                            if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) {
                                if (this$1.pos === this$1.start && (this$1.type === types.template || this$1.type === types.invalidTemplate)) {
                                    if (ch === 36) {
                                        this$1.pos += 2;
                                        return this$1.finishToken(types.dollarBraceL);
                                    } else {
                                        ++this$1.pos;
                                        return this$1.finishToken(types.backQuote);
                                    }
                                }
                                out += this$1.input.slice(chunkStart, this$1.pos);
                                return this$1.finishToken(types.template, out);
                            }
                            if (ch === 92) {
                                out += this$1.input.slice(chunkStart, this$1.pos);
                                out += this$1.readEscapedChar(true);
                                chunkStart = this$1.pos;
                            } else if (isNewLine(ch)) {
                                out += this$1.input.slice(chunkStart, this$1.pos);
                                ++this$1.pos;
                                switch (ch) {
                                case 13:
                                    if (this$1.input.charCodeAt(this$1.pos) === 10) {
                                        ++this$1.pos;
                                    }
                                case 10:
                                    out += '\n';
                                    break;
                                default:
                                    out += String.fromCharCode(ch);
                                    break;
                                }
                                if (this$1.options.locations) {
                                    ++this$1.curLine;
                                    this$1.lineStart = this$1.pos;
                                }
                                chunkStart = this$1.pos;
                            } else {
                                ++this$1.pos;
                            }
                        }
                    };
                    pp$8.readInvalidTemplateToken = function () {
                        var this$1 = this;
                        for (; this.pos < this.input.length; this.pos++) {
                            switch (this$1.input[this$1.pos]) {
                            case '\\':
                                ++this$1.pos;
                                break;
                            case '$':
                                if (this$1.input[this$1.pos + 1] !== '{') {
                                    break;
                                }
                            case '`':
                                return this$1.finishToken(types.invalidTemplate, this$1.input.slice(this$1.start, this$1.pos));
                            }
                        }
                        this.raise(this.start, 'Unterminated template');
                    };
                    pp$8.readEscapedChar = function (inTemplate) {
                        var ch = this.input.charCodeAt(++this.pos);
                        ++this.pos;
                        switch (ch) {
                        case 110:
                            return '\n';
                        case 114:
                            return '\r';
                        case 120:
                            return String.fromCharCode(this.readHexChar(2));
                        case 117:
                            return codePointToString(this.readCodePoint());
                        case 116:
                            return '\t';
                        case 98:
                            return '\b';
                        case 118:
                            return '\x0B';
                        case 102:
                            return '\f';
                        case 13:
                            if (this.input.charCodeAt(this.pos) === 10) {
                                ++this.pos;
                            }
                        case 10:
                            if (this.options.locations) {
                                this.lineStart = this.pos;
                                ++this.curLine;
                            }
                            return '';
                        default:
                            if (ch >= 48 && ch <= 55) {
                                var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
                                var octal = parseInt(octalStr, 8);
                                if (octal > 255) {
                                    octalStr = octalStr.slice(0, -1);
                                    octal = parseInt(octalStr, 8);
                                }
                                if (octalStr !== '0' && (this.strict || inTemplate)) {
                                    this.invalidStringToken(this.pos - 2, 'Octal literal in strict mode');
                                }
                                this.pos += octalStr.length - 1;
                                return String.fromCharCode(octal);
                            }
                            return String.fromCharCode(ch);
                        }
                    };
                    pp$8.readHexChar = function (len) {
                        var codePos = this.pos;
                        var n = this.readInt(16, len);
                        if (n === null) {
                            this.invalidStringToken(codePos, 'Bad character escape sequence');
                        }
                        return n;
                    };
                    pp$8.readWord1 = function () {
                        var this$1 = this;
                        this.containsEsc = false;
                        var word = '', first = true, chunkStart = this.pos;
                        var astral = this.options.ecmaVersion >= 6;
                        while (this.pos < this.input.length) {
                            var ch = this$1.fullCharCodeAtPos();
                            if (isIdentifierChar(ch, astral)) {
                                this$1.pos += ch <= 65535 ? 1 : 2;
                            } else if (ch === 92) {
                                this$1.containsEsc = true;
                                word += this$1.input.slice(chunkStart, this$1.pos);
                                var escStart = this$1.pos;
                                if (this$1.input.charCodeAt(++this$1.pos) != 117) {
                                    this$1.invalidStringToken(this$1.pos, 'Expecting Unicode escape sequence \\uXXXX');
                                }
                                ++this$1.pos;
                                var esc = this$1.readCodePoint();
                                if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
                                    this$1.invalidStringToken(escStart, 'Invalid Unicode escape');
                                }
                                word += codePointToString(esc);
                                chunkStart = this$1.pos;
                            } else {
                                break;
                            }
                            first = false;
                        }
                        return word + this.input.slice(chunkStart, this.pos);
                    };
                    pp$8.readWord = function () {
                        var word = this.readWord1();
                        var type = types.name;
                        if (this.keywords.test(word)) {
                            if (this.containsEsc) {
                                this.raiseRecoverable(this.start, 'Escape sequence in keyword ' + word);
                            }
                            type = keywords$1[word];
                        }
                        return this.finishToken(type, word);
                    };
                    var version = '5.1.1';
                    function parse(input, options) {
                        return new Parser(options, input).parse();
                    }
                    function parseExpressionAt(input, pos, options) {
                        var p = new Parser(options, input, pos);
                        p.nextToken();
                        return p.parseExpression();
                    }
                    function tokenizer(input, options) {
                        return new Parser(options, input);
                    }
                    function addLooseExports(parse, Parser$$1, plugins$$1) {
                        exports.parse_dammit = parse;
                        exports.LooseParser = Parser$$1;
                        exports.pluginsLoose = plugins$$1;
                    }
                    exports.version = version;
                    exports.parse = parse;
                    exports.parseExpressionAt = parseExpressionAt;
                    exports.tokenizer = tokenizer;
                    exports.addLooseExports = addLooseExports;
                    exports.Parser = Parser;
                    exports.plugins = plugins;
                    exports.defaultOptions = defaultOptions;
                    exports.Position = Position;
                    exports.SourceLocation = SourceLocation;
                    exports.getLineInfo = getLineInfo;
                    exports.Node = Node;
                    exports.TokenType = TokenType;
                    exports.tokTypes = types;
                    exports.keywordTypes = keywords$1;
                    exports.TokContext = TokContext;
                    exports.tokContexts = types$1;
                    exports.isIdentifierChar = isIdentifierChar;
                    exports.isIdentifierStart = isIdentifierStart;
                    exports.Token = Token;
                    exports.isNewLine = isNewLine;
                    exports.lineBreak = lineBreak;
                    exports.lineBreakG = lineBreakG;
                    exports.nonASCIIwhitespace = nonASCIIwhitespace;
                    Object.defineProperty(exports, '__esModule', { value: true });
                }));
            },
            {}
        ],
        4: [
            function (require, module, exports) {
                (function (process, __filename) {
                    'use strict';
                    function amdefine(module, requireFn) {
                        'use strict';
                        var defineCache = {}, loaderCache = {}, alreadyCalled = false, path = require('path'), makeRequire, stringRequire;
                        function trimDots(ary) {
                            var i, part;
                            for (i = 0; ary[i]; i += 1) {
                                part = ary[i];
                                if (part === '.') {
                                    ary.splice(i, 1);
                                    i -= 1;
                                } else if (part === '..') {
                                    if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
                                        break;
                                    } else if (i > 0) {
                                        ary.splice(i - 1, 2);
                                        i -= 2;
                                    }
                                }
                            }
                        }
                        function normalize(name, baseName) {
                            var baseParts;
                            if (name && name.charAt(0) === '.') {
                                if (baseName) {
                                    baseParts = baseName.split('/');
                                    baseParts = baseParts.slice(0, baseParts.length - 1);
                                    baseParts = baseParts.concat(name.split('/'));
                                    trimDots(baseParts);
                                    name = baseParts.join('/');
                                }
                            }
                            return name;
                        }
                        function makeNormalize(relName) {
                            return function (name) {
                                return normalize(name, relName);
                            };
                        }
                        function makeLoad(id) {
                            function load(value) {
                                loaderCache[id] = value;
                            }
                            load.fromText = function (id, text) {
                                throw new Error('amdefine does not implement load.fromText');
                            };
                            return load;
                        }
                        makeRequire = function (systemRequire, exports, module, relId) {
                            function amdRequire(deps, callback) {
                                if (typeof deps === 'string') {
                                    return stringRequire(systemRequire, exports, module, deps, relId);
                                } else {
                                    deps = deps.map(function (depName) {
                                        return stringRequire(systemRequire, exports, module, depName, relId);
                                    });
                                    if (callback) {
                                        process.nextTick(function () {
                                            callback.apply(null, deps);
                                        });
                                    }
                                }
                            }
                            amdRequire.toUrl = function (filePath) {
                                if (filePath.indexOf('.') === 0) {
                                    return normalize(filePath, path.dirname(module.filename));
                                } else {
                                    return filePath;
                                }
                            };
                            return amdRequire;
                        };
                        requireFn = requireFn || function req() {
                            return module.require.apply(module, arguments);
                        };
                        function runFactory(id, deps, factory) {
                            var r, e, m, result;
                            if (id) {
                                e = loaderCache[id] = {};
                                m = {
                                    id: id,
                                    uri: __filename,
                                    exports: e
                                };
                                r = makeRequire(requireFn, e, m, id);
                            } else {
                                if (alreadyCalled) {
                                    throw new Error('amdefine with no module ID cannot be called more than once per file.');
                                }
                                alreadyCalled = true;
                                e = module.exports;
                                m = module;
                                r = makeRequire(requireFn, e, m, module.id);
                            }
                            if (deps) {
                                deps = deps.map(function (depName) {
                                    return r(depName);
                                });
                            }
                            if (typeof factory === 'function') {
                                result = factory.apply(m.exports, deps);
                            } else {
                                result = factory;
                            }
                            if (result !== undefined) {
                                m.exports = result;
                                if (id) {
                                    loaderCache[id] = m.exports;
                                }
                            }
                        }
                        stringRequire = function (systemRequire, exports, module, id, relId) {
                            var index = id.indexOf('!'), originalId = id, prefix, plugin;
                            if (index === -1) {
                                id = normalize(id, relId);
                                if (id === 'require') {
                                    return makeRequire(systemRequire, exports, module, relId);
                                } else if (id === 'exports') {
                                    return exports;
                                } else if (id === 'module') {
                                    return module;
                                } else if (loaderCache.hasOwnProperty(id)) {
                                    return loaderCache[id];
                                } else if (defineCache[id]) {
                                    runFactory.apply(null, defineCache[id]);
                                    return loaderCache[id];
                                } else {
                                    if (systemRequire) {
                                        return systemRequire(originalId);
                                    } else {
                                        throw new Error('No module with ID: ' + id);
                                    }
                                }
                            } else {
                                prefix = id.substring(0, index);
                                id = id.substring(index + 1, id.length);
                                plugin = stringRequire(systemRequire, exports, module, prefix, relId);
                                if (plugin.normalize) {
                                    id = plugin.normalize(id, makeNormalize(relId));
                                } else {
                                    id = normalize(id, relId);
                                }
                                if (loaderCache[id]) {
                                    return loaderCache[id];
                                } else {
                                    plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});
                                    return loaderCache[id];
                                }
                            }
                        };
                        function define(id, deps, factory) {
                            if (Array.isArray(id)) {
                                factory = deps;
                                deps = id;
                                id = undefined;
                            } else if (typeof id !== 'string') {
                                factory = id;
                                id = deps = undefined;
                            }
                            if (deps && !Array.isArray(deps)) {
                                factory = deps;
                                deps = undefined;
                            }
                            if (!deps) {
                                deps = [
                                    'require',
                                    'exports',
                                    'module'
                                ];
                            }
                            if (id) {
                                defineCache[id] = [
                                    id,
                                    deps,
                                    factory
                                ];
                            } else {
                                runFactory(id, deps, factory);
                            }
                        }
                        define.require = function (id) {
                            if (loaderCache[id]) {
                                return loaderCache[id];
                            }
                            if (defineCache[id]) {
                                runFactory.apply(null, defineCache[id]);
                                return loaderCache[id];
                            }
                        };
                        define.amd = {};
                        return define;
                    }
                    module.exports = amdefine;
                }.call(this, require('_process'), '/node_modules/amdefine/amdefine.js'));
            },
            {
                '_process': 61,
                'path': 59
            }
        ],
        5: [
            function (require, module, exports) {
                'use strict';
                exports.byteLength = byteLength;
                exports.toByteArray = toByteArray;
                exports.fromByteArray = fromByteArray;
                var lookup = [];
                var revLookup = [];
                var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
                var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                for (var i = 0, len = code.length; i < len; ++i) {
                    lookup[i] = code[i];
                    revLookup[code.charCodeAt(i)] = i;
                }
                revLookup['-'.charCodeAt(0)] = 62;
                revLookup['_'.charCodeAt(0)] = 63;
                function placeHoldersCount(b64) {
                    var len = b64.length;
                    if (len % 4 > 0) {
                        throw new Error('Invalid string. Length must be a multiple of 4');
                    }
                    return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
                }
                function byteLength(b64) {
                    return b64.length * 3 / 4 - placeHoldersCount(b64);
                }
                function toByteArray(b64) {
                    var i, j, l, tmp, placeHolders, arr;
                    var len = b64.length;
                    placeHolders = placeHoldersCount(b64);
                    arr = new Arr(len * 3 / 4 - placeHolders);
                    l = placeHolders > 0 ? len - 4 : len;
                    var L = 0;
                    for (i = 0, j = 0; i < l; i += 4, j += 3) {
                        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
                        arr[L++] = tmp >> 16 & 255;
                        arr[L++] = tmp >> 8 & 255;
                        arr[L++] = tmp & 255;
                    }
                    if (placeHolders === 2) {
                        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
                        arr[L++] = tmp & 255;
                    } else if (placeHolders === 1) {
                        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
                        arr[L++] = tmp >> 8 & 255;
                        arr[L++] = tmp & 255;
                    }
                    return arr;
                }
                function tripletToBase64(num) {
                    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
                }
                function encodeChunk(uint8, start, end) {
                    var tmp;
                    var output = [];
                    for (var i = start; i < end; i += 3) {
                        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
                        output.push(tripletToBase64(tmp));
                    }
                    return output.join('');
                }
                function fromByteArray(uint8) {
                    var tmp;
                    var len = uint8.length;
                    var extraBytes = len % 3;
                    var output = '';
                    var parts = [];
                    var maxChunkLength = 16383;
                    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
                    }
                    if (extraBytes === 1) {
                        tmp = uint8[len - 1];
                        output += lookup[tmp >> 2];
                        output += lookup[tmp << 4 & 63];
                        output += '==';
                    } else if (extraBytes === 2) {
                        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                        output += lookup[tmp >> 10];
                        output += lookup[tmp >> 4 & 63];
                        output += lookup[tmp << 2 & 63];
                        output += '=';
                    }
                    parts.push(output);
                    return parts.join('');
                }
            },
            {}
        ],
        6: [
            function (require, module, exports) {
            },
            {}
        ],
        7: [
            function (require, module, exports) {
                arguments[4][6][0].apply(exports, arguments);
            },
            { 'dup': 6 }
        ],
        8: [
            function (require, module, exports) {
                'use strict';
                var base64 = require('base64-js');
                var ieee754 = require('ieee754');
                exports.Buffer = Buffer;
                exports.SlowBuffer = SlowBuffer;
                exports.INSPECT_MAX_BYTES = 50;
                var K_MAX_LENGTH = 2147483647;
                exports.kMaxLength = K_MAX_LENGTH;
                Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
                if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
                    console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
                }
                function typedArraySupport() {
                    try {
                        var arr = new Uint8Array(1);
                        arr.__proto__ = {
                            __proto__: Uint8Array.prototype,
                            foo: function () {
                                return 42;
                            }
                        };
                        return arr.foo() === 42;
                    } catch (e) {
                        return false;
                    }
                }
                function createBuffer(length) {
                    if (length > K_MAX_LENGTH) {
                        throw new RangeError('Invalid typed array length');
                    }
                    var buf = new Uint8Array(length);
                    buf.__proto__ = Buffer.prototype;
                    return buf;
                }
                function Buffer(arg, encodingOrOffset, length) {
                    if (typeof arg === 'number') {
                        if (typeof encodingOrOffset === 'string') {
                            throw new Error('If encoding is specified then the first argument must be a string');
                        }
                        return allocUnsafe(arg);
                    }
                    return from(arg, encodingOrOffset, length);
                }
                if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
                    Object.defineProperty(Buffer, Symbol.species, {
                        value: null,
                        configurable: true,
                        enumerable: false,
                        writable: false
                    });
                }
                Buffer.poolSize = 8192;
                function from(value, encodingOrOffset, length) {
                    if (typeof value === 'number') {
                        throw new TypeError('"value" argument must not be a number');
                    }
                    if (value instanceof ArrayBuffer) {
                        return fromArrayBuffer(value, encodingOrOffset, length);
                    }
                    if (typeof value === 'string') {
                        return fromString(value, encodingOrOffset);
                    }
                    return fromObject(value);
                }
                Buffer.from = function (value, encodingOrOffset, length) {
                    return from(value, encodingOrOffset, length);
                };
                Buffer.prototype.__proto__ = Uint8Array.prototype;
                Buffer.__proto__ = Uint8Array;
                function assertSize(size) {
                    if (typeof size !== 'number') {
                        throw new TypeError('"size" argument must be a number');
                    } else if (size < 0) {
                        throw new RangeError('"size" argument must not be negative');
                    }
                }
                function alloc(size, fill, encoding) {
                    assertSize(size);
                    if (size <= 0) {
                        return createBuffer(size);
                    }
                    if (fill !== undefined) {
                        return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
                    }
                    return createBuffer(size);
                }
                Buffer.alloc = function (size, fill, encoding) {
                    return alloc(size, fill, encoding);
                };
                function allocUnsafe(size) {
                    assertSize(size);
                    return createBuffer(size < 0 ? 0 : checked(size) | 0);
                }
                Buffer.allocUnsafe = function (size) {
                    return allocUnsafe(size);
                };
                Buffer.allocUnsafeSlow = function (size) {
                    return allocUnsafe(size);
                };
                function fromString(string, encoding) {
                    if (typeof encoding !== 'string' || encoding === '') {
                        encoding = 'utf8';
                    }
                    if (!Buffer.isEncoding(encoding)) {
                        throw new TypeError('"encoding" must be a valid string encoding');
                    }
                    var length = byteLength(string, encoding) | 0;
                    var buf = createBuffer(length);
                    var actual = buf.write(string, encoding);
                    if (actual !== length) {
                        buf = buf.slice(0, actual);
                    }
                    return buf;
                }
                function fromArrayLike(array) {
                    var length = array.length < 0 ? 0 : checked(array.length) | 0;
                    var buf = createBuffer(length);
                    for (var i = 0; i < length; i += 1) {
                        buf[i] = array[i] & 255;
                    }
                    return buf;
                }
                function fromArrayBuffer(array, byteOffset, length) {
                    if (byteOffset < 0 || array.byteLength < byteOffset) {
                        throw new RangeError('\'offset\' is out of bounds');
                    }
                    if (array.byteLength < byteOffset + (length || 0)) {
                        throw new RangeError('\'length\' is out of bounds');
                    }
                    var buf;
                    if (byteOffset === undefined && length === undefined) {
                        buf = new Uint8Array(array);
                    } else if (length === undefined) {
                        buf = new Uint8Array(array, byteOffset);
                    } else {
                        buf = new Uint8Array(array, byteOffset, length);
                    }
                    buf.__proto__ = Buffer.prototype;
                    return buf;
                }
                function fromObject(obj) {
                    if (Buffer.isBuffer(obj)) {
                        var len = checked(obj.length) | 0;
                        var buf = createBuffer(len);
                        if (buf.length === 0) {
                            return buf;
                        }
                        obj.copy(buf, 0, 0, len);
                        return buf;
                    }
                    if (obj) {
                        if (isArrayBufferView(obj) || 'length' in obj) {
                            if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                                return createBuffer(0);
                            }
                            return fromArrayLike(obj);
                        }
                        if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                            return fromArrayLike(obj.data);
                        }
                    }
                    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
                }
                function checked(length) {
                    if (length >= K_MAX_LENGTH) {
                        throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
                    }
                    return length | 0;
                }
                function SlowBuffer(length) {
                    if (+length != length) {
                        length = 0;
                    }
                    return Buffer.alloc(+length);
                }
                Buffer.isBuffer = function isBuffer(b) {
                    return b != null && b._isBuffer === true;
                };
                Buffer.compare = function compare(a, b) {
                    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                        throw new TypeError('Arguments must be Buffers');
                    }
                    if (a === b)
                        return 0;
                    var x = a.length;
                    var y = b.length;
                    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                        if (a[i] !== b[i]) {
                            x = a[i];
                            y = b[i];
                            break;
                        }
                    }
                    if (x < y)
                        return -1;
                    if (y < x)
                        return 1;
                    return 0;
                };
                Buffer.isEncoding = function isEncoding(encoding) {
                    switch (String(encoding).toLowerCase()) {
                    case 'hex':
                    case 'utf8':
                    case 'utf-8':
                    case 'ascii':
                    case 'latin1':
                    case 'binary':
                    case 'base64':
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return true;
                    default:
                        return false;
                    }
                };
                Buffer.concat = function concat(list, length) {
                    if (!Array.isArray(list)) {
                        throw new TypeError('"list" argument must be an Array of Buffers');
                    }
                    if (list.length === 0) {
                        return Buffer.alloc(0);
                    }
                    var i;
                    if (length === undefined) {
                        length = 0;
                        for (i = 0; i < list.length; ++i) {
                            length += list[i].length;
                        }
                    }
                    var buffer = Buffer.allocUnsafe(length);
                    var pos = 0;
                    for (i = 0; i < list.length; ++i) {
                        var buf = list[i];
                        if (!Buffer.isBuffer(buf)) {
                            throw new TypeError('"list" argument must be an Array of Buffers');
                        }
                        buf.copy(buffer, pos);
                        pos += buf.length;
                    }
                    return buffer;
                };
                function byteLength(string, encoding) {
                    if (Buffer.isBuffer(string)) {
                        return string.length;
                    }
                    if (isArrayBufferView(string) || string instanceof ArrayBuffer) {
                        return string.byteLength;
                    }
                    if (typeof string !== 'string') {
                        string = '' + string;
                    }
                    var len = string.length;
                    if (len === 0)
                        return 0;
                    var loweredCase = false;
                    for (;;) {
                        switch (encoding) {
                        case 'ascii':
                        case 'latin1':
                        case 'binary':
                            return len;
                        case 'utf8':
                        case 'utf-8':
                        case undefined:
                            return utf8ToBytes(string).length;
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return len * 2;
                        case 'hex':
                            return len >>> 1;
                        case 'base64':
                            return base64ToBytes(string).length;
                        default:
                            if (loweredCase)
                                return utf8ToBytes(string).length;
                            encoding = ('' + encoding).toLowerCase();
                            loweredCase = true;
                        }
                    }
                }
                Buffer.byteLength = byteLength;
                function slowToString(encoding, start, end) {
                    var loweredCase = false;
                    if (start === undefined || start < 0) {
                        start = 0;
                    }
                    if (start > this.length) {
                        return '';
                    }
                    if (end === undefined || end > this.length) {
                        end = this.length;
                    }
                    if (end <= 0) {
                        return '';
                    }
                    end >>>= 0;
                    start >>>= 0;
                    if (end <= start) {
                        return '';
                    }
                    if (!encoding)
                        encoding = 'utf8';
                    while (true) {
                        switch (encoding) {
                        case 'hex':
                            return hexSlice(this, start, end);
                        case 'utf8':
                        case 'utf-8':
                            return utf8Slice(this, start, end);
                        case 'ascii':
                            return asciiSlice(this, start, end);
                        case 'latin1':
                        case 'binary':
                            return latin1Slice(this, start, end);
                        case 'base64':
                            return base64Slice(this, start, end);
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return utf16leSlice(this, start, end);
                        default:
                            if (loweredCase)
                                throw new TypeError('Unknown encoding: ' + encoding);
                            encoding = (encoding + '').toLowerCase();
                            loweredCase = true;
                        }
                    }
                }
                Buffer.prototype._isBuffer = true;
                function swap(b, n, m) {
                    var i = b[n];
                    b[n] = b[m];
                    b[m] = i;
                }
                Buffer.prototype.swap16 = function swap16() {
                    var len = this.length;
                    if (len % 2 !== 0) {
                        throw new RangeError('Buffer size must be a multiple of 16-bits');
                    }
                    for (var i = 0; i < len; i += 2) {
                        swap(this, i, i + 1);
                    }
                    return this;
                };
                Buffer.prototype.swap32 = function swap32() {
                    var len = this.length;
                    if (len % 4 !== 0) {
                        throw new RangeError('Buffer size must be a multiple of 32-bits');
                    }
                    for (var i = 0; i < len; i += 4) {
                        swap(this, i, i + 3);
                        swap(this, i + 1, i + 2);
                    }
                    return this;
                };
                Buffer.prototype.swap64 = function swap64() {
                    var len = this.length;
                    if (len % 8 !== 0) {
                        throw new RangeError('Buffer size must be a multiple of 64-bits');
                    }
                    for (var i = 0; i < len; i += 8) {
                        swap(this, i, i + 7);
                        swap(this, i + 1, i + 6);
                        swap(this, i + 2, i + 5);
                        swap(this, i + 3, i + 4);
                    }
                    return this;
                };
                Buffer.prototype.toString = function toString() {
                    var length = this.length;
                    if (length === 0)
                        return '';
                    if (arguments.length === 0)
                        return utf8Slice(this, 0, length);
                    return slowToString.apply(this, arguments);
                };
                Buffer.prototype.equals = function equals(b) {
                    if (!Buffer.isBuffer(b))
                        throw new TypeError('Argument must be a Buffer');
                    if (this === b)
                        return true;
                    return Buffer.compare(this, b) === 0;
                };
                Buffer.prototype.inspect = function inspect() {
                    var str = '';
                    var max = exports.INSPECT_MAX_BYTES;
                    if (this.length > 0) {
                        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
                        if (this.length > max)
                            str += ' ... ';
                    }
                    return '<Buffer ' + str + '>';
                };
                Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
                    if (!Buffer.isBuffer(target)) {
                        throw new TypeError('Argument must be a Buffer');
                    }
                    if (start === undefined) {
                        start = 0;
                    }
                    if (end === undefined) {
                        end = target ? target.length : 0;
                    }
                    if (thisStart === undefined) {
                        thisStart = 0;
                    }
                    if (thisEnd === undefined) {
                        thisEnd = this.length;
                    }
                    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                        throw new RangeError('out of range index');
                    }
                    if (thisStart >= thisEnd && start >= end) {
                        return 0;
                    }
                    if (thisStart >= thisEnd) {
                        return -1;
                    }
                    if (start >= end) {
                        return 1;
                    }
                    start >>>= 0;
                    end >>>= 0;
                    thisStart >>>= 0;
                    thisEnd >>>= 0;
                    if (this === target)
                        return 0;
                    var x = thisEnd - thisStart;
                    var y = end - start;
                    var len = Math.min(x, y);
                    var thisCopy = this.slice(thisStart, thisEnd);
                    var targetCopy = target.slice(start, end);
                    for (var i = 0; i < len; ++i) {
                        if (thisCopy[i] !== targetCopy[i]) {
                            x = thisCopy[i];
                            y = targetCopy[i];
                            break;
                        }
                    }
                    if (x < y)
                        return -1;
                    if (y < x)
                        return 1;
                    return 0;
                };
                function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                    if (buffer.length === 0)
                        return -1;
                    if (typeof byteOffset === 'string') {
                        encoding = byteOffset;
                        byteOffset = 0;
                    } else if (byteOffset > 2147483647) {
                        byteOffset = 2147483647;
                    } else if (byteOffset < -2147483648) {
                        byteOffset = -2147483648;
                    }
                    byteOffset = +byteOffset;
                    if (numberIsNaN(byteOffset)) {
                        byteOffset = dir ? 0 : buffer.length - 1;
                    }
                    if (byteOffset < 0)
                        byteOffset = buffer.length + byteOffset;
                    if (byteOffset >= buffer.length) {
                        if (dir)
                            return -1;
                        else
                            byteOffset = buffer.length - 1;
                    } else if (byteOffset < 0) {
                        if (dir)
                            byteOffset = 0;
                        else
                            return -1;
                    }
                    if (typeof val === 'string') {
                        val = Buffer.from(val, encoding);
                    }
                    if (Buffer.isBuffer(val)) {
                        if (val.length === 0) {
                            return -1;
                        }
                        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
                    } else if (typeof val === 'number') {
                        val = val & 255;
                        if (typeof Uint8Array.prototype.indexOf === 'function') {
                            if (dir) {
                                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                            } else {
                                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                            }
                        }
                        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
                    }
                    throw new TypeError('val must be string, number or Buffer');
                }
                function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                    var indexSize = 1;
                    var arrLength = arr.length;
                    var valLength = val.length;
                    if (encoding !== undefined) {
                        encoding = String(encoding).toLowerCase();
                        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
                            if (arr.length < 2 || val.length < 2) {
                                return -1;
                            }
                            indexSize = 2;
                            arrLength /= 2;
                            valLength /= 2;
                            byteOffset /= 2;
                        }
                    }
                    function read(buf, i) {
                        if (indexSize === 1) {
                            return buf[i];
                        } else {
                            return buf.readUInt16BE(i * indexSize);
                        }
                    }
                    var i;
                    if (dir) {
                        var foundIndex = -1;
                        for (i = byteOffset; i < arrLength; i++) {
                            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                                if (foundIndex === -1)
                                    foundIndex = i;
                                if (i - foundIndex + 1 === valLength)
                                    return foundIndex * indexSize;
                            } else {
                                if (foundIndex !== -1)
                                    i -= i - foundIndex;
                                foundIndex = -1;
                            }
                        }
                    } else {
                        if (byteOffset + valLength > arrLength)
                            byteOffset = arrLength - valLength;
                        for (i = byteOffset; i >= 0; i--) {
                            var found = true;
                            for (var j = 0; j < valLength; j++) {
                                if (read(arr, i + j) !== read(val, j)) {
                                    found = false;
                                    break;
                                }
                            }
                            if (found)
                                return i;
                        }
                    }
                    return -1;
                }
                Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
                    return this.indexOf(val, byteOffset, encoding) !== -1;
                };
                Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
                };
                Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
                };
                function hexWrite(buf, string, offset, length) {
                    offset = Number(offset) || 0;
                    var remaining = buf.length - offset;
                    if (!length) {
                        length = remaining;
                    } else {
                        length = Number(length);
                        if (length > remaining) {
                            length = remaining;
                        }
                    }
                    var strLen = string.length;
                    if (strLen % 2 !== 0)
                        throw new TypeError('Invalid hex string');
                    if (length > strLen / 2) {
                        length = strLen / 2;
                    }
                    for (var i = 0; i < length; ++i) {
                        var parsed = parseInt(string.substr(i * 2, 2), 16);
                        if (numberIsNaN(parsed))
                            return i;
                        buf[offset + i] = parsed;
                    }
                    return i;
                }
                function utf8Write(buf, string, offset, length) {
                    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
                }
                function asciiWrite(buf, string, offset, length) {
                    return blitBuffer(asciiToBytes(string), buf, offset, length);
                }
                function latin1Write(buf, string, offset, length) {
                    return asciiWrite(buf, string, offset, length);
                }
                function base64Write(buf, string, offset, length) {
                    return blitBuffer(base64ToBytes(string), buf, offset, length);
                }
                function ucs2Write(buf, string, offset, length) {
                    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
                }
                Buffer.prototype.write = function write(string, offset, length, encoding) {
                    if (offset === undefined) {
                        encoding = 'utf8';
                        length = this.length;
                        offset = 0;
                    } else if (length === undefined && typeof offset === 'string') {
                        encoding = offset;
                        length = this.length;
                        offset = 0;
                    } else if (isFinite(offset)) {
                        offset = offset >>> 0;
                        if (isFinite(length)) {
                            length = length >>> 0;
                            if (encoding === undefined)
                                encoding = 'utf8';
                        } else {
                            encoding = length;
                            length = undefined;
                        }
                    } else {
                        throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
                    }
                    var remaining = this.length - offset;
                    if (length === undefined || length > remaining)
                        length = remaining;
                    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                        throw new RangeError('Attempt to write outside buffer bounds');
                    }
                    if (!encoding)
                        encoding = 'utf8';
                    var loweredCase = false;
                    for (;;) {
                        switch (encoding) {
                        case 'hex':
                            return hexWrite(this, string, offset, length);
                        case 'utf8':
                        case 'utf-8':
                            return utf8Write(this, string, offset, length);
                        case 'ascii':
                            return asciiWrite(this, string, offset, length);
                        case 'latin1':
                        case 'binary':
                            return latin1Write(this, string, offset, length);
                        case 'base64':
                            return base64Write(this, string, offset, length);
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return ucs2Write(this, string, offset, length);
                        default:
                            if (loweredCase)
                                throw new TypeError('Unknown encoding: ' + encoding);
                            encoding = ('' + encoding).toLowerCase();
                            loweredCase = true;
                        }
                    }
                };
                Buffer.prototype.toJSON = function toJSON() {
                    return {
                        type: 'Buffer',
                        data: Array.prototype.slice.call(this._arr || this, 0)
                    };
                };
                function base64Slice(buf, start, end) {
                    if (start === 0 && end === buf.length) {
                        return base64.fromByteArray(buf);
                    } else {
                        return base64.fromByteArray(buf.slice(start, end));
                    }
                }
                function utf8Slice(buf, start, end) {
                    end = Math.min(buf.length, end);
                    var res = [];
                    var i = start;
                    while (i < end) {
                        var firstByte = buf[i];
                        var codePoint = null;
                        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                        if (i + bytesPerSequence <= end) {
                            var secondByte, thirdByte, fourthByte, tempCodePoint;
                            switch (bytesPerSequence) {
                            case 1:
                                if (firstByte < 128) {
                                    codePoint = firstByte;
                                }
                                break;
                            case 2:
                                secondByte = buf[i + 1];
                                if ((secondByte & 192) === 128) {
                                    tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                                    if (tempCodePoint > 127) {
                                        codePoint = tempCodePoint;
                                    }
                                }
                                break;
                            case 3:
                                secondByte = buf[i + 1];
                                thirdByte = buf[i + 2];
                                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                                    tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                                    if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                                        codePoint = tempCodePoint;
                                    }
                                }
                                break;
                            case 4:
                                secondByte = buf[i + 1];
                                thirdByte = buf[i + 2];
                                fourthByte = buf[i + 3];
                                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                                    tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                                    if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                                        codePoint = tempCodePoint;
                                    }
                                }
                            }
                        }
                        if (codePoint === null) {
                            codePoint = 65533;
                            bytesPerSequence = 1;
                        } else if (codePoint > 65535) {
                            codePoint -= 65536;
                            res.push(codePoint >>> 10 & 1023 | 55296);
                            codePoint = 56320 | codePoint & 1023;
                        }
                        res.push(codePoint);
                        i += bytesPerSequence;
                    }
                    return decodeCodePointsArray(res);
                }
                var MAX_ARGUMENTS_LENGTH = 4096;
                function decodeCodePointsArray(codePoints) {
                    var len = codePoints.length;
                    if (len <= MAX_ARGUMENTS_LENGTH) {
                        return String.fromCharCode.apply(String, codePoints);
                    }
                    var res = '';
                    var i = 0;
                    while (i < len) {
                        res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
                    }
                    return res;
                }
                function asciiSlice(buf, start, end) {
                    var ret = '';
                    end = Math.min(buf.length, end);
                    for (var i = start; i < end; ++i) {
                        ret += String.fromCharCode(buf[i] & 127);
                    }
                    return ret;
                }
                function latin1Slice(buf, start, end) {
                    var ret = '';
                    end = Math.min(buf.length, end);
                    for (var i = start; i < end; ++i) {
                        ret += String.fromCharCode(buf[i]);
                    }
                    return ret;
                }
                function hexSlice(buf, start, end) {
                    var len = buf.length;
                    if (!start || start < 0)
                        start = 0;
                    if (!end || end < 0 || end > len)
                        end = len;
                    var out = '';
                    for (var i = start; i < end; ++i) {
                        out += toHex(buf[i]);
                    }
                    return out;
                }
                function utf16leSlice(buf, start, end) {
                    var bytes = buf.slice(start, end);
                    var res = '';
                    for (var i = 0; i < bytes.length; i += 2) {
                        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
                    }
                    return res;
                }
                Buffer.prototype.slice = function slice(start, end) {
                    var len = this.length;
                    start = ~~start;
                    end = end === undefined ? len : ~~end;
                    if (start < 0) {
                        start += len;
                        if (start < 0)
                            start = 0;
                    } else if (start > len) {
                        start = len;
                    }
                    if (end < 0) {
                        end += len;
                        if (end < 0)
                            end = 0;
                    } else if (end > len) {
                        end = len;
                    }
                    if (end < start)
                        end = start;
                    var newBuf = this.subarray(start, end);
                    newBuf.__proto__ = Buffer.prototype;
                    return newBuf;
                };
                function checkOffset(offset, ext, length) {
                    if (offset % 1 !== 0 || offset < 0)
                        throw new RangeError('offset is not uint');
                    if (offset + ext > length)
                        throw new RangeError('Trying to access beyond buffer length');
                }
                Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
                    offset = offset >>> 0;
                    byteLength = byteLength >>> 0;
                    if (!noAssert)
                        checkOffset(offset, byteLength, this.length);
                    var val = this[offset];
                    var mul = 1;
                    var i = 0;
                    while (++i < byteLength && (mul *= 256)) {
                        val += this[offset + i] * mul;
                    }
                    return val;
                };
                Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
                    offset = offset >>> 0;
                    byteLength = byteLength >>> 0;
                    if (!noAssert) {
                        checkOffset(offset, byteLength, this.length);
                    }
                    var val = this[offset + --byteLength];
                    var mul = 1;
                    while (byteLength > 0 && (mul *= 256)) {
                        val += this[offset + --byteLength] * mul;
                    }
                    return val;
                };
                Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkOffset(offset, 1, this.length);
                    return this[offset];
                };
                Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkOffset(offset, 2, this.length);
                    return this[offset] | this[offset + 1] << 8;
                };
                Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkOffset(offset, 2, this.length);
                    return this[offset] << 8 | this[offset + 1];
                };
                Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkOffset(offset, 4, this.length);
                    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
                };
                Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkOffset(offset, 4, this.length);
                    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
                };
                Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
                    offset = offset >>> 0;
                    byteLength = byteLength >>> 0;
                    if (!noAssert)
                        checkOffset(offset, byteLength, this.length);
                    var val = this[offset];
                    var mul = 1;
                    var i = 0;
                    while (++i < byteLength && (mul *= 256)) {
                        val += this[offset + i] * mul;
                    }
                    mul *= 128;
                    if (val >= mul)
                        val -= Math.pow(2, 8 * byteLength);
                    return val;
                };
                Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
                    offset = offset >>> 0;
                    byteLength = byteLength >>> 0;
                    if (!noAssert)
                        checkOffset(offset, byteLength, this.length);
                    var i = byteLength;
                    var mul = 1;
                    var val = this[offset + --i];
                    while (i > 0 && (mul *= 256)) {
                        val += this[offset + --i] * mul;
                    }
                    mul *= 128;
                    if (val >= mul)
                        val -= Math.pow(2, 8 * byteLength);
                    return val;
                };
                Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkOffset(offset, 1, this.length);
                    if (!(this[offset] & 128))
                        return this[offset];
                    return (255 - this[offset] + 1) * -1;
                };
                Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkOffset(offset, 2, this.length);
                    var val = this[offset] | this[offset + 1] << 8;
                    return val & 32768 ? val | 4294901760 : val;
                };
                Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkOffset(offset, 2, this.length);
                    var val = this[offset + 1] | this[offset] << 8;
                    return val & 32768 ? val | 4294901760 : val;
                };
                Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkOffset(offset, 4, this.length);
                    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
                };
                Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkOffset(offset, 4, this.length);
                    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
                };
                Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkOffset(offset, 4, this.length);
                    return ieee754.read(this, offset, true, 23, 4);
                };
                Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkOffset(offset, 4, this.length);
                    return ieee754.read(this, offset, false, 23, 4);
                };
                Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkOffset(offset, 8, this.length);
                    return ieee754.read(this, offset, true, 52, 8);
                };
                Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkOffset(offset, 8, this.length);
                    return ieee754.read(this, offset, false, 52, 8);
                };
                function checkInt(buf, value, offset, ext, max, min) {
                    if (!Buffer.isBuffer(buf))
                        throw new TypeError('"buffer" argument must be a Buffer instance');
                    if (value > max || value < min)
                        throw new RangeError('"value" argument is out of bounds');
                    if (offset + ext > buf.length)
                        throw new RangeError('Index out of range');
                }
                Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    byteLength = byteLength >>> 0;
                    if (!noAssert) {
                        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                        checkInt(this, value, offset, byteLength, maxBytes, 0);
                    }
                    var mul = 1;
                    var i = 0;
                    this[offset] = value & 255;
                    while (++i < byteLength && (mul *= 256)) {
                        this[offset + i] = value / mul & 255;
                    }
                    return offset + byteLength;
                };
                Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    byteLength = byteLength >>> 0;
                    if (!noAssert) {
                        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                        checkInt(this, value, offset, byteLength, maxBytes, 0);
                    }
                    var i = byteLength - 1;
                    var mul = 1;
                    this[offset + i] = value & 255;
                    while (--i >= 0 && (mul *= 256)) {
                        this[offset + i] = value / mul & 255;
                    }
                    return offset + byteLength;
                };
                Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkInt(this, value, offset, 1, 255, 0);
                    this[offset] = value & 255;
                    return offset + 1;
                };
                Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkInt(this, value, offset, 2, 65535, 0);
                    this[offset] = value & 255;
                    this[offset + 1] = value >>> 8;
                    return offset + 2;
                };
                Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkInt(this, value, offset, 2, 65535, 0);
                    this[offset] = value >>> 8;
                    this[offset + 1] = value & 255;
                    return offset + 2;
                };
                Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkInt(this, value, offset, 4, 4294967295, 0);
                    this[offset + 3] = value >>> 24;
                    this[offset + 2] = value >>> 16;
                    this[offset + 1] = value >>> 8;
                    this[offset] = value & 255;
                    return offset + 4;
                };
                Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkInt(this, value, offset, 4, 4294967295, 0);
                    this[offset] = value >>> 24;
                    this[offset + 1] = value >>> 16;
                    this[offset + 2] = value >>> 8;
                    this[offset + 3] = value & 255;
                    return offset + 4;
                };
                Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    if (!noAssert) {
                        var limit = Math.pow(2, 8 * byteLength - 1);
                        checkInt(this, value, offset, byteLength, limit - 1, -limit);
                    }
                    var i = 0;
                    var mul = 1;
                    var sub = 0;
                    this[offset] = value & 255;
                    while (++i < byteLength && (mul *= 256)) {
                        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                            sub = 1;
                        }
                        this[offset + i] = (value / mul >> 0) - sub & 255;
                    }
                    return offset + byteLength;
                };
                Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    if (!noAssert) {
                        var limit = Math.pow(2, 8 * byteLength - 1);
                        checkInt(this, value, offset, byteLength, limit - 1, -limit);
                    }
                    var i = byteLength - 1;
                    var mul = 1;
                    var sub = 0;
                    this[offset + i] = value & 255;
                    while (--i >= 0 && (mul *= 256)) {
                        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                            sub = 1;
                        }
                        this[offset + i] = (value / mul >> 0) - sub & 255;
                    }
                    return offset + byteLength;
                };
                Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkInt(this, value, offset, 1, 127, -128);
                    if (value < 0)
                        value = 255 + value + 1;
                    this[offset] = value & 255;
                    return offset + 1;
                };
                Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkInt(this, value, offset, 2, 32767, -32768);
                    this[offset] = value & 255;
                    this[offset + 1] = value >>> 8;
                    return offset + 2;
                };
                Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkInt(this, value, offset, 2, 32767, -32768);
                    this[offset] = value >>> 8;
                    this[offset + 1] = value & 255;
                    return offset + 2;
                };
                Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkInt(this, value, offset, 4, 2147483647, -2147483648);
                    this[offset] = value & 255;
                    this[offset + 1] = value >>> 8;
                    this[offset + 2] = value >>> 16;
                    this[offset + 3] = value >>> 24;
                    return offset + 4;
                };
                Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    if (!noAssert)
                        checkInt(this, value, offset, 4, 2147483647, -2147483648);
                    if (value < 0)
                        value = 4294967295 + value + 1;
                    this[offset] = value >>> 24;
                    this[offset + 1] = value >>> 16;
                    this[offset + 2] = value >>> 8;
                    this[offset + 3] = value & 255;
                    return offset + 4;
                };
                function checkIEEE754(buf, value, offset, ext, max, min) {
                    if (offset + ext > buf.length)
                        throw new RangeError('Index out of range');
                    if (offset < 0)
                        throw new RangeError('Index out of range');
                }
                function writeFloat(buf, value, offset, littleEndian, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    if (!noAssert) {
                        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
                    }
                    ieee754.write(buf, value, offset, littleEndian, 23, 4);
                    return offset + 4;
                }
                Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                    return writeFloat(this, value, offset, true, noAssert);
                };
                Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                    return writeFloat(this, value, offset, false, noAssert);
                };
                function writeDouble(buf, value, offset, littleEndian, noAssert) {
                    value = +value;
                    offset = offset >>> 0;
                    if (!noAssert) {
                        checkIEEE754(buf, value, offset, 8, 1.7976931348623157e+308, -1.7976931348623157e+308);
                    }
                    ieee754.write(buf, value, offset, littleEndian, 52, 8);
                    return offset + 8;
                }
                Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                    return writeDouble(this, value, offset, true, noAssert);
                };
                Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                    return writeDouble(this, value, offset, false, noAssert);
                };
                Buffer.prototype.copy = function copy(target, targetStart, start, end) {
                    if (!start)
                        start = 0;
                    if (!end && end !== 0)
                        end = this.length;
                    if (targetStart >= target.length)
                        targetStart = target.length;
                    if (!targetStart)
                        targetStart = 0;
                    if (end > 0 && end < start)
                        end = start;
                    if (end === start)
                        return 0;
                    if (target.length === 0 || this.length === 0)
                        return 0;
                    if (targetStart < 0) {
                        throw new RangeError('targetStart out of bounds');
                    }
                    if (start < 0 || start >= this.length)
                        throw new RangeError('sourceStart out of bounds');
                    if (end < 0)
                        throw new RangeError('sourceEnd out of bounds');
                    if (end > this.length)
                        end = this.length;
                    if (target.length - targetStart < end - start) {
                        end = target.length - targetStart + start;
                    }
                    var len = end - start;
                    var i;
                    if (this === target && start < targetStart && targetStart < end) {
                        for (i = len - 1; i >= 0; --i) {
                            target[i + targetStart] = this[i + start];
                        }
                    } else if (len < 1000) {
                        for (i = 0; i < len; ++i) {
                            target[i + targetStart] = this[i + start];
                        }
                    } else {
                        Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
                    }
                    return len;
                };
                Buffer.prototype.fill = function fill(val, start, end, encoding) {
                    if (typeof val === 'string') {
                        if (typeof start === 'string') {
                            encoding = start;
                            start = 0;
                            end = this.length;
                        } else if (typeof end === 'string') {
                            encoding = end;
                            end = this.length;
                        }
                        if (val.length === 1) {
                            var code = val.charCodeAt(0);
                            if (code < 256) {
                                val = code;
                            }
                        }
                        if (encoding !== undefined && typeof encoding !== 'string') {
                            throw new TypeError('encoding must be a string');
                        }
                        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                            throw new TypeError('Unknown encoding: ' + encoding);
                        }
                    } else if (typeof val === 'number') {
                        val = val & 255;
                    }
                    if (start < 0 || this.length < start || this.length < end) {
                        throw new RangeError('Out of range index');
                    }
                    if (end <= start) {
                        return this;
                    }
                    start = start >>> 0;
                    end = end === undefined ? this.length : end >>> 0;
                    if (!val)
                        val = 0;
                    var i;
                    if (typeof val === 'number') {
                        for (i = start; i < end; ++i) {
                            this[i] = val;
                        }
                    } else {
                        var bytes = Buffer.isBuffer(val) ? val : new Buffer(val, encoding);
                        var len = bytes.length;
                        for (i = 0; i < end - start; ++i) {
                            this[i + start] = bytes[i % len];
                        }
                    }
                    return this;
                };
                var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
                function base64clean(str) {
                    str = str.trim().replace(INVALID_BASE64_RE, '');
                    if (str.length < 2)
                        return '';
                    while (str.length % 4 !== 0) {
                        str = str + '=';
                    }
                    return str;
                }
                function toHex(n) {
                    if (n < 16)
                        return '0' + n.toString(16);
                    return n.toString(16);
                }
                function utf8ToBytes(string, units) {
                    units = units || Infinity;
                    var codePoint;
                    var length = string.length;
                    var leadSurrogate = null;
                    var bytes = [];
                    for (var i = 0; i < length; ++i) {
                        codePoint = string.charCodeAt(i);
                        if (codePoint > 55295 && codePoint < 57344) {
                            if (!leadSurrogate) {
                                if (codePoint > 56319) {
                                    if ((units -= 3) > -1)
                                        bytes.push(239, 191, 189);
                                    continue;
                                } else if (i + 1 === length) {
                                    if ((units -= 3) > -1)
                                        bytes.push(239, 191, 189);
                                    continue;
                                }
                                leadSurrogate = codePoint;
                                continue;
                            }
                            if (codePoint < 56320) {
                                if ((units -= 3) > -1)
                                    bytes.push(239, 191, 189);
                                leadSurrogate = codePoint;
                                continue;
                            }
                            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
                        } else if (leadSurrogate) {
                            if ((units -= 3) > -1)
                                bytes.push(239, 191, 189);
                        }
                        leadSurrogate = null;
                        if (codePoint < 128) {
                            if ((units -= 1) < 0)
                                break;
                            bytes.push(codePoint);
                        } else if (codePoint < 2048) {
                            if ((units -= 2) < 0)
                                break;
                            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
                        } else if (codePoint < 65536) {
                            if ((units -= 3) < 0)
                                break;
                            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                        } else if (codePoint < 1114112) {
                            if ((units -= 4) < 0)
                                break;
                            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                        } else {
                            throw new Error('Invalid code point');
                        }
                    }
                    return bytes;
                }
                function asciiToBytes(str) {
                    var byteArray = [];
                    for (var i = 0; i < str.length; ++i) {
                        byteArray.push(str.charCodeAt(i) & 255);
                    }
                    return byteArray;
                }
                function utf16leToBytes(str, units) {
                    var c, hi, lo;
                    var byteArray = [];
                    for (var i = 0; i < str.length; ++i) {
                        if ((units -= 2) < 0)
                            break;
                        c = str.charCodeAt(i);
                        hi = c >> 8;
                        lo = c % 256;
                        byteArray.push(lo);
                        byteArray.push(hi);
                    }
                    return byteArray;
                }
                function base64ToBytes(str) {
                    return base64.toByteArray(base64clean(str));
                }
                function blitBuffer(src, dst, offset, length) {
                    for (var i = 0; i < length; ++i) {
                        if (i + offset >= dst.length || i >= src.length)
                            break;
                        dst[i + offset] = src[i];
                    }
                    return i;
                }
                function isArrayBufferView(obj) {
                    return typeof ArrayBuffer.isView === 'function' && ArrayBuffer.isView(obj);
                }
                function numberIsNaN(obj) {
                    return obj !== obj;
                }
            },
            {
                'base64-js': 5,
                'ieee754': 55
            }
        ],
        9: [
            function (require, module, exports) {
                (function (Buffer) {
                    'use strict';
                    var fs = require('fs');
                    var path = require('path');
                    Object.defineProperty(exports, 'commentRegex', {
                        get: function getCommentRegex() {
                            return /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/mg;
                        }
                    });
                    Object.defineProperty(exports, 'mapFileCommentRegex', {
                        get: function getMapFileCommentRegex() {
                            return /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/mg;
                        }
                    });
                    function decodeBase64(base64) {
                        return new Buffer(base64, 'base64').toString();
                    }
                    function stripComment(sm) {
                        return sm.split(',').pop();
                    }
                    function readFromFileMap(sm, dir) {
                        var r = exports.mapFileCommentRegex.exec(sm);
                        var filename = r[1] || r[2];
                        var filepath = path.resolve(dir, filename);
                        try {
                            return fs.readFileSync(filepath, 'utf8');
                        } catch (e) {
                            throw new Error('An error occurred while trying to read the map file at ' + filepath + '\n' + e);
                        }
                    }
                    function Converter(sm, opts) {
                        opts = opts || {};
                        if (opts.isFileComment)
                            sm = readFromFileMap(sm, opts.commentFileDir);
                        if (opts.hasComment)
                            sm = stripComment(sm);
                        if (opts.isEncoded)
                            sm = decodeBase64(sm);
                        if (opts.isJSON || opts.isEncoded)
                            sm = JSON.parse(sm);
                        this.sourcemap = sm;
                    }
                    Converter.prototype.toJSON = function (space) {
                        return JSON.stringify(this.sourcemap, null, space);
                    };
                    Converter.prototype.toBase64 = function () {
                        var json = this.toJSON();
                        return new Buffer(json).toString('base64');
                    };
                    Converter.prototype.toComment = function (options) {
                        var base64 = this.toBase64();
                        var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
                        return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
                    };
                    Converter.prototype.toObject = function () {
                        return JSON.parse(this.toJSON());
                    };
                    Converter.prototype.addProperty = function (key, value) {
                        if (this.sourcemap.hasOwnProperty(key))
                            throw new Error('property %s already exists on the sourcemap, use set property instead');
                        return this.setProperty(key, value);
                    };
                    Converter.prototype.setProperty = function (key, value) {
                        this.sourcemap[key] = value;
                        return this;
                    };
                    Converter.prototype.getProperty = function (key) {
                        return this.sourcemap[key];
                    };
                    exports.fromObject = function (obj) {
                        return new Converter(obj);
                    };
                    exports.fromJSON = function (json) {
                        return new Converter(json, { isJSON: true });
                    };
                    exports.fromBase64 = function (base64) {
                        return new Converter(base64, { isEncoded: true });
                    };
                    exports.fromComment = function (comment) {
                        comment = comment.replace(/^\/\*/g, '//').replace(/\*\/$/g, '');
                        return new Converter(comment, {
                            isEncoded: true,
                            hasComment: true
                        });
                    };
                    exports.fromMapFileComment = function (comment, dir) {
                        return new Converter(comment, {
                            commentFileDir: dir,
                            isFileComment: true,
                            isJSON: true
                        });
                    };
                    exports.fromSource = function (content) {
                        var m = content.match(exports.commentRegex);
                        return m ? exports.fromComment(m.pop()) : null;
                    };
                    exports.fromMapFileSource = function (content, dir) {
                        var m = content.match(exports.mapFileCommentRegex);
                        return m ? exports.fromMapFileComment(m.pop(), dir) : null;
                    };
                    exports.removeComments = function (src) {
                        return src.replace(exports.commentRegex, '');
                    };
                    exports.removeMapFileComments = function (src) {
                        return src.replace(exports.mapFileCommentRegex, '');
                    };
                    exports.generateMapFileComment = function (file, options) {
                        var data = 'sourceMappingURL=' + file;
                        return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
                    };
                }.call(this, require('buffer').Buffer));
            },
            {
                'buffer': 8,
                'fs': 7,
                'path': 59
            }
        ],
        10: [
            function (require, module, exports) {
                (function (Buffer) {
                    function isArray(arg) {
                        if (Array.isArray) {
                            return Array.isArray(arg);
                        }
                        return objectToString(arg) === '[object Array]';
                    }
                    exports.isArray = isArray;
                    function isBoolean(arg) {
                        return typeof arg === 'boolean';
                    }
                    exports.isBoolean = isBoolean;
                    function isNull(arg) {
                        return arg === null;
                    }
                    exports.isNull = isNull;
                    function isNullOrUndefined(arg) {
                        return arg == null;
                    }
                    exports.isNullOrUndefined = isNullOrUndefined;
                    function isNumber(arg) {
                        return typeof arg === 'number';
                    }
                    exports.isNumber = isNumber;
                    function isString(arg) {
                        return typeof arg === 'string';
                    }
                    exports.isString = isString;
                    function isSymbol(arg) {
                        return typeof arg === 'symbol';
                    }
                    exports.isSymbol = isSymbol;
                    function isUndefined(arg) {
                        return arg === void 0;
                    }
                    exports.isUndefined = isUndefined;
                    function isRegExp(re) {
                        return objectToString(re) === '[object RegExp]';
                    }
                    exports.isRegExp = isRegExp;
                    function isObject(arg) {
                        return typeof arg === 'object' && arg !== null;
                    }
                    exports.isObject = isObject;
                    function isDate(d) {
                        return objectToString(d) === '[object Date]';
                    }
                    exports.isDate = isDate;
                    function isError(e) {
                        return objectToString(e) === '[object Error]' || e instanceof Error;
                    }
                    exports.isError = isError;
                    function isFunction(arg) {
                        return typeof arg === 'function';
                    }
                    exports.isFunction = isFunction;
                    function isPrimitive(arg) {
                        return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
                    }
                    exports.isPrimitive = isPrimitive;
                    exports.isBuffer = Buffer.isBuffer;
                    function objectToString(o) {
                        return Object.prototype.toString.call(o);
                    }
                }.call(this, { 'isBuffer': require('../../is-buffer/index.js') }));
            },
            { '../../is-buffer/index.js': 57 }
        ],
        11: [
            function (require, module, exports) {
                var ElementType = require('domelementtype');
                var entities = require('entities');
                var booleanAttributes = {
                    __proto__: null,
                    allowfullscreen: true,
                    async: true,
                    autofocus: true,
                    autoplay: true,
                    checked: true,
                    controls: true,
                    default: true,
                    defer: true,
                    disabled: true,
                    hidden: true,
                    ismap: true,
                    loop: true,
                    multiple: true,
                    muted: true,
                    open: true,
                    readonly: true,
                    required: true,
                    reversed: true,
                    scoped: true,
                    seamless: true,
                    selected: true,
                    typemustmatch: true
                };
                var unencodedElements = {
                    __proto__: null,
                    style: true,
                    script: true,
                    xmp: true,
                    iframe: true,
                    noembed: true,
                    noframes: true,
                    plaintext: true,
                    noscript: true
                };
                function formatAttrs(attributes, opts) {
                    if (!attributes)
                        return;
                    var output = '', value;
                    for (var key in attributes) {
                        value = attributes[key];
                        if (output) {
                            output += ' ';
                        }
                        if (!value && booleanAttributes[key]) {
                            output += key;
                        } else {
                            output += key + '="' + (opts.decodeEntities ? entities.encodeXML(value) : value) + '"';
                        }
                    }
                    return output;
                }
                var singleTag = {
                    __proto__: null,
                    area: true,
                    base: true,
                    basefont: true,
                    br: true,
                    col: true,
                    command: true,
                    embed: true,
                    frame: true,
                    hr: true,
                    img: true,
                    input: true,
                    isindex: true,
                    keygen: true,
                    link: true,
                    meta: true,
                    param: true,
                    source: true,
                    track: true,
                    wbr: true
                };
                var render = module.exports = function (dom, opts) {
                    if (!Array.isArray(dom) && !dom.cheerio)
                        dom = [dom];
                    opts = opts || {};
                    var output = '';
                    for (var i = 0; i < dom.length; i++) {
                        var elem = dom[i];
                        if (elem.type === 'root')
                            output += render(elem.children, opts);
                        else if (ElementType.isTag(elem))
                            output += renderTag(elem, opts);
                        else if (elem.type === ElementType.Directive)
                            output += renderDirective(elem);
                        else if (elem.type === ElementType.Comment)
                            output += renderComment(elem);
                        else if (elem.type === ElementType.CDATA)
                            output += renderCdata(elem);
                        else
                            output += renderText(elem, opts);
                    }
                    return output;
                };
                function renderTag(elem, opts) {
                    if (elem.name === 'svg')
                        opts = {
                            decodeEntities: opts.decodeEntities,
                            xmlMode: true
                        };
                    var tag = '<' + elem.name, attribs = formatAttrs(elem.attribs, opts);
                    if (attribs) {
                        tag += ' ' + attribs;
                    }
                    if (opts.xmlMode && (!elem.children || elem.children.length === 0)) {
                        tag += '/>';
                    } else {
                        tag += '>';
                        if (elem.children) {
                            tag += render(elem.children, opts);
                        }
                        if (!singleTag[elem.name] || opts.xmlMode) {
                            tag += '</' + elem.name + '>';
                        }
                    }
                    return tag;
                }
                function renderDirective(elem) {
                    return '<' + elem.data + '>';
                }
                function renderText(elem, opts) {
                    var data = elem.data || '';
                    if (opts.decodeEntities && !(elem.parent && elem.parent.name in unencodedElements)) {
                        data = entities.encodeXML(data);
                    }
                    return data;
                }
                function renderCdata(elem) {
                    return '<![CDATA[' + elem.children[0].data + ']]>';
                }
                function renderComment(elem) {
                    return '<!--' + elem.data + '-->';
                }
            },
            {
                'domelementtype': 12,
                'entities': 24
            }
        ],
        12: [
            function (require, module, exports) {
                module.exports = {
                    Text: 'text',
                    Directive: 'directive',
                    Comment: 'comment',
                    Script: 'script',
                    Style: 'style',
                    Tag: 'tag',
                    CDATA: 'cdata',
                    isTag: function (elem) {
                        return elem.type === 'tag' || elem.type === 'script' || elem.type === 'style';
                    }
                };
            },
            {}
        ],
        13: [
            function (require, module, exports) {
                module.exports = {
                    Text: 'text',
                    Directive: 'directive',
                    Comment: 'comment',
                    Script: 'script',
                    Style: 'style',
                    Tag: 'tag',
                    CDATA: 'cdata',
                    Doctype: 'doctype',
                    isTag: function (elem) {
                        return elem.type === 'tag' || elem.type === 'script' || elem.type === 'style';
                    }
                };
            },
            {}
        ],
        14: [
            function (require, module, exports) {
                var ElementType = require('domelementtype');
                var re_whitespace = /\s+/g;
                var NodePrototype = require('./lib/node');
                var ElementPrototype = require('./lib/element');
                function DomHandler(callback, options, elementCB) {
                    if (typeof callback === 'object') {
                        elementCB = options;
                        options = callback;
                        callback = null;
                    } else if (typeof options === 'function') {
                        elementCB = options;
                        options = defaultOpts;
                    }
                    this._callback = callback;
                    this._options = options || defaultOpts;
                    this._elementCB = elementCB;
                    this.dom = [];
                    this._done = false;
                    this._tagStack = [];
                    this._parser = this._parser || null;
                }
                var defaultOpts = {
                    normalizeWhitespace: false,
                    withStartIndices: false,
                    withEndIndices: false
                };
                DomHandler.prototype.onparserinit = function (parser) {
                    this._parser = parser;
                };
                DomHandler.prototype.onreset = function () {
                    DomHandler.call(this, this._callback, this._options, this._elementCB);
                };
                DomHandler.prototype.onend = function () {
                    if (this._done)
                        return;
                    this._done = true;
                    this._parser = null;
                    this._handleCallback(null);
                };
                DomHandler.prototype._handleCallback = DomHandler.prototype.onerror = function (error) {
                    if (typeof this._callback === 'function') {
                        this._callback(error, this.dom);
                    } else {
                        if (error)
                            throw error;
                    }
                };
                DomHandler.prototype.onclosetag = function () {
                    var elem = this._tagStack.pop();
                    if (this._options.withEndIndices) {
                        elem.endIndex = this._parser.endIndex;
                    }
                    if (this._elementCB)
                        this._elementCB(elem);
                };
                DomHandler.prototype._createDomElement = function (properties) {
                    if (!this._options.withDomLvl1)
                        return properties;
                    var element;
                    if (properties.type === 'tag') {
                        element = Object.create(ElementPrototype);
                    } else {
                        element = Object.create(NodePrototype);
                    }
                    for (var key in properties) {
                        if (properties.hasOwnProperty(key)) {
                            element[key] = properties[key];
                        }
                    }
                    return element;
                };
                DomHandler.prototype._addDomElement = function (element) {
                    var parent = this._tagStack[this._tagStack.length - 1];
                    var siblings = parent ? parent.children : this.dom;
                    var previousSibling = siblings[siblings.length - 1];
                    element.next = null;
                    if (this._options.withStartIndices) {
                        element.startIndex = this._parser.startIndex;
                    }
                    if (this._options.withEndIndices) {
                        element.endIndex = this._parser.endIndex;
                    }
                    if (previousSibling) {
                        element.prev = previousSibling;
                        previousSibling.next = element;
                    } else {
                        element.prev = null;
                    }
                    siblings.push(element);
                    element.parent = parent || null;
                };
                DomHandler.prototype.onopentag = function (name, attribs) {
                    var properties = {
                        type: name === 'script' ? ElementType.Script : name === 'style' ? ElementType.Style : ElementType.Tag,
                        name: name,
                        attribs: attribs,
                        children: []
                    };
                    var element = this._createDomElement(properties);
                    this._addDomElement(element);
                    this._tagStack.push(element);
                };
                DomHandler.prototype.ontext = function (data) {
                    var normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;
                    var lastTag;
                    if (!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length - 1]).type === ElementType.Text) {
                        if (normalize) {
                            lastTag.data = (lastTag.data + data).replace(re_whitespace, ' ');
                        } else {
                            lastTag.data += data;
                        }
                    } else {
                        if (this._tagStack.length && (lastTag = this._tagStack[this._tagStack.length - 1]) && (lastTag = lastTag.children[lastTag.children.length - 1]) && lastTag.type === ElementType.Text) {
                            if (normalize) {
                                lastTag.data = (lastTag.data + data).replace(re_whitespace, ' ');
                            } else {
                                lastTag.data += data;
                            }
                        } else {
                            if (normalize) {
                                data = data.replace(re_whitespace, ' ');
                            }
                            var element = this._createDomElement({
                                data: data,
                                type: ElementType.Text
                            });
                            this._addDomElement(element);
                        }
                    }
                };
                DomHandler.prototype.oncomment = function (data) {
                    var lastTag = this._tagStack[this._tagStack.length - 1];
                    if (lastTag && lastTag.type === ElementType.Comment) {
                        lastTag.data += data;
                        return;
                    }
                    var properties = {
                        data: data,
                        type: ElementType.Comment
                    };
                    var element = this._createDomElement(properties);
                    this._addDomElement(element);
                    this._tagStack.push(element);
                };
                DomHandler.prototype.oncdatastart = function () {
                    var properties = {
                        children: [{
                                data: '',
                                type: ElementType.Text
                            }],
                        type: ElementType.CDATA
                    };
                    var element = this._createDomElement(properties);
                    this._addDomElement(element);
                    this._tagStack.push(element);
                };
                DomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function () {
                    this._tagStack.pop();
                };
                DomHandler.prototype.onprocessinginstruction = function (name, data) {
                    var element = this._createDomElement({
                        name: name,
                        data: data,
                        type: ElementType.Directive
                    });
                    this._addDomElement(element);
                };
                module.exports = DomHandler;
            },
            {
                './lib/element': 15,
                './lib/node': 16,
                'domelementtype': 13
            }
        ],
        15: [
            function (require, module, exports) {
                var NodePrototype = require('./node');
                var ElementPrototype = module.exports = Object.create(NodePrototype);
                var domLvl1 = { tagName: 'name' };
                Object.keys(domLvl1).forEach(function (key) {
                    var shorthand = domLvl1[key];
                    Object.defineProperty(ElementPrototype, key, {
                        get: function () {
                            return this[shorthand] || null;
                        },
                        set: function (val) {
                            this[shorthand] = val;
                            return val;
                        }
                    });
                });
            },
            { './node': 16 }
        ],
        16: [
            function (require, module, exports) {
                var NodePrototype = module.exports = {
                    get firstChild() {
                        var children = this.children;
                        return children && children[0] || null;
                    },
                    get lastChild() {
                        var children = this.children;
                        return children && children[children.length - 1] || null;
                    },
                    get nodeType() {
                        return nodeTypes[this.type] || nodeTypes.element;
                    }
                };
                var domLvl1 = {
                    tagName: 'name',
                    childNodes: 'children',
                    parentNode: 'parent',
                    previousSibling: 'prev',
                    nextSibling: 'next',
                    nodeValue: 'data'
                };
                var nodeTypes = {
                    element: 1,
                    text: 3,
                    cdata: 4,
                    comment: 8
                };
                Object.keys(domLvl1).forEach(function (key) {
                    var shorthand = domLvl1[key];
                    Object.defineProperty(NodePrototype, key, {
                        get: function () {
                            return this[shorthand] || null;
                        },
                        set: function (val) {
                            this[shorthand] = val;
                            return val;
                        }
                    });
                });
            },
            {}
        ],
        17: [
            function (require, module, exports) {
                var DomUtils = module.exports;
                [
                    require('./lib/stringify'),
                    require('./lib/traversal'),
                    require('./lib/manipulation'),
                    require('./lib/querying'),
                    require('./lib/legacy'),
                    require('./lib/helpers')
                ].forEach(function (ext) {
                    Object.keys(ext).forEach(function (key) {
                        DomUtils[key] = ext[key].bind(DomUtils);
                    });
                });
            },
            {
                './lib/helpers': 18,
                './lib/legacy': 19,
                './lib/manipulation': 20,
                './lib/querying': 21,
                './lib/stringify': 22,
                './lib/traversal': 23
            }
        ],
        18: [
            function (require, module, exports) {
                exports.removeSubsets = function (nodes) {
                    var idx = nodes.length, node, ancestor, replace;
                    while (--idx > -1) {
                        node = ancestor = nodes[idx];
                        nodes[idx] = null;
                        replace = true;
                        while (ancestor) {
                            if (nodes.indexOf(ancestor) > -1) {
                                replace = false;
                                nodes.splice(idx, 1);
                                break;
                            }
                            ancestor = ancestor.parent;
                        }
                        if (replace) {
                            nodes[idx] = node;
                        }
                    }
                    return nodes;
                };
                var POSITION = {
                    DISCONNECTED: 1,
                    PRECEDING: 2,
                    FOLLOWING: 4,
                    CONTAINS: 8,
                    CONTAINED_BY: 16
                };
                var comparePos = exports.compareDocumentPosition = function (nodeA, nodeB) {
                    var aParents = [];
                    var bParents = [];
                    var current, sharedParent, siblings, aSibling, bSibling, idx;
                    if (nodeA === nodeB) {
                        return 0;
                    }
                    current = nodeA;
                    while (current) {
                        aParents.unshift(current);
                        current = current.parent;
                    }
                    current = nodeB;
                    while (current) {
                        bParents.unshift(current);
                        current = current.parent;
                    }
                    idx = 0;
                    while (aParents[idx] === bParents[idx]) {
                        idx++;
                    }
                    if (idx === 0) {
                        return POSITION.DISCONNECTED;
                    }
                    sharedParent = aParents[idx - 1];
                    siblings = sharedParent.children;
                    aSibling = aParents[idx];
                    bSibling = bParents[idx];
                    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
                        if (sharedParent === nodeB) {
                            return POSITION.FOLLOWING | POSITION.CONTAINED_BY;
                        }
                        return POSITION.FOLLOWING;
                    } else {
                        if (sharedParent === nodeA) {
                            return POSITION.PRECEDING | POSITION.CONTAINS;
                        }
                        return POSITION.PRECEDING;
                    }
                };
                exports.uniqueSort = function (nodes) {
                    var idx = nodes.length, node, position;
                    nodes = nodes.slice();
                    while (--idx > -1) {
                        node = nodes[idx];
                        position = nodes.indexOf(node);
                        if (position > -1 && position < idx) {
                            nodes.splice(idx, 1);
                        }
                    }
                    nodes.sort(function (a, b) {
                        var relative = comparePos(a, b);
                        if (relative & POSITION.PRECEDING) {
                            return -1;
                        } else if (relative & POSITION.FOLLOWING) {
                            return 1;
                        }
                        return 0;
                    });
                    return nodes;
                };
            },
            {}
        ],
        19: [
            function (require, module, exports) {
                var ElementType = require('domelementtype');
                var isTag = exports.isTag = ElementType.isTag;
                exports.testElement = function (options, element) {
                    for (var key in options) {
                        if (!options.hasOwnProperty(key));
                        else if (key === 'tag_name') {
                            if (!isTag(element) || !options.tag_name(element.name)) {
                                return false;
                            }
                        } else if (key === 'tag_type') {
                            if (!options.tag_type(element.type))
                                return false;
                        } else if (key === 'tag_contains') {
                            if (isTag(element) || !options.tag_contains(element.data)) {
                                return false;
                            }
                        } else if (!element.attribs || !options[key](element.attribs[key])) {
                            return false;
                        }
                    }
                    return true;
                };
                var Checks = {
                    tag_name: function (name) {
                        if (typeof name === 'function') {
                            return function (elem) {
                                return isTag(elem) && name(elem.name);
                            };
                        } else if (name === '*') {
                            return isTag;
                        } else {
                            return function (elem) {
                                return isTag(elem) && elem.name === name;
                            };
                        }
                    },
                    tag_type: function (type) {
                        if (typeof type === 'function') {
                            return function (elem) {
                                return type(elem.type);
                            };
                        } else {
                            return function (elem) {
                                return elem.type === type;
                            };
                        }
                    },
                    tag_contains: function (data) {
                        if (typeof data === 'function') {
                            return function (elem) {
                                return !isTag(elem) && data(elem.data);
                            };
                        } else {
                            return function (elem) {
                                return !isTag(elem) && elem.data === data;
                            };
                        }
                    }
                };
                function getAttribCheck(attrib, value) {
                    if (typeof value === 'function') {
                        return function (elem) {
                            return elem.attribs && value(elem.attribs[attrib]);
                        };
                    } else {
                        return function (elem) {
                            return elem.attribs && elem.attribs[attrib] === value;
                        };
                    }
                }
                function combineFuncs(a, b) {
                    return function (elem) {
                        return a(elem) || b(elem);
                    };
                }
                exports.getElements = function (options, element, recurse, limit) {
                    var funcs = Object.keys(options).map(function (key) {
                        var value = options[key];
                        return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
                    });
                    return funcs.length === 0 ? [] : this.filter(funcs.reduce(combineFuncs), element, recurse, limit);
                };
                exports.getElementById = function (id, element, recurse) {
                    if (!Array.isArray(element))
                        element = [element];
                    return this.findOne(getAttribCheck('id', id), element, recurse !== false);
                };
                exports.getElementsByTagName = function (name, element, recurse, limit) {
                    return this.filter(Checks.tag_name(name), element, recurse, limit);
                };
                exports.getElementsByTagType = function (type, element, recurse, limit) {
                    return this.filter(Checks.tag_type(type), element, recurse, limit);
                };
            },
            { 'domelementtype': 13 }
        ],
        20: [
            function (require, module, exports) {
                exports.removeElement = function (elem) {
                    if (elem.prev)
                        elem.prev.next = elem.next;
                    if (elem.next)
                        elem.next.prev = elem.prev;
                    if (elem.parent) {
                        var childs = elem.parent.children;
                        childs.splice(childs.lastIndexOf(elem), 1);
                    }
                };
                exports.replaceElement = function (elem, replacement) {
                    var prev = replacement.prev = elem.prev;
                    if (prev) {
                        prev.next = replacement;
                    }
                    var next = replacement.next = elem.next;
                    if (next) {
                        next.prev = replacement;
                    }
                    var parent = replacement.parent = elem.parent;
                    if (parent) {
                        var childs = parent.children;
                        childs[childs.lastIndexOf(elem)] = replacement;
                    }
                };
                exports.appendChild = function (elem, child) {
                    child.parent = elem;
                    if (elem.children.push(child) !== 1) {
                        var sibling = elem.children[elem.children.length - 2];
                        sibling.next = child;
                        child.prev = sibling;
                        child.next = null;
                    }
                };
                exports.append = function (elem, next) {
                    var parent = elem.parent, currNext = elem.next;
                    next.next = currNext;
                    next.prev = elem;
                    elem.next = next;
                    next.parent = parent;
                    if (currNext) {
                        currNext.prev = next;
                        if (parent) {
                            var childs = parent.children;
                            childs.splice(childs.lastIndexOf(currNext), 0, next);
                        }
                    } else if (parent) {
                        parent.children.push(next);
                    }
                };
                exports.prepend = function (elem, prev) {
                    var parent = elem.parent;
                    if (parent) {
                        var childs = parent.children;
                        childs.splice(childs.lastIndexOf(elem), 0, prev);
                    }
                    if (elem.prev) {
                        elem.prev.next = prev;
                    }
                    prev.parent = parent;
                    prev.prev = elem.prev;
                    prev.next = elem;
                    elem.prev = prev;
                };
            },
            {}
        ],
        21: [
            function (require, module, exports) {
                var isTag = require('domelementtype').isTag;
                module.exports = {
                    filter: filter,
                    find: find,
                    findOneChild: findOneChild,
                    findOne: findOne,
                    existsOne: existsOne,
                    findAll: findAll
                };
                function filter(test, element, recurse, limit) {
                    if (!Array.isArray(element))
                        element = [element];
                    if (typeof limit !== 'number' || !isFinite(limit)) {
                        limit = Infinity;
                    }
                    return find(test, element, recurse !== false, limit);
                }
                function find(test, elems, recurse, limit) {
                    var result = [], childs;
                    for (var i = 0, j = elems.length; i < j; i++) {
                        if (test(elems[i])) {
                            result.push(elems[i]);
                            if (--limit <= 0)
                                break;
                        }
                        childs = elems[i].children;
                        if (recurse && childs && childs.length > 0) {
                            childs = find(test, childs, recurse, limit);
                            result = result.concat(childs);
                            limit -= childs.length;
                            if (limit <= 0)
                                break;
                        }
                    }
                    return result;
                }
                function findOneChild(test, elems) {
                    for (var i = 0, l = elems.length; i < l; i++) {
                        if (test(elems[i]))
                            return elems[i];
                    }
                    return null;
                }
                function findOne(test, elems) {
                    var elem = null;
                    for (var i = 0, l = elems.length; i < l && !elem; i++) {
                        if (!isTag(elems[i])) {
                            continue;
                        } else if (test(elems[i])) {
                            elem = elems[i];
                        } else if (elems[i].children.length > 0) {
                            elem = findOne(test, elems[i].children);
                        }
                    }
                    return elem;
                }
                function existsOne(test, elems) {
                    for (var i = 0, l = elems.length; i < l; i++) {
                        if (isTag(elems[i]) && (test(elems[i]) || elems[i].children.length > 0 && existsOne(test, elems[i].children))) {
                            return true;
                        }
                    }
                    return false;
                }
                function findAll(test, rootElems) {
                    var result = [];
                    var stack = [rootElems];
                    while (stack.length) {
                        var elems = stack.pop();
                        for (var i = 0, j = elems.length; i < j; i++) {
                            if (!isTag(elems[i]))
                                continue;
                            if (test(elems[i]))
                                result.push(elems[i]);
                        }
                        while (j-- > 0) {
                            if (elems[j].children && elems[j].children.length > 0) {
                                stack.push(elems[j].children);
                            }
                        }
                    }
                    return result;
                }
            },
            { 'domelementtype': 13 }
        ],
        22: [
            function (require, module, exports) {
                var ElementType = require('domelementtype'), getOuterHTML = require('dom-serializer'), isTag = ElementType.isTag;
                module.exports = {
                    getInnerHTML: getInnerHTML,
                    getOuterHTML: getOuterHTML,
                    getText: getText
                };
                function getInnerHTML(elem, opts) {
                    return elem.children ? elem.children.map(function (elem) {
                        return getOuterHTML(elem, opts);
                    }).join('') : '';
                }
                function getText(elem) {
                    if (Array.isArray(elem))
                        return elem.map(getText).join('');
                    if (isTag(elem))
                        return elem.name === 'br' ? '\n' : getText(elem.children);
                    if (elem.type === ElementType.CDATA)
                        return getText(elem.children);
                    if (elem.type === ElementType.Text)
                        return elem.data;
                    return '';
                }
            },
            {
                'dom-serializer': 11,
                'domelementtype': 13
            }
        ],
        23: [
            function (require, module, exports) {
                var getChildren = exports.getChildren = function (elem) {
                    return elem.children;
                };
                var getParent = exports.getParent = function (elem) {
                    return elem.parent;
                };
                exports.getSiblings = function (elem) {
                    var parent = getParent(elem);
                    return parent ? getChildren(parent) : [elem];
                };
                exports.getAttributeValue = function (elem, name) {
                    return elem.attribs && elem.attribs[name];
                };
                exports.hasAttrib = function (elem, name) {
                    return !!elem.attribs && hasOwnProperty.call(elem.attribs, name);
                };
                exports.getName = function (elem) {
                    return elem.name;
                };
            },
            {}
        ],
        24: [
            function (require, module, exports) {
                var encode = require('./lib/encode.js'), decode = require('./lib/decode.js');
                exports.decode = function (data, level) {
                    return (!level || level <= 0 ? decode.XML : decode.HTML)(data);
                };
                exports.decodeStrict = function (data, level) {
                    return (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data);
                };
                exports.encode = function (data, level) {
                    return (!level || level <= 0 ? encode.XML : encode.HTML)(data);
                };
                exports.encodeXML = encode.XML;
                exports.encodeHTML4 = exports.encodeHTML5 = exports.encodeHTML = encode.HTML;
                exports.decodeXML = exports.decodeXMLStrict = decode.XML;
                exports.decodeHTML4 = exports.decodeHTML5 = exports.decodeHTML = decode.HTML;
                exports.decodeHTML4Strict = exports.decodeHTML5Strict = exports.decodeHTMLStrict = decode.HTMLStrict;
                exports.escape = encode.escape;
            },
            {
                './lib/decode.js': 25,
                './lib/encode.js': 27
            }
        ],
        25: [
            function (require, module, exports) {
                var entityMap = require('../maps/entities.json'), legacyMap = require('../maps/legacy.json'), xmlMap = require('../maps/xml.json'), decodeCodePoint = require('./decode_codepoint.js');
                var decodeXMLStrict = getStrictDecoder(xmlMap), decodeHTMLStrict = getStrictDecoder(entityMap);
                function getStrictDecoder(map) {
                    var keys = Object.keys(map).join('|'), replace = getReplacer(map);
                    keys += '|#[xX][\\da-fA-F]+|#\\d+';
                    var re = new RegExp('&(?:' + keys + ');', 'g');
                    return function (str) {
                        return String(str).replace(re, replace);
                    };
                }
                var decodeHTML = function () {
                    var legacy = Object.keys(legacyMap).sort(sorter);
                    var keys = Object.keys(entityMap).sort(sorter);
                    for (var i = 0, j = 0; i < keys.length; i++) {
                        if (legacy[j] === keys[i]) {
                            keys[i] += ';?';
                            j++;
                        } else {
                            keys[i] += ';';
                        }
                    }
                    var re = new RegExp('&(?:' + keys.join('|') + '|#[xX][\\da-fA-F]+;?|#\\d+;?)', 'g'), replace = getReplacer(entityMap);
                    function replacer(str) {
                        if (str.substr(-1) !== ';')
                            str += ';';
                        return replace(str);
                    }
                    return function (str) {
                        return String(str).replace(re, replacer);
                    };
                }();
                function sorter(a, b) {
                    return a < b ? 1 : -1;
                }
                function getReplacer(map) {
                    return function replace(str) {
                        if (str.charAt(1) === '#') {
                            if (str.charAt(2) === 'X' || str.charAt(2) === 'x') {
                                return decodeCodePoint(parseInt(str.substr(3), 16));
                            }
                            return decodeCodePoint(parseInt(str.substr(2), 10));
                        }
                        return map[str.slice(1, -1)];
                    };
                }
                module.exports = {
                    XML: decodeXMLStrict,
                    HTML: decodeHTML,
                    HTMLStrict: decodeHTMLStrict
                };
            },
            {
                '../maps/entities.json': 29,
                '../maps/legacy.json': 30,
                '../maps/xml.json': 31,
                './decode_codepoint.js': 26
            }
        ],
        26: [
            function (require, module, exports) {
                var decodeMap = require('../maps/decode.json');
                module.exports = decodeCodePoint;
                function decodeCodePoint(codePoint) {
                    if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
                        return '\uFFFD';
                    }
                    if (codePoint in decodeMap) {
                        codePoint = decodeMap[codePoint];
                    }
                    var output = '';
                    if (codePoint > 65535) {
                        codePoint -= 65536;
                        output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
                        codePoint = 56320 | codePoint & 1023;
                    }
                    output += String.fromCharCode(codePoint);
                    return output;
                }
            },
            { '../maps/decode.json': 28 }
        ],
        27: [
            function (require, module, exports) {
                var inverseXML = getInverseObj(require('../maps/xml.json')), xmlReplacer = getInverseReplacer(inverseXML);
                exports.XML = getInverse(inverseXML, xmlReplacer);
                var inverseHTML = getInverseObj(require('../maps/entities.json')), htmlReplacer = getInverseReplacer(inverseHTML);
                exports.HTML = getInverse(inverseHTML, htmlReplacer);
                function getInverseObj(obj) {
                    return Object.keys(obj).sort().reduce(function (inverse, name) {
                        inverse[obj[name]] = '&' + name + ';';
                        return inverse;
                    }, {});
                }
                function getInverseReplacer(inverse) {
                    var single = [], multiple = [];
                    Object.keys(inverse).forEach(function (k) {
                        if (k.length === 1) {
                            single.push('\\' + k);
                        } else {
                            multiple.push(k);
                        }
                    });
                    multiple.unshift('[' + single.join('') + ']');
                    return new RegExp(multiple.join('|'), 'g');
                }
                var re_nonASCII = /[^\0-\x7F]/g, re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
                function singleCharReplacer(c) {
                    return '&#x' + c.charCodeAt(0).toString(16).toUpperCase() + ';';
                }
                function astralReplacer(c) {
                    var high = c.charCodeAt(0);
                    var low = c.charCodeAt(1);
                    var codePoint = (high - 55296) * 1024 + low - 56320 + 65536;
                    return '&#x' + codePoint.toString(16).toUpperCase() + ';';
                }
                function getInverse(inverse, re) {
                    function func(name) {
                        return inverse[name];
                    }
                    return function (data) {
                        return data.replace(re, func).replace(re_astralSymbols, astralReplacer).replace(re_nonASCII, singleCharReplacer);
                    };
                }
                var re_xmlChars = getInverseReplacer(inverseXML);
                function escapeXML(data) {
                    return data.replace(re_xmlChars, singleCharReplacer).replace(re_astralSymbols, astralReplacer).replace(re_nonASCII, singleCharReplacer);
                }
                exports.escape = escapeXML;
            },
            {
                '../maps/entities.json': 29,
                '../maps/xml.json': 31
            }
        ],
        28: [
            function (require, module, exports) {
                module.exports = {
                    '0': 65533,
                    '128': 8364,
                    '130': 8218,
                    '131': 402,
                    '132': 8222,
                    '133': 8230,
                    '134': 8224,
                    '135': 8225,
                    '136': 710,
                    '137': 8240,
                    '138': 352,
                    '139': 8249,
                    '140': 338,
                    '142': 381,
                    '145': 8216,
                    '146': 8217,
                    '147': 8220,
                    '148': 8221,
                    '149': 8226,
                    '150': 8211,
                    '151': 8212,
                    '152': 732,
                    '153': 8482,
                    '154': 353,
                    '155': 8250,
                    '156': 339,
                    '158': 382,
                    '159': 376
                };
            },
            {}
        ],
        29: [
            function (require, module, exports) {
                module.exports = {
                    'Aacute': 'Á',
                    'aacute': 'á',
                    'Abreve': 'Ă',
                    'abreve': 'ă',
                    'ac': '\u223E',
                    'acd': '\u223F',
                    'acE': '\u223E̳',
                    'Acirc': 'Â',
                    'acirc': 'â',
                    'acute': '\xB4',
                    'Acy': 'А',
                    'acy': 'а',
                    'AElig': 'Æ',
                    'aelig': 'æ',
                    'af': '\u2061',
                    'Afr': '\uD835\uDD04',
                    'afr': '\uD835\uDD1E',
                    'Agrave': 'À',
                    'agrave': 'à',
                    'alefsym': 'ℵ',
                    'aleph': 'ℵ',
                    'Alpha': 'Α',
                    'alpha': 'α',
                    'Amacr': 'Ā',
                    'amacr': 'ā',
                    'amalg': '\u2A3F',
                    'amp': '&',
                    'AMP': '&',
                    'andand': '\u2A55',
                    'And': '\u2A53',
                    'and': '\u2227',
                    'andd': '\u2A5C',
                    'andslope': '\u2A58',
                    'andv': '\u2A5A',
                    'ang': '\u2220',
                    'ange': '\u29A4',
                    'angle': '\u2220',
                    'angmsdaa': '\u29A8',
                    'angmsdab': '\u29A9',
                    'angmsdac': '\u29AA',
                    'angmsdad': '\u29AB',
                    'angmsdae': '\u29AC',
                    'angmsdaf': '\u29AD',
                    'angmsdag': '\u29AE',
                    'angmsdah': '\u29AF',
                    'angmsd': '\u2221',
                    'angrt': '\u221F',
                    'angrtvb': '\u22BE',
                    'angrtvbd': '\u299D',
                    'angsph': '\u2222',
                    'angst': 'Å',
                    'angzarr': '\u237C',
                    'Aogon': 'Ą',
                    'aogon': 'ą',
                    'Aopf': '\uD835\uDD38',
                    'aopf': '\uD835\uDD52',
                    'apacir': '\u2A6F',
                    'ap': '\u2248',
                    'apE': '\u2A70',
                    'ape': '\u224A',
                    'apid': '\u224B',
                    'apos': '\'',
                    'ApplyFunction': '\u2061',
                    'approx': '\u2248',
                    'approxeq': '\u224A',
                    'Aring': 'Å',
                    'aring': 'å',
                    'Ascr': '\uD835\uDC9C',
                    'ascr': '\uD835\uDCB6',
                    'Assign': '\u2254',
                    'ast': '*',
                    'asymp': '\u2248',
                    'asympeq': '\u224D',
                    'Atilde': 'Ã',
                    'atilde': 'ã',
                    'Auml': 'Ä',
                    'auml': 'ä',
                    'awconint': '\u2233',
                    'awint': '\u2A11',
                    'backcong': '\u224C',
                    'backepsilon': '\u03F6',
                    'backprime': '\u2035',
                    'backsim': '\u223D',
                    'backsimeq': '\u22CD',
                    'Backslash': '\u2216',
                    'Barv': '\u2AE7',
                    'barvee': '\u22BD',
                    'barwed': '\u2305',
                    'Barwed': '\u2306',
                    'barwedge': '\u2305',
                    'bbrk': '\u23B5',
                    'bbrktbrk': '\u23B6',
                    'bcong': '\u224C',
                    'Bcy': 'Б',
                    'bcy': 'б',
                    'bdquo': '\u201E',
                    'becaus': '\u2235',
                    'because': '\u2235',
                    'Because': '\u2235',
                    'bemptyv': '\u29B0',
                    'bepsi': '\u03F6',
                    'bernou': 'ℬ',
                    'Bernoullis': 'ℬ',
                    'Beta': 'Β',
                    'beta': 'β',
                    'beth': 'ℶ',
                    'between': '\u226C',
                    'Bfr': '\uD835\uDD05',
                    'bfr': '\uD835\uDD1F',
                    'bigcap': '\u22C2',
                    'bigcirc': '\u25EF',
                    'bigcup': '\u22C3',
                    'bigodot': '\u2A00',
                    'bigoplus': '\u2A01',
                    'bigotimes': '\u2A02',
                    'bigsqcup': '\u2A06',
                    'bigstar': '\u2605',
                    'bigtriangledown': '\u25BD',
                    'bigtriangleup': '\u25B3',
                    'biguplus': '\u2A04',
                    'bigvee': '\u22C1',
                    'bigwedge': '\u22C0',
                    'bkarow': '\u290D',
                    'blacklozenge': '\u29EB',
                    'blacksquare': '\u25AA',
                    'blacktriangle': '\u25B4',
                    'blacktriangledown': '\u25BE',
                    'blacktriangleleft': '\u25C2',
                    'blacktriangleright': '\u25B8',
                    'blank': '\u2423',
                    'blk12': '\u2592',
                    'blk14': '\u2591',
                    'blk34': '\u2593',
                    'block': '\u2588',
                    'bne': '=⃥',
                    'bnequiv': '\u2261⃥',
                    'bNot': '\u2AED',
                    'bnot': '\u2310',
                    'Bopf': '\uD835\uDD39',
                    'bopf': '\uD835\uDD53',
                    'bot': '\u22A5',
                    'bottom': '\u22A5',
                    'bowtie': '\u22C8',
                    'boxbox': '\u29C9',
                    'boxdl': '\u2510',
                    'boxdL': '\u2555',
                    'boxDl': '\u2556',
                    'boxDL': '\u2557',
                    'boxdr': '\u250C',
                    'boxdR': '\u2552',
                    'boxDr': '\u2553',
                    'boxDR': '\u2554',
                    'boxh': '\u2500',
                    'boxH': '\u2550',
                    'boxhd': '\u252C',
                    'boxHd': '\u2564',
                    'boxhD': '\u2565',
                    'boxHD': '\u2566',
                    'boxhu': '\u2534',
                    'boxHu': '\u2567',
                    'boxhU': '\u2568',
                    'boxHU': '\u2569',
                    'boxminus': '\u229F',
                    'boxplus': '\u229E',
                    'boxtimes': '\u22A0',
                    'boxul': '\u2518',
                    'boxuL': '\u255B',
                    'boxUl': '\u255C',
                    'boxUL': '\u255D',
                    'boxur': '\u2514',
                    'boxuR': '\u2558',
                    'boxUr': '\u2559',
                    'boxUR': '\u255A',
                    'boxv': '\u2502',
                    'boxV': '\u2551',
                    'boxvh': '\u253C',
                    'boxvH': '\u256A',
                    'boxVh': '\u256B',
                    'boxVH': '\u256C',
                    'boxvl': '\u2524',
                    'boxvL': '\u2561',
                    'boxVl': '\u2562',
                    'boxVL': '\u2563',
                    'boxvr': '\u251C',
                    'boxvR': '\u255E',
                    'boxVr': '\u255F',
                    'boxVR': '\u2560',
                    'bprime': '\u2035',
                    'breve': '\u02D8',
                    'Breve': '\u02D8',
                    'brvbar': '\xA6',
                    'bscr': '\uD835\uDCB7',
                    'Bscr': 'ℬ',
                    'bsemi': '\u204F',
                    'bsim': '\u223D',
                    'bsime': '\u22CD',
                    'bsolb': '\u29C5',
                    'bsol': '\\',
                    'bsolhsub': '\u27C8',
                    'bull': '\u2022',
                    'bullet': '\u2022',
                    'bump': '\u224E',
                    'bumpE': '\u2AAE',
                    'bumpe': '\u224F',
                    'Bumpeq': '\u224E',
                    'bumpeq': '\u224F',
                    'Cacute': 'Ć',
                    'cacute': 'ć',
                    'capand': '\u2A44',
                    'capbrcup': '\u2A49',
                    'capcap': '\u2A4B',
                    'cap': '\u2229',
                    'Cap': '\u22D2',
                    'capcup': '\u2A47',
                    'capdot': '\u2A40',
                    'CapitalDifferentialD': 'ⅅ',
                    'caps': '\u2229︀',
                    'caret': '\u2041',
                    'caron': 'ˇ',
                    'Cayleys': 'ℭ',
                    'ccaps': '\u2A4D',
                    'Ccaron': 'Č',
                    'ccaron': 'č',
                    'Ccedil': 'Ç',
                    'ccedil': 'ç',
                    'Ccirc': 'Ĉ',
                    'ccirc': 'ĉ',
                    'Cconint': '\u2230',
                    'ccups': '\u2A4C',
                    'ccupssm': '\u2A50',
                    'Cdot': 'Ċ',
                    'cdot': 'ċ',
                    'cedil': '\xB8',
                    'Cedilla': '\xB8',
                    'cemptyv': '\u29B2',
                    'cent': '\xA2',
                    'centerdot': '\xB7',
                    'CenterDot': '\xB7',
                    'cfr': '\uD835\uDD20',
                    'Cfr': 'ℭ',
                    'CHcy': 'Ч',
                    'chcy': 'ч',
                    'check': '\u2713',
                    'checkmark': '\u2713',
                    'Chi': 'Χ',
                    'chi': 'χ',
                    'circ': 'ˆ',
                    'circeq': '\u2257',
                    'circlearrowleft': '\u21BA',
                    'circlearrowright': '\u21BB',
                    'circledast': '\u229B',
                    'circledcirc': '\u229A',
                    'circleddash': '\u229D',
                    'CircleDot': '\u2299',
                    'circledR': '\xAE',
                    'circledS': '\u24C8',
                    'CircleMinus': '\u2296',
                    'CirclePlus': '\u2295',
                    'CircleTimes': '\u2297',
                    'cir': '\u25CB',
                    'cirE': '\u29C3',
                    'cire': '\u2257',
                    'cirfnint': '\u2A10',
                    'cirmid': '\u2AEF',
                    'cirscir': '\u29C2',
                    'ClockwiseContourIntegral': '\u2232',
                    'CloseCurlyDoubleQuote': '\u201D',
                    'CloseCurlyQuote': '\u2019',
                    'clubs': '\u2663',
                    'clubsuit': '\u2663',
                    'colon': ':',
                    'Colon': '\u2237',
                    'Colone': '\u2A74',
                    'colone': '\u2254',
                    'coloneq': '\u2254',
                    'comma': ',',
                    'commat': '@',
                    'comp': '\u2201',
                    'compfn': '\u2218',
                    'complement': '\u2201',
                    'complexes': 'ℂ',
                    'cong': '\u2245',
                    'congdot': '\u2A6D',
                    'Congruent': '\u2261',
                    'conint': '\u222E',
                    'Conint': '\u222F',
                    'ContourIntegral': '\u222E',
                    'copf': '\uD835\uDD54',
                    'Copf': 'ℂ',
                    'coprod': '\u2210',
                    'Coproduct': '\u2210',
                    'copy': '\xA9',
                    'COPY': '\xA9',
                    'copysr': '\u2117',
                    'CounterClockwiseContourIntegral': '\u2233',
                    'crarr': '\u21B5',
                    'cross': '\u2717',
                    'Cross': '\u2A2F',
                    'Cscr': '\uD835\uDC9E',
                    'cscr': '\uD835\uDCB8',
                    'csub': '\u2ACF',
                    'csube': '\u2AD1',
                    'csup': '\u2AD0',
                    'csupe': '\u2AD2',
                    'ctdot': '\u22EF',
                    'cudarrl': '\u2938',
                    'cudarrr': '\u2935',
                    'cuepr': '\u22DE',
                    'cuesc': '\u22DF',
                    'cularr': '\u21B6',
                    'cularrp': '\u293D',
                    'cupbrcap': '\u2A48',
                    'cupcap': '\u2A46',
                    'CupCap': '\u224D',
                    'cup': '\u222A',
                    'Cup': '\u22D3',
                    'cupcup': '\u2A4A',
                    'cupdot': '\u228D',
                    'cupor': '\u2A45',
                    'cups': '\u222A︀',
                    'curarr': '\u21B7',
                    'curarrm': '\u293C',
                    'curlyeqprec': '\u22DE',
                    'curlyeqsucc': '\u22DF',
                    'curlyvee': '\u22CE',
                    'curlywedge': '\u22CF',
                    'curren': '\xA4',
                    'curvearrowleft': '\u21B6',
                    'curvearrowright': '\u21B7',
                    'cuvee': '\u22CE',
                    'cuwed': '\u22CF',
                    'cwconint': '\u2232',
                    'cwint': '\u2231',
                    'cylcty': '\u232D',
                    'dagger': '\u2020',
                    'Dagger': '\u2021',
                    'daleth': 'ℸ',
                    'darr': '\u2193',
                    'Darr': '\u21A1',
                    'dArr': '\u21D3',
                    'dash': '\u2010',
                    'Dashv': '\u2AE4',
                    'dashv': '\u22A3',
                    'dbkarow': '\u290F',
                    'dblac': '\u02DD',
                    'Dcaron': 'Ď',
                    'dcaron': 'ď',
                    'Dcy': 'Д',
                    'dcy': 'д',
                    'ddagger': '\u2021',
                    'ddarr': '\u21CA',
                    'DD': 'ⅅ',
                    'dd': 'ⅆ',
                    'DDotrahd': '\u2911',
                    'ddotseq': '\u2A77',
                    'deg': '\xB0',
                    'Del': '\u2207',
                    'Delta': 'Δ',
                    'delta': 'δ',
                    'demptyv': '\u29B1',
                    'dfisht': '\u297F',
                    'Dfr': '\uD835\uDD07',
                    'dfr': '\uD835\uDD21',
                    'dHar': '\u2965',
                    'dharl': '\u21C3',
                    'dharr': '\u21C2',
                    'DiacriticalAcute': '\xB4',
                    'DiacriticalDot': '\u02D9',
                    'DiacriticalDoubleAcute': '\u02DD',
                    'DiacriticalGrave': '`',
                    'DiacriticalTilde': '\u02DC',
                    'diam': '\u22C4',
                    'diamond': '\u22C4',
                    'Diamond': '\u22C4',
                    'diamondsuit': '\u2666',
                    'diams': '\u2666',
                    'die': '\xA8',
                    'DifferentialD': 'ⅆ',
                    'digamma': 'ϝ',
                    'disin': '\u22F2',
                    'div': '\xF7',
                    'divide': '\xF7',
                    'divideontimes': '\u22C7',
                    'divonx': '\u22C7',
                    'DJcy': 'Ђ',
                    'djcy': 'ђ',
                    'dlcorn': '\u231E',
                    'dlcrop': '\u230D',
                    'dollar': '$',
                    'Dopf': '\uD835\uDD3B',
                    'dopf': '\uD835\uDD55',
                    'Dot': '\xA8',
                    'dot': '\u02D9',
                    'DotDot': '⃜',
                    'doteq': '\u2250',
                    'doteqdot': '\u2251',
                    'DotEqual': '\u2250',
                    'dotminus': '\u2238',
                    'dotplus': '\u2214',
                    'dotsquare': '\u22A1',
                    'doublebarwedge': '\u2306',
                    'DoubleContourIntegral': '\u222F',
                    'DoubleDot': '\xA8',
                    'DoubleDownArrow': '\u21D3',
                    'DoubleLeftArrow': '\u21D0',
                    'DoubleLeftRightArrow': '\u21D4',
                    'DoubleLeftTee': '\u2AE4',
                    'DoubleLongLeftArrow': '\u27F8',
                    'DoubleLongLeftRightArrow': '\u27FA',
                    'DoubleLongRightArrow': '\u27F9',
                    'DoubleRightArrow': '\u21D2',
                    'DoubleRightTee': '\u22A8',
                    'DoubleUpArrow': '\u21D1',
                    'DoubleUpDownArrow': '\u21D5',
                    'DoubleVerticalBar': '\u2225',
                    'DownArrowBar': '\u2913',
                    'downarrow': '\u2193',
                    'DownArrow': '\u2193',
                    'Downarrow': '\u21D3',
                    'DownArrowUpArrow': '\u21F5',
                    'DownBreve': '̑',
                    'downdownarrows': '\u21CA',
                    'downharpoonleft': '\u21C3',
                    'downharpoonright': '\u21C2',
                    'DownLeftRightVector': '\u2950',
                    'DownLeftTeeVector': '\u295E',
                    'DownLeftVectorBar': '\u2956',
                    'DownLeftVector': '\u21BD',
                    'DownRightTeeVector': '\u295F',
                    'DownRightVectorBar': '\u2957',
                    'DownRightVector': '\u21C1',
                    'DownTeeArrow': '\u21A7',
                    'DownTee': '\u22A4',
                    'drbkarow': '\u2910',
                    'drcorn': '\u231F',
                    'drcrop': '\u230C',
                    'Dscr': '\uD835\uDC9F',
                    'dscr': '\uD835\uDCB9',
                    'DScy': 'Ѕ',
                    'dscy': 'ѕ',
                    'dsol': '\u29F6',
                    'Dstrok': 'Đ',
                    'dstrok': 'đ',
                    'dtdot': '\u22F1',
                    'dtri': '\u25BF',
                    'dtrif': '\u25BE',
                    'duarr': '\u21F5',
                    'duhar': '\u296F',
                    'dwangle': '\u29A6',
                    'DZcy': 'Џ',
                    'dzcy': 'џ',
                    'dzigrarr': '\u27FF',
                    'Eacute': 'É',
                    'eacute': 'é',
                    'easter': '\u2A6E',
                    'Ecaron': 'Ě',
                    'ecaron': 'ě',
                    'Ecirc': 'Ê',
                    'ecirc': 'ê',
                    'ecir': '\u2256',
                    'ecolon': '\u2255',
                    'Ecy': 'Э',
                    'ecy': 'э',
                    'eDDot': '\u2A77',
                    'Edot': 'Ė',
                    'edot': 'ė',
                    'eDot': '\u2251',
                    'ee': 'ⅇ',
                    'efDot': '\u2252',
                    'Efr': '\uD835\uDD08',
                    'efr': '\uD835\uDD22',
                    'eg': '\u2A9A',
                    'Egrave': 'È',
                    'egrave': 'è',
                    'egs': '\u2A96',
                    'egsdot': '\u2A98',
                    'el': '\u2A99',
                    'Element': '\u2208',
                    'elinters': '\u23E7',
                    'ell': 'ℓ',
                    'els': '\u2A95',
                    'elsdot': '\u2A97',
                    'Emacr': 'Ē',
                    'emacr': 'ē',
                    'empty': '\u2205',
                    'emptyset': '\u2205',
                    'EmptySmallSquare': '\u25FB',
                    'emptyv': '\u2205',
                    'EmptyVerySmallSquare': '\u25AB',
                    'emsp13': '\u2004',
                    'emsp14': '\u2005',
                    'emsp': '\u2003',
                    'ENG': 'Ŋ',
                    'eng': 'ŋ',
                    'ensp': '\u2002',
                    'Eogon': 'Ę',
                    'eogon': 'ę',
                    'Eopf': '\uD835\uDD3C',
                    'eopf': '\uD835\uDD56',
                    'epar': '\u22D5',
                    'eparsl': '\u29E3',
                    'eplus': '\u2A71',
                    'epsi': 'ε',
                    'Epsilon': 'Ε',
                    'epsilon': 'ε',
                    'epsiv': 'ϵ',
                    'eqcirc': '\u2256',
                    'eqcolon': '\u2255',
                    'eqsim': '\u2242',
                    'eqslantgtr': '\u2A96',
                    'eqslantless': '\u2A95',
                    'Equal': '\u2A75',
                    'equals': '=',
                    'EqualTilde': '\u2242',
                    'equest': '\u225F',
                    'Equilibrium': '\u21CC',
                    'equiv': '\u2261',
                    'equivDD': '\u2A78',
                    'eqvparsl': '\u29E5',
                    'erarr': '\u2971',
                    'erDot': '\u2253',
                    'escr': 'ℯ',
                    'Escr': 'ℰ',
                    'esdot': '\u2250',
                    'Esim': '\u2A73',
                    'esim': '\u2242',
                    'Eta': 'Η',
                    'eta': 'η',
                    'ETH': 'Ð',
                    'eth': 'ð',
                    'Euml': 'Ë',
                    'euml': 'ë',
                    'euro': '\u20AC',
                    'excl': '!',
                    'exist': '\u2203',
                    'Exists': '\u2203',
                    'expectation': 'ℰ',
                    'exponentiale': 'ⅇ',
                    'ExponentialE': 'ⅇ',
                    'fallingdotseq': '\u2252',
                    'Fcy': 'Ф',
                    'fcy': 'ф',
                    'female': '\u2640',
                    'ffilig': 'ﬃ',
                    'fflig': 'ﬀ',
                    'ffllig': 'ﬄ',
                    'Ffr': '\uD835\uDD09',
                    'ffr': '\uD835\uDD23',
                    'filig': 'ﬁ',
                    'FilledSmallSquare': '\u25FC',
                    'FilledVerySmallSquare': '\u25AA',
                    'fjlig': 'fj',
                    'flat': '\u266D',
                    'fllig': 'ﬂ',
                    'fltns': '\u25B1',
                    'fnof': 'ƒ',
                    'Fopf': '\uD835\uDD3D',
                    'fopf': '\uD835\uDD57',
                    'forall': '\u2200',
                    'ForAll': '\u2200',
                    'fork': '\u22D4',
                    'forkv': '\u2AD9',
                    'Fouriertrf': 'ℱ',
                    'fpartint': '\u2A0D',
                    'frac12': '\xBD',
                    'frac13': '\u2153',
                    'frac14': '\xBC',
                    'frac15': '\u2155',
                    'frac16': '\u2159',
                    'frac18': '\u215B',
                    'frac23': '\u2154',
                    'frac25': '\u2156',
                    'frac34': '\xBE',
                    'frac35': '\u2157',
                    'frac38': '\u215C',
                    'frac45': '\u2158',
                    'frac56': '\u215A',
                    'frac58': '\u215D',
                    'frac78': '\u215E',
                    'frasl': '\u2044',
                    'frown': '\u2322',
                    'fscr': '\uD835\uDCBB',
                    'Fscr': 'ℱ',
                    'gacute': 'ǵ',
                    'Gamma': 'Γ',
                    'gamma': 'γ',
                    'Gammad': 'Ϝ',
                    'gammad': 'ϝ',
                    'gap': '\u2A86',
                    'Gbreve': 'Ğ',
                    'gbreve': 'ğ',
                    'Gcedil': 'Ģ',
                    'Gcirc': 'Ĝ',
                    'gcirc': 'ĝ',
                    'Gcy': 'Г',
                    'gcy': 'г',
                    'Gdot': 'Ġ',
                    'gdot': 'ġ',
                    'ge': '\u2265',
                    'gE': '\u2267',
                    'gEl': '\u2A8C',
                    'gel': '\u22DB',
                    'geq': '\u2265',
                    'geqq': '\u2267',
                    'geqslant': '\u2A7E',
                    'gescc': '\u2AA9',
                    'ges': '\u2A7E',
                    'gesdot': '\u2A80',
                    'gesdoto': '\u2A82',
                    'gesdotol': '\u2A84',
                    'gesl': '\u22DB︀',
                    'gesles': '\u2A94',
                    'Gfr': '\uD835\uDD0A',
                    'gfr': '\uD835\uDD24',
                    'gg': '\u226B',
                    'Gg': '\u22D9',
                    'ggg': '\u22D9',
                    'gimel': 'ℷ',
                    'GJcy': 'Ѓ',
                    'gjcy': 'ѓ',
                    'gla': '\u2AA5',
                    'gl': '\u2277',
                    'glE': '\u2A92',
                    'glj': '\u2AA4',
                    'gnap': '\u2A8A',
                    'gnapprox': '\u2A8A',
                    'gne': '\u2A88',
                    'gnE': '\u2269',
                    'gneq': '\u2A88',
                    'gneqq': '\u2269',
                    'gnsim': '\u22E7',
                    'Gopf': '\uD835\uDD3E',
                    'gopf': '\uD835\uDD58',
                    'grave': '`',
                    'GreaterEqual': '\u2265',
                    'GreaterEqualLess': '\u22DB',
                    'GreaterFullEqual': '\u2267',
                    'GreaterGreater': '\u2AA2',
                    'GreaterLess': '\u2277',
                    'GreaterSlantEqual': '\u2A7E',
                    'GreaterTilde': '\u2273',
                    'Gscr': '\uD835\uDCA2',
                    'gscr': 'ℊ',
                    'gsim': '\u2273',
                    'gsime': '\u2A8E',
                    'gsiml': '\u2A90',
                    'gtcc': '\u2AA7',
                    'gtcir': '\u2A7A',
                    'gt': '>',
                    'GT': '>',
                    'Gt': '\u226B',
                    'gtdot': '\u22D7',
                    'gtlPar': '\u2995',
                    'gtquest': '\u2A7C',
                    'gtrapprox': '\u2A86',
                    'gtrarr': '\u2978',
                    'gtrdot': '\u22D7',
                    'gtreqless': '\u22DB',
                    'gtreqqless': '\u2A8C',
                    'gtrless': '\u2277',
                    'gtrsim': '\u2273',
                    'gvertneqq': '\u2269︀',
                    'gvnE': '\u2269︀',
                    'Hacek': 'ˇ',
                    'hairsp': '\u200A',
                    'half': '\xBD',
                    'hamilt': 'ℋ',
                    'HARDcy': 'Ъ',
                    'hardcy': 'ъ',
                    'harrcir': '\u2948',
                    'harr': '\u2194',
                    'hArr': '\u21D4',
                    'harrw': '\u21AD',
                    'Hat': '^',
                    'hbar': 'ℏ',
                    'Hcirc': 'Ĥ',
                    'hcirc': 'ĥ',
                    'hearts': '\u2665',
                    'heartsuit': '\u2665',
                    'hellip': '\u2026',
                    'hercon': '\u22B9',
                    'hfr': '\uD835\uDD25',
                    'Hfr': 'ℌ',
                    'HilbertSpace': 'ℋ',
                    'hksearow': '\u2925',
                    'hkswarow': '\u2926',
                    'hoarr': '\u21FF',
                    'homtht': '\u223B',
                    'hookleftarrow': '\u21A9',
                    'hookrightarrow': '\u21AA',
                    'hopf': '\uD835\uDD59',
                    'Hopf': 'ℍ',
                    'horbar': '\u2015',
                    'HorizontalLine': '\u2500',
                    'hscr': '\uD835\uDCBD',
                    'Hscr': 'ℋ',
                    'hslash': 'ℏ',
                    'Hstrok': 'Ħ',
                    'hstrok': 'ħ',
                    'HumpDownHump': '\u224E',
                    'HumpEqual': '\u224F',
                    'hybull': '\u2043',
                    'hyphen': '\u2010',
                    'Iacute': 'Í',
                    'iacute': 'í',
                    'ic': '\u2063',
                    'Icirc': 'Î',
                    'icirc': 'î',
                    'Icy': 'И',
                    'icy': 'и',
                    'Idot': 'İ',
                    'IEcy': 'Е',
                    'iecy': 'е',
                    'iexcl': '\xA1',
                    'iff': '\u21D4',
                    'ifr': '\uD835\uDD26',
                    'Ifr': 'ℑ',
                    'Igrave': 'Ì',
                    'igrave': 'ì',
                    'ii': 'ⅈ',
                    'iiiint': '\u2A0C',
                    'iiint': '\u222D',
                    'iinfin': '\u29DC',
                    'iiota': '\u2129',
                    'IJlig': 'Ĳ',
                    'ijlig': 'ĳ',
                    'Imacr': 'Ī',
                    'imacr': 'ī',
                    'image': 'ℑ',
                    'ImaginaryI': 'ⅈ',
                    'imagline': 'ℐ',
                    'imagpart': 'ℑ',
                    'imath': 'ı',
                    'Im': 'ℑ',
                    'imof': '\u22B7',
                    'imped': 'Ƶ',
                    'Implies': '\u21D2',
                    'incare': '\u2105',
                    'in': '\u2208',
                    'infin': '\u221E',
                    'infintie': '\u29DD',
                    'inodot': 'ı',
                    'intcal': '\u22BA',
                    'int': '\u222B',
                    'Int': '\u222C',
                    'integers': 'ℤ',
                    'Integral': '\u222B',
                    'intercal': '\u22BA',
                    'Intersection': '\u22C2',
                    'intlarhk': '\u2A17',
                    'intprod': '\u2A3C',
                    'InvisibleComma': '\u2063',
                    'InvisibleTimes': '\u2062',
                    'IOcy': 'Ё',
                    'iocy': 'ё',
                    'Iogon': 'Į',
                    'iogon': 'į',
                    'Iopf': '\uD835\uDD40',
                    'iopf': '\uD835\uDD5A',
                    'Iota': 'Ι',
                    'iota': 'ι',
                    'iprod': '\u2A3C',
                    'iquest': '\xBF',
                    'iscr': '\uD835\uDCBE',
                    'Iscr': 'ℐ',
                    'isin': '\u2208',
                    'isindot': '\u22F5',
                    'isinE': '\u22F9',
                    'isins': '\u22F4',
                    'isinsv': '\u22F3',
                    'isinv': '\u2208',
                    'it': '\u2062',
                    'Itilde': 'Ĩ',
                    'itilde': 'ĩ',
                    'Iukcy': 'І',
                    'iukcy': 'і',
                    'Iuml': 'Ï',
                    'iuml': 'ï',
                    'Jcirc': 'Ĵ',
                    'jcirc': 'ĵ',
                    'Jcy': 'Й',
                    'jcy': 'й',
                    'Jfr': '\uD835\uDD0D',
                    'jfr': '\uD835\uDD27',
                    'jmath': 'ȷ',
                    'Jopf': '\uD835\uDD41',
                    'jopf': '\uD835\uDD5B',
                    'Jscr': '\uD835\uDCA5',
                    'jscr': '\uD835\uDCBF',
                    'Jsercy': 'Ј',
                    'jsercy': 'ј',
                    'Jukcy': 'Є',
                    'jukcy': 'є',
                    'Kappa': 'Κ',
                    'kappa': 'κ',
                    'kappav': 'ϰ',
                    'Kcedil': 'Ķ',
                    'kcedil': 'ķ',
                    'Kcy': 'К',
                    'kcy': 'к',
                    'Kfr': '\uD835\uDD0E',
                    'kfr': '\uD835\uDD28',
                    'kgreen': 'ĸ',
                    'KHcy': 'Х',
                    'khcy': 'х',
                    'KJcy': 'Ќ',
                    'kjcy': 'ќ',
                    'Kopf': '\uD835\uDD42',
                    'kopf': '\uD835\uDD5C',
                    'Kscr': '\uD835\uDCA6',
                    'kscr': '\uD835\uDCC0',
                    'lAarr': '\u21DA',
                    'Lacute': 'Ĺ',
                    'lacute': 'ĺ',
                    'laemptyv': '\u29B4',
                    'lagran': 'ℒ',
                    'Lambda': 'Λ',
                    'lambda': 'λ',
                    'lang': '\u27E8',
                    'Lang': '\u27EA',
                    'langd': '\u2991',
                    'langle': '\u27E8',
                    'lap': '\u2A85',
                    'Laplacetrf': 'ℒ',
                    'laquo': '\xAB',
                    'larrb': '\u21E4',
                    'larrbfs': '\u291F',
                    'larr': '\u2190',
                    'Larr': '\u219E',
                    'lArr': '\u21D0',
                    'larrfs': '\u291D',
                    'larrhk': '\u21A9',
                    'larrlp': '\u21AB',
                    'larrpl': '\u2939',
                    'larrsim': '\u2973',
                    'larrtl': '\u21A2',
                    'latail': '\u2919',
                    'lAtail': '\u291B',
                    'lat': '\u2AAB',
                    'late': '\u2AAD',
                    'lates': '\u2AAD︀',
                    'lbarr': '\u290C',
                    'lBarr': '\u290E',
                    'lbbrk': '\u2772',
                    'lbrace': '{',
                    'lbrack': '[',
                    'lbrke': '\u298B',
                    'lbrksld': '\u298F',
                    'lbrkslu': '\u298D',
                    'Lcaron': 'Ľ',
                    'lcaron': 'ľ',
                    'Lcedil': 'Ļ',
                    'lcedil': 'ļ',
                    'lceil': '\u2308',
                    'lcub': '{',
                    'Lcy': 'Л',
                    'lcy': 'л',
                    'ldca': '\u2936',
                    'ldquo': '\u201C',
                    'ldquor': '\u201E',
                    'ldrdhar': '\u2967',
                    'ldrushar': '\u294B',
                    'ldsh': '\u21B2',
                    'le': '\u2264',
                    'lE': '\u2266',
                    'LeftAngleBracket': '\u27E8',
                    'LeftArrowBar': '\u21E4',
                    'leftarrow': '\u2190',
                    'LeftArrow': '\u2190',
                    'Leftarrow': '\u21D0',
                    'LeftArrowRightArrow': '\u21C6',
                    'leftarrowtail': '\u21A2',
                    'LeftCeiling': '\u2308',
                    'LeftDoubleBracket': '\u27E6',
                    'LeftDownTeeVector': '\u2961',
                    'LeftDownVectorBar': '\u2959',
                    'LeftDownVector': '\u21C3',
                    'LeftFloor': '\u230A',
                    'leftharpoondown': '\u21BD',
                    'leftharpoonup': '\u21BC',
                    'leftleftarrows': '\u21C7',
                    'leftrightarrow': '\u2194',
                    'LeftRightArrow': '\u2194',
                    'Leftrightarrow': '\u21D4',
                    'leftrightarrows': '\u21C6',
                    'leftrightharpoons': '\u21CB',
                    'leftrightsquigarrow': '\u21AD',
                    'LeftRightVector': '\u294E',
                    'LeftTeeArrow': '\u21A4',
                    'LeftTee': '\u22A3',
                    'LeftTeeVector': '\u295A',
                    'leftthreetimes': '\u22CB',
                    'LeftTriangleBar': '\u29CF',
                    'LeftTriangle': '\u22B2',
                    'LeftTriangleEqual': '\u22B4',
                    'LeftUpDownVector': '\u2951',
                    'LeftUpTeeVector': '\u2960',
                    'LeftUpVectorBar': '\u2958',
                    'LeftUpVector': '\u21BF',
                    'LeftVectorBar': '\u2952',
                    'LeftVector': '\u21BC',
                    'lEg': '\u2A8B',
                    'leg': '\u22DA',
                    'leq': '\u2264',
                    'leqq': '\u2266',
                    'leqslant': '\u2A7D',
                    'lescc': '\u2AA8',
                    'les': '\u2A7D',
                    'lesdot': '\u2A7F',
                    'lesdoto': '\u2A81',
                    'lesdotor': '\u2A83',
                    'lesg': '\u22DA︀',
                    'lesges': '\u2A93',
                    'lessapprox': '\u2A85',
                    'lessdot': '\u22D6',
                    'lesseqgtr': '\u22DA',
                    'lesseqqgtr': '\u2A8B',
                    'LessEqualGreater': '\u22DA',
                    'LessFullEqual': '\u2266',
                    'LessGreater': '\u2276',
                    'lessgtr': '\u2276',
                    'LessLess': '\u2AA1',
                    'lesssim': '\u2272',
                    'LessSlantEqual': '\u2A7D',
                    'LessTilde': '\u2272',
                    'lfisht': '\u297C',
                    'lfloor': '\u230A',
                    'Lfr': '\uD835\uDD0F',
                    'lfr': '\uD835\uDD29',
                    'lg': '\u2276',
                    'lgE': '\u2A91',
                    'lHar': '\u2962',
                    'lhard': '\u21BD',
                    'lharu': '\u21BC',
                    'lharul': '\u296A',
                    'lhblk': '\u2584',
                    'LJcy': 'Љ',
                    'ljcy': 'љ',
                    'llarr': '\u21C7',
                    'll': '\u226A',
                    'Ll': '\u22D8',
                    'llcorner': '\u231E',
                    'Lleftarrow': '\u21DA',
                    'llhard': '\u296B',
                    'lltri': '\u25FA',
                    'Lmidot': 'Ŀ',
                    'lmidot': 'ŀ',
                    'lmoustache': '\u23B0',
                    'lmoust': '\u23B0',
                    'lnap': '\u2A89',
                    'lnapprox': '\u2A89',
                    'lne': '\u2A87',
                    'lnE': '\u2268',
                    'lneq': '\u2A87',
                    'lneqq': '\u2268',
                    'lnsim': '\u22E6',
                    'loang': '\u27EC',
                    'loarr': '\u21FD',
                    'lobrk': '\u27E6',
                    'longleftarrow': '\u27F5',
                    'LongLeftArrow': '\u27F5',
                    'Longleftarrow': '\u27F8',
                    'longleftrightarrow': '\u27F7',
                    'LongLeftRightArrow': '\u27F7',
                    'Longleftrightarrow': '\u27FA',
                    'longmapsto': '\u27FC',
                    'longrightarrow': '\u27F6',
                    'LongRightArrow': '\u27F6',
                    'Longrightarrow': '\u27F9',
                    'looparrowleft': '\u21AB',
                    'looparrowright': '\u21AC',
                    'lopar': '\u2985',
                    'Lopf': '\uD835\uDD43',
                    'lopf': '\uD835\uDD5D',
                    'loplus': '\u2A2D',
                    'lotimes': '\u2A34',
                    'lowast': '\u2217',
                    'lowbar': '_',
                    'LowerLeftArrow': '\u2199',
                    'LowerRightArrow': '\u2198',
                    'loz': '\u25CA',
                    'lozenge': '\u25CA',
                    'lozf': '\u29EB',
                    'lpar': '(',
                    'lparlt': '\u2993',
                    'lrarr': '\u21C6',
                    'lrcorner': '\u231F',
                    'lrhar': '\u21CB',
                    'lrhard': '\u296D',
                    'lrm': '\u200E',
                    'lrtri': '\u22BF',
                    'lsaquo': '\u2039',
                    'lscr': '\uD835\uDCC1',
                    'Lscr': 'ℒ',
                    'lsh': '\u21B0',
                    'Lsh': '\u21B0',
                    'lsim': '\u2272',
                    'lsime': '\u2A8D',
                    'lsimg': '\u2A8F',
                    'lsqb': '[',
                    'lsquo': '\u2018',
                    'lsquor': '\u201A',
                    'Lstrok': 'Ł',
                    'lstrok': 'ł',
                    'ltcc': '\u2AA6',
                    'ltcir': '\u2A79',
                    'lt': '<',
                    'LT': '<',
                    'Lt': '\u226A',
                    'ltdot': '\u22D6',
                    'lthree': '\u22CB',
                    'ltimes': '\u22C9',
                    'ltlarr': '\u2976',
                    'ltquest': '\u2A7B',
                    'ltri': '\u25C3',
                    'ltrie': '\u22B4',
                    'ltrif': '\u25C2',
                    'ltrPar': '\u2996',
                    'lurdshar': '\u294A',
                    'luruhar': '\u2966',
                    'lvertneqq': '\u2268︀',
                    'lvnE': '\u2268︀',
                    'macr': '\xAF',
                    'male': '\u2642',
                    'malt': '\u2720',
                    'maltese': '\u2720',
                    'Map': '\u2905',
                    'map': '\u21A6',
                    'mapsto': '\u21A6',
                    'mapstodown': '\u21A7',
                    'mapstoleft': '\u21A4',
                    'mapstoup': '\u21A5',
                    'marker': '\u25AE',
                    'mcomma': '\u2A29',
                    'Mcy': 'М',
                    'mcy': 'м',
                    'mdash': '\u2014',
                    'mDDot': '\u223A',
                    'measuredangle': '\u2221',
                    'MediumSpace': '\u205F',
                    'Mellintrf': 'ℳ',
                    'Mfr': '\uD835\uDD10',
                    'mfr': '\uD835\uDD2A',
                    'mho': '\u2127',
                    'micro': 'µ',
                    'midast': '*',
                    'midcir': '\u2AF0',
                    'mid': '\u2223',
                    'middot': '\xB7',
                    'minusb': '\u229F',
                    'minus': '\u2212',
                    'minusd': '\u2238',
                    'minusdu': '\u2A2A',
                    'MinusPlus': '\u2213',
                    'mlcp': '\u2ADB',
                    'mldr': '\u2026',
                    'mnplus': '\u2213',
                    'models': '\u22A7',
                    'Mopf': '\uD835\uDD44',
                    'mopf': '\uD835\uDD5E',
                    'mp': '\u2213',
                    'mscr': '\uD835\uDCC2',
                    'Mscr': 'ℳ',
                    'mstpos': '\u223E',
                    'Mu': 'Μ',
                    'mu': 'μ',
                    'multimap': '\u22B8',
                    'mumap': '\u22B8',
                    'nabla': '\u2207',
                    'Nacute': 'Ń',
                    'nacute': 'ń',
                    'nang': '\u2220⃒',
                    'nap': '\u2249',
                    'napE': '\u2A70̸',
                    'napid': '\u224B̸',
                    'napos': 'ŉ',
                    'napprox': '\u2249',
                    'natural': '\u266E',
                    'naturals': 'ℕ',
                    'natur': '\u266E',
                    'nbsp': '\xA0',
                    'nbump': '\u224E̸',
                    'nbumpe': '\u224F̸',
                    'ncap': '\u2A43',
                    'Ncaron': 'Ň',
                    'ncaron': 'ň',
                    'Ncedil': 'Ņ',
                    'ncedil': 'ņ',
                    'ncong': '\u2247',
                    'ncongdot': '\u2A6D̸',
                    'ncup': '\u2A42',
                    'Ncy': 'Н',
                    'ncy': 'н',
                    'ndash': '\u2013',
                    'nearhk': '\u2924',
                    'nearr': '\u2197',
                    'neArr': '\u21D7',
                    'nearrow': '\u2197',
                    'ne': '\u2260',
                    'nedot': '\u2250̸',
                    'NegativeMediumSpace': '\u200B',
                    'NegativeThickSpace': '\u200B',
                    'NegativeThinSpace': '\u200B',
                    'NegativeVeryThinSpace': '\u200B',
                    'nequiv': '\u2262',
                    'nesear': '\u2928',
                    'nesim': '\u2242̸',
                    'NestedGreaterGreater': '\u226B',
                    'NestedLessLess': '\u226A',
                    'NewLine': '\n',
                    'nexist': '\u2204',
                    'nexists': '\u2204',
                    'Nfr': '\uD835\uDD11',
                    'nfr': '\uD835\uDD2B',
                    'ngE': '\u2267̸',
                    'nge': '\u2271',
                    'ngeq': '\u2271',
                    'ngeqq': '\u2267̸',
                    'ngeqslant': '\u2A7E̸',
                    'nges': '\u2A7E̸',
                    'nGg': '\u22D9̸',
                    'ngsim': '\u2275',
                    'nGt': '\u226B⃒',
                    'ngt': '\u226F',
                    'ngtr': '\u226F',
                    'nGtv': '\u226B̸',
                    'nharr': '\u21AE',
                    'nhArr': '\u21CE',
                    'nhpar': '\u2AF2',
                    'ni': '\u220B',
                    'nis': '\u22FC',
                    'nisd': '\u22FA',
                    'niv': '\u220B',
                    'NJcy': 'Њ',
                    'njcy': 'њ',
                    'nlarr': '\u219A',
                    'nlArr': '\u21CD',
                    'nldr': '\u2025',
                    'nlE': '\u2266̸',
                    'nle': '\u2270',
                    'nleftarrow': '\u219A',
                    'nLeftarrow': '\u21CD',
                    'nleftrightarrow': '\u21AE',
                    'nLeftrightarrow': '\u21CE',
                    'nleq': '\u2270',
                    'nleqq': '\u2266̸',
                    'nleqslant': '\u2A7D̸',
                    'nles': '\u2A7D̸',
                    'nless': '\u226E',
                    'nLl': '\u22D8̸',
                    'nlsim': '\u2274',
                    'nLt': '\u226A⃒',
                    'nlt': '\u226E',
                    'nltri': '\u22EA',
                    'nltrie': '\u22EC',
                    'nLtv': '\u226A̸',
                    'nmid': '\u2224',
                    'NoBreak': '\u2060',
                    'NonBreakingSpace': '\xA0',
                    'nopf': '\uD835\uDD5F',
                    'Nopf': 'ℕ',
                    'Not': '\u2AEC',
                    'not': '\xAC',
                    'NotCongruent': '\u2262',
                    'NotCupCap': '\u226D',
                    'NotDoubleVerticalBar': '\u2226',
                    'NotElement': '\u2209',
                    'NotEqual': '\u2260',
                    'NotEqualTilde': '\u2242̸',
                    'NotExists': '\u2204',
                    'NotGreater': '\u226F',
                    'NotGreaterEqual': '\u2271',
                    'NotGreaterFullEqual': '\u2267̸',
                    'NotGreaterGreater': '\u226B̸',
                    'NotGreaterLess': '\u2279',
                    'NotGreaterSlantEqual': '\u2A7E̸',
                    'NotGreaterTilde': '\u2275',
                    'NotHumpDownHump': '\u224E̸',
                    'NotHumpEqual': '\u224F̸',
                    'notin': '\u2209',
                    'notindot': '\u22F5̸',
                    'notinE': '\u22F9̸',
                    'notinva': '\u2209',
                    'notinvb': '\u22F7',
                    'notinvc': '\u22F6',
                    'NotLeftTriangleBar': '\u29CF̸',
                    'NotLeftTriangle': '\u22EA',
                    'NotLeftTriangleEqual': '\u22EC',
                    'NotLess': '\u226E',
                    'NotLessEqual': '\u2270',
                    'NotLessGreater': '\u2278',
                    'NotLessLess': '\u226A̸',
                    'NotLessSlantEqual': '\u2A7D̸',
                    'NotLessTilde': '\u2274',
                    'NotNestedGreaterGreater': '\u2AA2̸',
                    'NotNestedLessLess': '\u2AA1̸',
                    'notni': '\u220C',
                    'notniva': '\u220C',
                    'notnivb': '\u22FE',
                    'notnivc': '\u22FD',
                    'NotPrecedes': '\u2280',
                    'NotPrecedesEqual': '\u2AAF̸',
                    'NotPrecedesSlantEqual': '\u22E0',
                    'NotReverseElement': '\u220C',
                    'NotRightTriangleBar': '\u29D0̸',
                    'NotRightTriangle': '\u22EB',
                    'NotRightTriangleEqual': '\u22ED',
                    'NotSquareSubset': '\u228F̸',
                    'NotSquareSubsetEqual': '\u22E2',
                    'NotSquareSuperset': '\u2290̸',
                    'NotSquareSupersetEqual': '\u22E3',
                    'NotSubset': '\u2282⃒',
                    'NotSubsetEqual': '\u2288',
                    'NotSucceeds': '\u2281',
                    'NotSucceedsEqual': '\u2AB0̸',
                    'NotSucceedsSlantEqual': '\u22E1',
                    'NotSucceedsTilde': '\u227F̸',
                    'NotSuperset': '\u2283⃒',
                    'NotSupersetEqual': '\u2289',
                    'NotTilde': '\u2241',
                    'NotTildeEqual': '\u2244',
                    'NotTildeFullEqual': '\u2247',
                    'NotTildeTilde': '\u2249',
                    'NotVerticalBar': '\u2224',
                    'nparallel': '\u2226',
                    'npar': '\u2226',
                    'nparsl': '\u2AFD⃥',
                    'npart': '\u2202̸',
                    'npolint': '\u2A14',
                    'npr': '\u2280',
                    'nprcue': '\u22E0',
                    'nprec': '\u2280',
                    'npreceq': '\u2AAF̸',
                    'npre': '\u2AAF̸',
                    'nrarrc': '\u2933̸',
                    'nrarr': '\u219B',
                    'nrArr': '\u21CF',
                    'nrarrw': '\u219D̸',
                    'nrightarrow': '\u219B',
                    'nRightarrow': '\u21CF',
                    'nrtri': '\u22EB',
                    'nrtrie': '\u22ED',
                    'nsc': '\u2281',
                    'nsccue': '\u22E1',
                    'nsce': '\u2AB0̸',
                    'Nscr': '\uD835\uDCA9',
                    'nscr': '\uD835\uDCC3',
                    'nshortmid': '\u2224',
                    'nshortparallel': '\u2226',
                    'nsim': '\u2241',
                    'nsime': '\u2244',
                    'nsimeq': '\u2244',
                    'nsmid': '\u2224',
                    'nspar': '\u2226',
                    'nsqsube': '\u22E2',
                    'nsqsupe': '\u22E3',
                    'nsub': '\u2284',
                    'nsubE': '\u2AC5̸',
                    'nsube': '\u2288',
                    'nsubset': '\u2282⃒',
                    'nsubseteq': '\u2288',
                    'nsubseteqq': '\u2AC5̸',
                    'nsucc': '\u2281',
                    'nsucceq': '\u2AB0̸',
                    'nsup': '\u2285',
                    'nsupE': '\u2AC6̸',
                    'nsupe': '\u2289',
                    'nsupset': '\u2283⃒',
                    'nsupseteq': '\u2289',
                    'nsupseteqq': '\u2AC6̸',
                    'ntgl': '\u2279',
                    'Ntilde': 'Ñ',
                    'ntilde': 'ñ',
                    'ntlg': '\u2278',
                    'ntriangleleft': '\u22EA',
                    'ntrianglelefteq': '\u22EC',
                    'ntriangleright': '\u22EB',
                    'ntrianglerighteq': '\u22ED',
                    'Nu': 'Ν',
                    'nu': 'ν',
                    'num': '#',
                    'numero': '\u2116',
                    'numsp': '\u2007',
                    'nvap': '\u224D⃒',
                    'nvdash': '\u22AC',
                    'nvDash': '\u22AD',
                    'nVdash': '\u22AE',
                    'nVDash': '\u22AF',
                    'nvge': '\u2265⃒',
                    'nvgt': '>⃒',
                    'nvHarr': '\u2904',
                    'nvinfin': '\u29DE',
                    'nvlArr': '\u2902',
                    'nvle': '\u2264⃒',
                    'nvlt': '<⃒',
                    'nvltrie': '\u22B4⃒',
                    'nvrArr': '\u2903',
                    'nvrtrie': '\u22B5⃒',
                    'nvsim': '\u223C⃒',
                    'nwarhk': '\u2923',
                    'nwarr': '\u2196',
                    'nwArr': '\u21D6',
                    'nwarrow': '\u2196',
                    'nwnear': '\u2927',
                    'Oacute': 'Ó',
                    'oacute': 'ó',
                    'oast': '\u229B',
                    'Ocirc': 'Ô',
                    'ocirc': 'ô',
                    'ocir': '\u229A',
                    'Ocy': 'О',
                    'ocy': 'о',
                    'odash': '\u229D',
                    'Odblac': 'Ő',
                    'odblac': 'ő',
                    'odiv': '\u2A38',
                    'odot': '\u2299',
                    'odsold': '\u29BC',
                    'OElig': 'Œ',
                    'oelig': 'œ',
                    'ofcir': '\u29BF',
                    'Ofr': '\uD835\uDD12',
                    'ofr': '\uD835\uDD2C',
                    'ogon': '\u02DB',
                    'Ograve': 'Ò',
                    'ograve': 'ò',
                    'ogt': '\u29C1',
                    'ohbar': '\u29B5',
                    'ohm': 'Ω',
                    'oint': '\u222E',
                    'olarr': '\u21BA',
                    'olcir': '\u29BE',
                    'olcross': '\u29BB',
                    'oline': '\u203E',
                    'olt': '\u29C0',
                    'Omacr': 'Ō',
                    'omacr': 'ō',
                    'Omega': 'Ω',
                    'omega': 'ω',
                    'Omicron': 'Ο',
                    'omicron': 'ο',
                    'omid': '\u29B6',
                    'ominus': '\u2296',
                    'Oopf': '\uD835\uDD46',
                    'oopf': '\uD835\uDD60',
                    'opar': '\u29B7',
                    'OpenCurlyDoubleQuote': '\u201C',
                    'OpenCurlyQuote': '\u2018',
                    'operp': '\u29B9',
                    'oplus': '\u2295',
                    'orarr': '\u21BB',
                    'Or': '\u2A54',
                    'or': '\u2228',
                    'ord': '\u2A5D',
                    'order': 'ℴ',
                    'orderof': 'ℴ',
                    'ordf': 'ª',
                    'ordm': 'º',
                    'origof': '\u22B6',
                    'oror': '\u2A56',
                    'orslope': '\u2A57',
                    'orv': '\u2A5B',
                    'oS': '\u24C8',
                    'Oscr': '\uD835\uDCAA',
                    'oscr': 'ℴ',
                    'Oslash': 'Ø',
                    'oslash': 'ø',
                    'osol': '\u2298',
                    'Otilde': 'Õ',
                    'otilde': 'õ',
                    'otimesas': '\u2A36',
                    'Otimes': '\u2A37',
                    'otimes': '\u2297',
                    'Ouml': 'Ö',
                    'ouml': 'ö',
                    'ovbar': '\u233D',
                    'OverBar': '\u203E',
                    'OverBrace': '\u23DE',
                    'OverBracket': '\u23B4',
                    'OverParenthesis': '\u23DC',
                    'para': '\xB6',
                    'parallel': '\u2225',
                    'par': '\u2225',
                    'parsim': '\u2AF3',
                    'parsl': '\u2AFD',
                    'part': '\u2202',
                    'PartialD': '\u2202',
                    'Pcy': 'П',
                    'pcy': 'п',
                    'percnt': '%',
                    'period': '.',
                    'permil': '\u2030',
                    'perp': '\u22A5',
                    'pertenk': '\u2031',
                    'Pfr': '\uD835\uDD13',
                    'pfr': '\uD835\uDD2D',
                    'Phi': 'Φ',
                    'phi': 'φ',
                    'phiv': 'ϕ',
                    'phmmat': 'ℳ',
                    'phone': '\u260E',
                    'Pi': 'Π',
                    'pi': 'π',
                    'pitchfork': '\u22D4',
                    'piv': 'ϖ',
                    'planck': 'ℏ',
                    'planckh': 'ℎ',
                    'plankv': 'ℏ',
                    'plusacir': '\u2A23',
                    'plusb': '\u229E',
                    'pluscir': '\u2A22',
                    'plus': '+',
                    'plusdo': '\u2214',
                    'plusdu': '\u2A25',
                    'pluse': '\u2A72',
                    'PlusMinus': '\xB1',
                    'plusmn': '\xB1',
                    'plussim': '\u2A26',
                    'plustwo': '\u2A27',
                    'pm': '\xB1',
                    'Poincareplane': 'ℌ',
                    'pointint': '\u2A15',
                    'popf': '\uD835\uDD61',
                    'Popf': 'ℙ',
                    'pound': '\xA3',
                    'prap': '\u2AB7',
                    'Pr': '\u2ABB',
                    'pr': '\u227A',
                    'prcue': '\u227C',
                    'precapprox': '\u2AB7',
                    'prec': '\u227A',
                    'preccurlyeq': '\u227C',
                    'Precedes': '\u227A',
                    'PrecedesEqual': '\u2AAF',
                    'PrecedesSlantEqual': '\u227C',
                    'PrecedesTilde': '\u227E',
                    'preceq': '\u2AAF',
                    'precnapprox': '\u2AB9',
                    'precneqq': '\u2AB5',
                    'precnsim': '\u22E8',
                    'pre': '\u2AAF',
                    'prE': '\u2AB3',
                    'precsim': '\u227E',
                    'prime': '\u2032',
                    'Prime': '\u2033',
                    'primes': 'ℙ',
                    'prnap': '\u2AB9',
                    'prnE': '\u2AB5',
                    'prnsim': '\u22E8',
                    'prod': '\u220F',
                    'Product': '\u220F',
                    'profalar': '\u232E',
                    'profline': '\u2312',
                    'profsurf': '\u2313',
                    'prop': '\u221D',
                    'Proportional': '\u221D',
                    'Proportion': '\u2237',
                    'propto': '\u221D',
                    'prsim': '\u227E',
                    'prurel': '\u22B0',
                    'Pscr': '\uD835\uDCAB',
                    'pscr': '\uD835\uDCC5',
                    'Psi': 'Ψ',
                    'psi': 'ψ',
                    'puncsp': '\u2008',
                    'Qfr': '\uD835\uDD14',
                    'qfr': '\uD835\uDD2E',
                    'qint': '\u2A0C',
                    'qopf': '\uD835\uDD62',
                    'Qopf': 'ℚ',
                    'qprime': '\u2057',
                    'Qscr': '\uD835\uDCAC',
                    'qscr': '\uD835\uDCC6',
                    'quaternions': 'ℍ',
                    'quatint': '\u2A16',
                    'quest': '?',
                    'questeq': '\u225F',
                    'quot': '"',
                    'QUOT': '"',
                    'rAarr': '\u21DB',
                    'race': '\u223Ḏ',
                    'Racute': 'Ŕ',
                    'racute': 'ŕ',
                    'radic': '\u221A',
                    'raemptyv': '\u29B3',
                    'rang': '\u27E9',
                    'Rang': '\u27EB',
                    'rangd': '\u2992',
                    'range': '\u29A5',
                    'rangle': '\u27E9',
                    'raquo': '\xBB',
                    'rarrap': '\u2975',
                    'rarrb': '\u21E5',
                    'rarrbfs': '\u2920',
                    'rarrc': '\u2933',
                    'rarr': '\u2192',
                    'Rarr': '\u21A0',
                    'rArr': '\u21D2',
                    'rarrfs': '\u291E',
                    'rarrhk': '\u21AA',
                    'rarrlp': '\u21AC',
                    'rarrpl': '\u2945',
                    'rarrsim': '\u2974',
                    'Rarrtl': '\u2916',
                    'rarrtl': '\u21A3',
                    'rarrw': '\u219D',
                    'ratail': '\u291A',
                    'rAtail': '\u291C',
                    'ratio': '\u2236',
                    'rationals': 'ℚ',
                    'rbarr': '\u290D',
                    'rBarr': '\u290F',
                    'RBarr': '\u2910',
                    'rbbrk': '\u2773',
                    'rbrace': '}',
                    'rbrack': ']',
                    'rbrke': '\u298C',
                    'rbrksld': '\u298E',
                    'rbrkslu': '\u2990',
                    'Rcaron': 'Ř',
                    'rcaron': 'ř',
                    'Rcedil': 'Ŗ',
                    'rcedil': 'ŗ',
                    'rceil': '\u2309',
                    'rcub': '}',
                    'Rcy': 'Р',
                    'rcy': 'р',
                    'rdca': '\u2937',
                    'rdldhar': '\u2969',
                    'rdquo': '\u201D',
                    'rdquor': '\u201D',
                    'rdsh': '\u21B3',
                    'real': 'ℜ',
                    'realine': 'ℛ',
                    'realpart': 'ℜ',
                    'reals': 'ℝ',
                    'Re': 'ℜ',
                    'rect': '\u25AD',
                    'reg': '\xAE',
                    'REG': '\xAE',
                    'ReverseElement': '\u220B',
                    'ReverseEquilibrium': '\u21CB',
                    'ReverseUpEquilibrium': '\u296F',
                    'rfisht': '\u297D',
                    'rfloor': '\u230B',
                    'rfr': '\uD835\uDD2F',
                    'Rfr': 'ℜ',
                    'rHar': '\u2964',
                    'rhard': '\u21C1',
                    'rharu': '\u21C0',
                    'rharul': '\u296C',
                    'Rho': 'Ρ',
                    'rho': 'ρ',
                    'rhov': 'ϱ',
                    'RightAngleBracket': '\u27E9',
                    'RightArrowBar': '\u21E5',
                    'rightarrow': '\u2192',
                    'RightArrow': '\u2192',
                    'Rightarrow': '\u21D2',
                    'RightArrowLeftArrow': '\u21C4',
                    'rightarrowtail': '\u21A3',
                    'RightCeiling': '\u2309',
                    'RightDoubleBracket': '\u27E7',
                    'RightDownTeeVector': '\u295D',
                    'RightDownVectorBar': '\u2955',
                    'RightDownVector': '\u21C2',
                    'RightFloor': '\u230B',
                    'rightharpoondown': '\u21C1',
                    'rightharpoonup': '\u21C0',
                    'rightleftarrows': '\u21C4',
                    'rightleftharpoons': '\u21CC',
                    'rightrightarrows': '\u21C9',
                    'rightsquigarrow': '\u219D',
                    'RightTeeArrow': '\u21A6',
                    'RightTee': '\u22A2',
                    'RightTeeVector': '\u295B',
                    'rightthreetimes': '\u22CC',
                    'RightTriangleBar': '\u29D0',
                    'RightTriangle': '\u22B3',
                    'RightTriangleEqual': '\u22B5',
                    'RightUpDownVector': '\u294F',
                    'RightUpTeeVector': '\u295C',
                    'RightUpVectorBar': '\u2954',
                    'RightUpVector': '\u21BE',
                    'RightVectorBar': '\u2953',
                    'RightVector': '\u21C0',
                    'ring': '\u02DA',
                    'risingdotseq': '\u2253',
                    'rlarr': '\u21C4',
                    'rlhar': '\u21CC',
                    'rlm': '\u200F',
                    'rmoustache': '\u23B1',
                    'rmoust': '\u23B1',
                    'rnmid': '\u2AEE',
                    'roang': '\u27ED',
                    'roarr': '\u21FE',
                    'robrk': '\u27E7',
                    'ropar': '\u2986',
                    'ropf': '\uD835\uDD63',
                    'Ropf': 'ℝ',
                    'roplus': '\u2A2E',
                    'rotimes': '\u2A35',
                    'RoundImplies': '\u2970',
                    'rpar': ')',
                    'rpargt': '\u2994',
                    'rppolint': '\u2A12',
                    'rrarr': '\u21C9',
                    'Rrightarrow': '\u21DB',
                    'rsaquo': '\u203A',
                    'rscr': '\uD835\uDCC7',
                    'Rscr': 'ℛ',
                    'rsh': '\u21B1',
                    'Rsh': '\u21B1',
                    'rsqb': ']',
                    'rsquo': '\u2019',
                    'rsquor': '\u2019',
                    'rthree': '\u22CC',
                    'rtimes': '\u22CA',
                    'rtri': '\u25B9',
                    'rtrie': '\u22B5',
                    'rtrif': '\u25B8',
                    'rtriltri': '\u29CE',
                    'RuleDelayed': '\u29F4',
                    'ruluhar': '\u2968',
                    'rx': '\u211E',
                    'Sacute': 'Ś',
                    'sacute': 'ś',
                    'sbquo': '\u201A',
                    'scap': '\u2AB8',
                    'Scaron': 'Š',
                    'scaron': 'š',
                    'Sc': '\u2ABC',
                    'sc': '\u227B',
                    'sccue': '\u227D',
                    'sce': '\u2AB0',
                    'scE': '\u2AB4',
                    'Scedil': 'Ş',
                    'scedil': 'ş',
                    'Scirc': 'Ŝ',
                    'scirc': 'ŝ',
                    'scnap': '\u2ABA',
                    'scnE': '\u2AB6',
                    'scnsim': '\u22E9',
                    'scpolint': '\u2A13',
                    'scsim': '\u227F',
                    'Scy': 'С',
                    'scy': 'с',
                    'sdotb': '\u22A1',
                    'sdot': '\u22C5',
                    'sdote': '\u2A66',
                    'searhk': '\u2925',
                    'searr': '\u2198',
                    'seArr': '\u21D8',
                    'searrow': '\u2198',
                    'sect': '\xA7',
                    'semi': ';',
                    'seswar': '\u2929',
                    'setminus': '\u2216',
                    'setmn': '\u2216',
                    'sext': '\u2736',
                    'Sfr': '\uD835\uDD16',
                    'sfr': '\uD835\uDD30',
                    'sfrown': '\u2322',
                    'sharp': '\u266F',
                    'SHCHcy': 'Щ',
                    'shchcy': 'щ',
                    'SHcy': 'Ш',
                    'shcy': 'ш',
                    'ShortDownArrow': '\u2193',
                    'ShortLeftArrow': '\u2190',
                    'shortmid': '\u2223',
                    'shortparallel': '\u2225',
                    'ShortRightArrow': '\u2192',
                    'ShortUpArrow': '\u2191',
                    'shy': '\xAD',
                    'Sigma': 'Σ',
                    'sigma': 'σ',
                    'sigmaf': 'ς',
                    'sigmav': 'ς',
                    'sim': '\u223C',
                    'simdot': '\u2A6A',
                    'sime': '\u2243',
                    'simeq': '\u2243',
                    'simg': '\u2A9E',
                    'simgE': '\u2AA0',
                    'siml': '\u2A9D',
                    'simlE': '\u2A9F',
                    'simne': '\u2246',
                    'simplus': '\u2A24',
                    'simrarr': '\u2972',
                    'slarr': '\u2190',
                    'SmallCircle': '\u2218',
                    'smallsetminus': '\u2216',
                    'smashp': '\u2A33',
                    'smeparsl': '\u29E4',
                    'smid': '\u2223',
                    'smile': '\u2323',
                    'smt': '\u2AAA',
                    'smte': '\u2AAC',
                    'smtes': '\u2AAC︀',
                    'SOFTcy': 'Ь',
                    'softcy': 'ь',
                    'solbar': '\u233F',
                    'solb': '\u29C4',
                    'sol': '/',
                    'Sopf': '\uD835\uDD4A',
                    'sopf': '\uD835\uDD64',
                    'spades': '\u2660',
                    'spadesuit': '\u2660',
                    'spar': '\u2225',
                    'sqcap': '\u2293',
                    'sqcaps': '\u2293︀',
                    'sqcup': '\u2294',
                    'sqcups': '\u2294︀',
                    'Sqrt': '\u221A',
                    'sqsub': '\u228F',
                    'sqsube': '\u2291',
                    'sqsubset': '\u228F',
                    'sqsubseteq': '\u2291',
                    'sqsup': '\u2290',
                    'sqsupe': '\u2292',
                    'sqsupset': '\u2290',
                    'sqsupseteq': '\u2292',
                    'square': '\u25A1',
                    'Square': '\u25A1',
                    'SquareIntersection': '\u2293',
                    'SquareSubset': '\u228F',
                    'SquareSubsetEqual': '\u2291',
                    'SquareSuperset': '\u2290',
                    'SquareSupersetEqual': '\u2292',
                    'SquareUnion': '\u2294',
                    'squarf': '\u25AA',
                    'squ': '\u25A1',
                    'squf': '\u25AA',
                    'srarr': '\u2192',
                    'Sscr': '\uD835\uDCAE',
                    'sscr': '\uD835\uDCC8',
                    'ssetmn': '\u2216',
                    'ssmile': '\u2323',
                    'sstarf': '\u22C6',
                    'Star': '\u22C6',
                    'star': '\u2606',
                    'starf': '\u2605',
                    'straightepsilon': 'ϵ',
                    'straightphi': 'ϕ',
                    'strns': '\xAF',
                    'sub': '\u2282',
                    'Sub': '\u22D0',
                    'subdot': '\u2ABD',
                    'subE': '\u2AC5',
                    'sube': '\u2286',
                    'subedot': '\u2AC3',
                    'submult': '\u2AC1',
                    'subnE': '\u2ACB',
                    'subne': '\u228A',
                    'subplus': '\u2ABF',
                    'subrarr': '\u2979',
                    'subset': '\u2282',
                    'Subset': '\u22D0',
                    'subseteq': '\u2286',
                    'subseteqq': '\u2AC5',
                    'SubsetEqual': '\u2286',
                    'subsetneq': '\u228A',
                    'subsetneqq': '\u2ACB',
                    'subsim': '\u2AC7',
                    'subsub': '\u2AD5',
                    'subsup': '\u2AD3',
                    'succapprox': '\u2AB8',
                    'succ': '\u227B',
                    'succcurlyeq': '\u227D',
                    'Succeeds': '\u227B',
                    'SucceedsEqual': '\u2AB0',
                    'SucceedsSlantEqual': '\u227D',
                    'SucceedsTilde': '\u227F',
                    'succeq': '\u2AB0',
                    'succnapprox': '\u2ABA',
                    'succneqq': '\u2AB6',
                    'succnsim': '\u22E9',
                    'succsim': '\u227F',
                    'SuchThat': '\u220B',
                    'sum': '\u2211',
                    'Sum': '\u2211',
                    'sung': '\u266A',
                    'sup1': '\xB9',
                    'sup2': '\xB2',
                    'sup3': '\xB3',
                    'sup': '\u2283',
                    'Sup': '\u22D1',
                    'supdot': '\u2ABE',
                    'supdsub': '\u2AD8',
                    'supE': '\u2AC6',
                    'supe': '\u2287',
                    'supedot': '\u2AC4',
                    'Superset': '\u2283',
                    'SupersetEqual': '\u2287',
                    'suphsol': '\u27C9',
                    'suphsub': '\u2AD7',
                    'suplarr': '\u297B',
                    'supmult': '\u2AC2',
                    'supnE': '\u2ACC',
                    'supne': '\u228B',
                    'supplus': '\u2AC0',
                    'supset': '\u2283',
                    'Supset': '\u22D1',
                    'supseteq': '\u2287',
                    'supseteqq': '\u2AC6',
                    'supsetneq': '\u228B',
                    'supsetneqq': '\u2ACC',
                    'supsim': '\u2AC8',
                    'supsub': '\u2AD4',
                    'supsup': '\u2AD6',
                    'swarhk': '\u2926',
                    'swarr': '\u2199',
                    'swArr': '\u21D9',
                    'swarrow': '\u2199',
                    'swnwar': '\u292A',
                    'szlig': 'ß',
                    'Tab': '\t',
                    'target': '\u2316',
                    'Tau': 'Τ',
                    'tau': 'τ',
                    'tbrk': '\u23B4',
                    'Tcaron': 'Ť',
                    'tcaron': 'ť',
                    'Tcedil': 'Ţ',
                    'tcedil': 'ţ',
                    'Tcy': 'Т',
                    'tcy': 'т',
                    'tdot': '⃛',
                    'telrec': '\u2315',
                    'Tfr': '\uD835\uDD17',
                    'tfr': '\uD835\uDD31',
                    'there4': '\u2234',
                    'therefore': '\u2234',
                    'Therefore': '\u2234',
                    'Theta': 'Θ',
                    'theta': 'θ',
                    'thetasym': 'ϑ',
                    'thetav': 'ϑ',
                    'thickapprox': '\u2248',
                    'thicksim': '\u223C',
                    'ThickSpace': '\u205F\u200A',
                    'ThinSpace': '\u2009',
                    'thinsp': '\u2009',
                    'thkap': '\u2248',
                    'thksim': '\u223C',
                    'THORN': 'Þ',
                    'thorn': 'þ',
                    'tilde': '\u02DC',
                    'Tilde': '\u223C',
                    'TildeEqual': '\u2243',
                    'TildeFullEqual': '\u2245',
                    'TildeTilde': '\u2248',
                    'timesbar': '\u2A31',
                    'timesb': '\u22A0',
                    'times': '\xD7',
                    'timesd': '\u2A30',
                    'tint': '\u222D',
                    'toea': '\u2928',
                    'topbot': '\u2336',
                    'topcir': '\u2AF1',
                    'top': '\u22A4',
                    'Topf': '\uD835\uDD4B',
                    'topf': '\uD835\uDD65',
                    'topfork': '\u2ADA',
                    'tosa': '\u2929',
                    'tprime': '\u2034',
                    'trade': '\u2122',
                    'TRADE': '\u2122',
                    'triangle': '\u25B5',
                    'triangledown': '\u25BF',
                    'triangleleft': '\u25C3',
                    'trianglelefteq': '\u22B4',
                    'triangleq': '\u225C',
                    'triangleright': '\u25B9',
                    'trianglerighteq': '\u22B5',
                    'tridot': '\u25EC',
                    'trie': '\u225C',
                    'triminus': '\u2A3A',
                    'TripleDot': '⃛',
                    'triplus': '\u2A39',
                    'trisb': '\u29CD',
                    'tritime': '\u2A3B',
                    'trpezium': '\u23E2',
                    'Tscr': '\uD835\uDCAF',
                    'tscr': '\uD835\uDCC9',
                    'TScy': 'Ц',
                    'tscy': 'ц',
                    'TSHcy': 'Ћ',
                    'tshcy': 'ћ',
                    'Tstrok': 'Ŧ',
                    'tstrok': 'ŧ',
                    'twixt': '\u226C',
                    'twoheadleftarrow': '\u219E',
                    'twoheadrightarrow': '\u21A0',
                    'Uacute': 'Ú',
                    'uacute': 'ú',
                    'uarr': '\u2191',
                    'Uarr': '\u219F',
                    'uArr': '\u21D1',
                    'Uarrocir': '\u2949',
                    'Ubrcy': 'Ў',
                    'ubrcy': 'ў',
                    'Ubreve': 'Ŭ',
                    'ubreve': 'ŭ',
                    'Ucirc': 'Û',
                    'ucirc': 'û',
                    'Ucy': 'У',
                    'ucy': 'у',
                    'udarr': '\u21C5',
                    'Udblac': 'Ű',
                    'udblac': 'ű',
                    'udhar': '\u296E',
                    'ufisht': '\u297E',
                    'Ufr': '\uD835\uDD18',
                    'ufr': '\uD835\uDD32',
                    'Ugrave': 'Ù',
                    'ugrave': 'ù',
                    'uHar': '\u2963',
                    'uharl': '\u21BF',
                    'uharr': '\u21BE',
                    'uhblk': '\u2580',
                    'ulcorn': '\u231C',
                    'ulcorner': '\u231C',
                    'ulcrop': '\u230F',
                    'ultri': '\u25F8',
                    'Umacr': 'Ū',
                    'umacr': 'ū',
                    'uml': '\xA8',
                    'UnderBar': '_',
                    'UnderBrace': '\u23DF',
                    'UnderBracket': '\u23B5',
                    'UnderParenthesis': '\u23DD',
                    'Union': '\u22C3',
                    'UnionPlus': '\u228E',
                    'Uogon': 'Ų',
                    'uogon': 'ų',
                    'Uopf': '\uD835\uDD4C',
                    'uopf': '\uD835\uDD66',
                    'UpArrowBar': '\u2912',
                    'uparrow': '\u2191',
                    'UpArrow': '\u2191',
                    'Uparrow': '\u21D1',
                    'UpArrowDownArrow': '\u21C5',
                    'updownarrow': '\u2195',
                    'UpDownArrow': '\u2195',
                    'Updownarrow': '\u21D5',
                    'UpEquilibrium': '\u296E',
                    'upharpoonleft': '\u21BF',
                    'upharpoonright': '\u21BE',
                    'uplus': '\u228E',
                    'UpperLeftArrow': '\u2196',
                    'UpperRightArrow': '\u2197',
                    'upsi': 'υ',
                    'Upsi': 'ϒ',
                    'upsih': 'ϒ',
                    'Upsilon': 'Υ',
                    'upsilon': 'υ',
                    'UpTeeArrow': '\u21A5',
                    'UpTee': '\u22A5',
                    'upuparrows': '\u21C8',
                    'urcorn': '\u231D',
                    'urcorner': '\u231D',
                    'urcrop': '\u230E',
                    'Uring': 'Ů',
                    'uring': 'ů',
                    'urtri': '\u25F9',
                    'Uscr': '\uD835\uDCB0',
                    'uscr': '\uD835\uDCCA',
                    'utdot': '\u22F0',
                    'Utilde': 'Ũ',
                    'utilde': 'ũ',
                    'utri': '\u25B5',
                    'utrif': '\u25B4',
                    'uuarr': '\u21C8',
                    'Uuml': 'Ü',
                    'uuml': 'ü',
                    'uwangle': '\u29A7',
                    'vangrt': '\u299C',
                    'varepsilon': 'ϵ',
                    'varkappa': 'ϰ',
                    'varnothing': '\u2205',
                    'varphi': 'ϕ',
                    'varpi': 'ϖ',
                    'varpropto': '\u221D',
                    'varr': '\u2195',
                    'vArr': '\u21D5',
                    'varrho': 'ϱ',
                    'varsigma': 'ς',
                    'varsubsetneq': '\u228A︀',
                    'varsubsetneqq': '\u2ACB︀',
                    'varsupsetneq': '\u228B︀',
                    'varsupsetneqq': '\u2ACC︀',
                    'vartheta': 'ϑ',
                    'vartriangleleft': '\u22B2',
                    'vartriangleright': '\u22B3',
                    'vBar': '\u2AE8',
                    'Vbar': '\u2AEB',
                    'vBarv': '\u2AE9',
                    'Vcy': 'В',
                    'vcy': 'в',
                    'vdash': '\u22A2',
                    'vDash': '\u22A8',
                    'Vdash': '\u22A9',
                    'VDash': '\u22AB',
                    'Vdashl': '\u2AE6',
                    'veebar': '\u22BB',
                    'vee': '\u2228',
                    'Vee': '\u22C1',
                    'veeeq': '\u225A',
                    'vellip': '\u22EE',
                    'verbar': '|',
                    'Verbar': '\u2016',
                    'vert': '|',
                    'Vert': '\u2016',
                    'VerticalBar': '\u2223',
                    'VerticalLine': '|',
                    'VerticalSeparator': '\u2758',
                    'VerticalTilde': '\u2240',
                    'VeryThinSpace': '\u200A',
                    'Vfr': '\uD835\uDD19',
                    'vfr': '\uD835\uDD33',
                    'vltri': '\u22B2',
                    'vnsub': '\u2282⃒',
                    'vnsup': '\u2283⃒',
                    'Vopf': '\uD835\uDD4D',
                    'vopf': '\uD835\uDD67',
                    'vprop': '\u221D',
                    'vrtri': '\u22B3',
                    'Vscr': '\uD835\uDCB1',
                    'vscr': '\uD835\uDCCB',
                    'vsubnE': '\u2ACB︀',
                    'vsubne': '\u228A︀',
                    'vsupnE': '\u2ACC︀',
                    'vsupne': '\u228B︀',
                    'Vvdash': '\u22AA',
                    'vzigzag': '\u299A',
                    'Wcirc': 'Ŵ',
                    'wcirc': 'ŵ',
                    'wedbar': '\u2A5F',
                    'wedge': '\u2227',
                    'Wedge': '\u22C0',
                    'wedgeq': '\u2259',
                    'weierp': '\u2118',
                    'Wfr': '\uD835\uDD1A',
                    'wfr': '\uD835\uDD34',
                    'Wopf': '\uD835\uDD4E',
                    'wopf': '\uD835\uDD68',
                    'wp': '\u2118',
                    'wr': '\u2240',
                    'wreath': '\u2240',
                    'Wscr': '\uD835\uDCB2',
                    'wscr': '\uD835\uDCCC',
                    'xcap': '\u22C2',
                    'xcirc': '\u25EF',
                    'xcup': '\u22C3',
                    'xdtri': '\u25BD',
                    'Xfr': '\uD835\uDD1B',
                    'xfr': '\uD835\uDD35',
                    'xharr': '\u27F7',
                    'xhArr': '\u27FA',
                    'Xi': 'Ξ',
                    'xi': 'ξ',
                    'xlarr': '\u27F5',
                    'xlArr': '\u27F8',
                    'xmap': '\u27FC',
                    'xnis': '\u22FB',
                    'xodot': '\u2A00',
                    'Xopf': '\uD835\uDD4F',
                    'xopf': '\uD835\uDD69',
                    'xoplus': '\u2A01',
                    'xotime': '\u2A02',
                    'xrarr': '\u27F6',
                    'xrArr': '\u27F9',
                    'Xscr': '\uD835\uDCB3',
                    'xscr': '\uD835\uDCCD',
                    'xsqcup': '\u2A06',
                    'xuplus': '\u2A04',
                    'xutri': '\u25B3',
                    'xvee': '\u22C1',
                    'xwedge': '\u22C0',
                    'Yacute': 'Ý',
                    'yacute': 'ý',
                    'YAcy': 'Я',
                    'yacy': 'я',
                    'Ycirc': 'Ŷ',
                    'ycirc': 'ŷ',
                    'Ycy': 'Ы',
                    'ycy': 'ы',
                    'yen': '\xA5',
                    'Yfr': '\uD835\uDD1C',
                    'yfr': '\uD835\uDD36',
                    'YIcy': 'Ї',
                    'yicy': 'ї',
                    'Yopf': '\uD835\uDD50',
                    'yopf': '\uD835\uDD6A',
                    'Yscr': '\uD835\uDCB4',
                    'yscr': '\uD835\uDCCE',
                    'YUcy': 'Ю',
                    'yucy': 'ю',
                    'yuml': 'ÿ',
                    'Yuml': 'Ÿ',
                    'Zacute': 'Ź',
                    'zacute': 'ź',
                    'Zcaron': 'Ž',
                    'zcaron': 'ž',
                    'Zcy': 'З',
                    'zcy': 'з',
                    'Zdot': 'Ż',
                    'zdot': 'ż',
                    'zeetrf': 'ℨ',
                    'ZeroWidthSpace': '\u200B',
                    'Zeta': 'Ζ',
                    'zeta': 'ζ',
                    'zfr': '\uD835\uDD37',
                    'Zfr': 'ℨ',
                    'ZHcy': 'Ж',
                    'zhcy': 'ж',
                    'zigrarr': '\u21DD',
                    'zopf': '\uD835\uDD6B',
                    'Zopf': 'ℤ',
                    'Zscr': '\uD835\uDCB5',
                    'zscr': '\uD835\uDCCF',
                    'zwj': '‍',
                    'zwnj': '‌'
                };
            },
            {}
        ],
        30: [
            function (require, module, exports) {
                module.exports = {
                    'Aacute': 'Á',
                    'aacute': 'á',
                    'Acirc': 'Â',
                    'acirc': 'â',
                    'acute': '\xB4',
                    'AElig': 'Æ',
                    'aelig': 'æ',
                    'Agrave': 'À',
                    'agrave': 'à',
                    'amp': '&',
                    'AMP': '&',
                    'Aring': 'Å',
                    'aring': 'å',
                    'Atilde': 'Ã',
                    'atilde': 'ã',
                    'Auml': 'Ä',
                    'auml': 'ä',
                    'brvbar': '\xA6',
                    'Ccedil': 'Ç',
                    'ccedil': 'ç',
                    'cedil': '\xB8',
                    'cent': '\xA2',
                    'copy': '\xA9',
                    'COPY': '\xA9',
                    'curren': '\xA4',
                    'deg': '\xB0',
                    'divide': '\xF7',
                    'Eacute': 'É',
                    'eacute': 'é',
                    'Ecirc': 'Ê',
                    'ecirc': 'ê',
                    'Egrave': 'È',
                    'egrave': 'è',
                    'ETH': 'Ð',
                    'eth': 'ð',
                    'Euml': 'Ë',
                    'euml': 'ë',
                    'frac12': '\xBD',
                    'frac14': '\xBC',
                    'frac34': '\xBE',
                    'gt': '>',
                    'GT': '>',
                    'Iacute': 'Í',
                    'iacute': 'í',
                    'Icirc': 'Î',
                    'icirc': 'î',
                    'iexcl': '\xA1',
                    'Igrave': 'Ì',
                    'igrave': 'ì',
                    'iquest': '\xBF',
                    'Iuml': 'Ï',
                    'iuml': 'ï',
                    'laquo': '\xAB',
                    'lt': '<',
                    'LT': '<',
                    'macr': '\xAF',
                    'micro': 'µ',
                    'middot': '\xB7',
                    'nbsp': '\xA0',
                    'not': '\xAC',
                    'Ntilde': 'Ñ',
                    'ntilde': 'ñ',
                    'Oacute': 'Ó',
                    'oacute': 'ó',
                    'Ocirc': 'Ô',
                    'ocirc': 'ô',
                    'Ograve': 'Ò',
                    'ograve': 'ò',
                    'ordf': 'ª',
                    'ordm': 'º',
                    'Oslash': 'Ø',
                    'oslash': 'ø',
                    'Otilde': 'Õ',
                    'otilde': 'õ',
                    'Ouml': 'Ö',
                    'ouml': 'ö',
                    'para': '\xB6',
                    'plusmn': '\xB1',
                    'pound': '\xA3',
                    'quot': '"',
                    'QUOT': '"',
                    'raquo': '\xBB',
                    'reg': '\xAE',
                    'REG': '\xAE',
                    'sect': '\xA7',
                    'shy': '\xAD',
                    'sup1': '\xB9',
                    'sup2': '\xB2',
                    'sup3': '\xB3',
                    'szlig': 'ß',
                    'THORN': 'Þ',
                    'thorn': 'þ',
                    'times': '\xD7',
                    'Uacute': 'Ú',
                    'uacute': 'ú',
                    'Ucirc': 'Û',
                    'ucirc': 'û',
                    'Ugrave': 'Ù',
                    'ugrave': 'ù',
                    'uml': '\xA8',
                    'Uuml': 'Ü',
                    'uuml': 'ü',
                    'Yacute': 'Ý',
                    'yacute': 'ý',
                    'yen': '\xA5',
                    'yuml': 'ÿ'
                };
            },
            {}
        ],
        31: [
            function (require, module, exports) {
                module.exports = {
                    'amp': '&',
                    'apos': '\'',
                    'gt': '>',
                    'lt': '<',
                    'quot': '"'
                };
            },
            {}
        ],
        32: [
            function (require, module, exports) {
                (function (global) {
                    (function () {
                        'use strict';
                        var Syntax, Precedence, BinaryPrecedence, SourceNode, estraverse, esutils, isArray, base, indent, json, renumber, hexadecimal, quotes, escapeless, newline, space, parentheses, semicolons, safeConcatenation, directive, extra, parse, sourceMap, sourceCode, preserveBlankLines, FORMAT_MINIFY, FORMAT_DEFAULTS;
                        estraverse = require('estraverse');
                        esutils = require('esutils');
                        Syntax = estraverse.Syntax;
                        function isExpression(node) {
                            return CodeGenerator.Expression.hasOwnProperty(node.type);
                        }
                        function isStatement(node) {
                            return CodeGenerator.Statement.hasOwnProperty(node.type);
                        }
                        Precedence = {
                            Sequence: 0,
                            Yield: 1,
                            Await: 1,
                            Assignment: 1,
                            Conditional: 2,
                            ArrowFunction: 2,
                            LogicalOR: 3,
                            LogicalAND: 4,
                            BitwiseOR: 5,
                            BitwiseXOR: 6,
                            BitwiseAND: 7,
                            Equality: 8,
                            Relational: 9,
                            BitwiseSHIFT: 10,
                            Additive: 11,
                            Multiplicative: 12,
                            Unary: 13,
                            Postfix: 14,
                            Call: 15,
                            New: 16,
                            TaggedTemplate: 17,
                            Member: 18,
                            Primary: 19
                        };
                        BinaryPrecedence = {
                            '||': Precedence.LogicalOR,
                            '&&': Precedence.LogicalAND,
                            '|': Precedence.BitwiseOR,
                            '^': Precedence.BitwiseXOR,
                            '&': Precedence.BitwiseAND,
                            '==': Precedence.Equality,
                            '!=': Precedence.Equality,
                            '===': Precedence.Equality,
                            '!==': Precedence.Equality,
                            'is': Precedence.Equality,
                            'isnt': Precedence.Equality,
                            '<': Precedence.Relational,
                            '>': Precedence.Relational,
                            '<=': Precedence.Relational,
                            '>=': Precedence.Relational,
                            'in': Precedence.Relational,
                            'instanceof': Precedence.Relational,
                            '<<': Precedence.BitwiseSHIFT,
                            '>>': Precedence.BitwiseSHIFT,
                            '>>>': Precedence.BitwiseSHIFT,
                            '+': Precedence.Additive,
                            '-': Precedence.Additive,
                            '*': Precedence.Multiplicative,
                            '%': Precedence.Multiplicative,
                            '/': Precedence.Multiplicative
                        };
                        var F_ALLOW_IN = 1, F_ALLOW_CALL = 1 << 1, F_ALLOW_UNPARATH_NEW = 1 << 2, F_FUNC_BODY = 1 << 3, F_DIRECTIVE_CTX = 1 << 4, F_SEMICOLON_OPT = 1 << 5;
                        var E_FTT = F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW, E_TTF = F_ALLOW_IN | F_ALLOW_CALL, E_TTT = F_ALLOW_IN | F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW, E_TFF = F_ALLOW_IN, E_FFT = F_ALLOW_UNPARATH_NEW, E_TFT = F_ALLOW_IN | F_ALLOW_UNPARATH_NEW;
                        var S_TFFF = F_ALLOW_IN, S_TFFT = F_ALLOW_IN | F_SEMICOLON_OPT, S_FFFF = 0, S_TFTF = F_ALLOW_IN | F_DIRECTIVE_CTX, S_TTFF = F_ALLOW_IN | F_FUNC_BODY;
                        function getDefaultOptions() {
                            return {
                                indent: null,
                                base: null,
                                parse: null,
                                comment: false,
                                format: {
                                    indent: {
                                        style: '    ',
                                        base: 0,
                                        adjustMultilineComment: false
                                    },
                                    newline: '\n',
                                    space: ' ',
                                    json: false,
                                    renumber: false,
                                    hexadecimal: false,
                                    quotes: 'single',
                                    escapeless: false,
                                    compact: false,
                                    parentheses: true,
                                    semicolons: true,
                                    safeConcatenation: false,
                                    preserveBlankLines: false
                                },
                                moz: {
                                    comprehensionExpressionStartsWithAssignment: false,
                                    starlessGenerator: false
                                },
                                sourceMap: null,
                                sourceMapRoot: null,
                                sourceMapWithCode: false,
                                directive: false,
                                raw: true,
                                verbatim: null,
                                sourceCode: null
                            };
                        }
                        function stringRepeat(str, num) {
                            var result = '';
                            for (num |= 0; num > 0; num >>>= 1, str += str) {
                                if (num & 1) {
                                    result += str;
                                }
                            }
                            return result;
                        }
                        isArray = Array.isArray;
                        if (!isArray) {
                            isArray = function isArray(array) {
                                return Object.prototype.toString.call(array) === '[object Array]';
                            };
                        }
                        function hasLineTerminator(str) {
                            return /[\r\n]/g.test(str);
                        }
                        function endsWithLineTerminator(str) {
                            var len = str.length;
                            return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));
                        }
                        function merge(target, override) {
                            var key;
                            for (key in override) {
                                if (override.hasOwnProperty(key)) {
                                    target[key] = override[key];
                                }
                            }
                            return target;
                        }
                        function updateDeeply(target, override) {
                            var key, val;
                            function isHashObject(target) {
                                return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);
                            }
                            for (key in override) {
                                if (override.hasOwnProperty(key)) {
                                    val = override[key];
                                    if (isHashObject(val)) {
                                        if (isHashObject(target[key])) {
                                            updateDeeply(target[key], val);
                                        } else {
                                            target[key] = updateDeeply({}, val);
                                        }
                                    } else {
                                        target[key] = val;
                                    }
                                }
                            }
                            return target;
                        }
                        function generateNumber(value) {
                            var result, point, temp, exponent, pos;
                            if (value !== value) {
                                throw new Error('Numeric literal whose value is NaN');
                            }
                            if (value < 0 || value === 0 && 1 / value < 0) {
                                throw new Error('Numeric literal whose value is negative');
                            }
                            if (value === 1 / 0) {
                                return json ? 'null' : renumber ? '1e400' : '1e+400';
                            }
                            result = '' + value;
                            if (!renumber || result.length < 3) {
                                return result;
                            }
                            point = result.indexOf('.');
                            if (!json && result.charCodeAt(0) === 48 && point === 1) {
                                point = 0;
                                result = result.slice(1);
                            }
                            temp = result;
                            result = result.replace('e+', 'e');
                            exponent = 0;
                            if ((pos = temp.indexOf('e')) > 0) {
                                exponent = +temp.slice(pos + 1);
                                temp = temp.slice(0, pos);
                            }
                            if (point >= 0) {
                                exponent -= temp.length - point - 1;
                                temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';
                            }
                            pos = 0;
                            while (temp.charCodeAt(temp.length + pos - 1) === 48) {
                                --pos;
                            }
                            if (pos !== 0) {
                                exponent -= pos;
                                temp = temp.slice(0, pos);
                            }
                            if (exponent !== 0) {
                                temp += 'e' + exponent;
                            }
                            if ((temp.length < result.length || hexadecimal && value > 1000000000000 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length) && +temp === value) {
                                result = temp;
                            }
                            return result;
                        }
                        function escapeRegExpCharacter(ch, previousIsBackslash) {
                            if ((ch & ~1) === 8232) {
                                return (previousIsBackslash ? 'u' : '\\u') + (ch === 8232 ? '2028' : '2029');
                            } else if (ch === 10 || ch === 13) {
                                return (previousIsBackslash ? '' : '\\') + (ch === 10 ? 'n' : 'r');
                            }
                            return String.fromCharCode(ch);
                        }
                        function generateRegExp(reg) {
                            var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;
                            result = reg.toString();
                            if (reg.source) {
                                match = result.match(/\/([^/]*)$/);
                                if (!match) {
                                    return result;
                                }
                                flags = match[1];
                                result = '';
                                characterInBrack = false;
                                previousIsBackslash = false;
                                for (i = 0, iz = reg.source.length; i < iz; ++i) {
                                    ch = reg.source.charCodeAt(i);
                                    if (!previousIsBackslash) {
                                        if (characterInBrack) {
                                            if (ch === 93) {
                                                characterInBrack = false;
                                            }
                                        } else {
                                            if (ch === 47) {
                                                result += '\\';
                                            } else if (ch === 91) {
                                                characterInBrack = true;
                                            }
                                        }
                                        result += escapeRegExpCharacter(ch, previousIsBackslash);
                                        previousIsBackslash = ch === 92;
                                    } else {
                                        result += escapeRegExpCharacter(ch, previousIsBackslash);
                                        previousIsBackslash = false;
                                    }
                                }
                                return '/' + result + '/' + flags;
                            }
                            return result;
                        }
                        function escapeAllowedCharacter(code, next) {
                            var hex;
                            if (code === 8) {
                                return '\\b';
                            }
                            if (code === 12) {
                                return '\\f';
                            }
                            if (code === 9) {
                                return '\\t';
                            }
                            hex = code.toString(16).toUpperCase();
                            if (json || code > 255) {
                                return '\\u' + '0000'.slice(hex.length) + hex;
                            } else if (code === 0 && !esutils.code.isDecimalDigit(next)) {
                                return '\\0';
                            } else if (code === 11) {
                                return '\\x0B';
                            } else {
                                return '\\x' + '00'.slice(hex.length) + hex;
                            }
                        }
                        function escapeDisallowedCharacter(code) {
                            if (code === 92) {
                                return '\\\\';
                            }
                            if (code === 10) {
                                return '\\n';
                            }
                            if (code === 13) {
                                return '\\r';
                            }
                            if (code === 8232) {
                                return '\\u2028';
                            }
                            if (code === 8233) {
                                return '\\u2029';
                            }
                            throw new Error('Incorrectly classified character');
                        }
                        function escapeDirective(str) {
                            var i, iz, code, quote;
                            quote = quotes === 'double' ? '"' : '\'';
                            for (i = 0, iz = str.length; i < iz; ++i) {
                                code = str.charCodeAt(i);
                                if (code === 39) {
                                    quote = '"';
                                    break;
                                } else if (code === 34) {
                                    quote = '\'';
                                    break;
                                } else if (code === 92) {
                                    ++i;
                                }
                            }
                            return quote + str + quote;
                        }
                        function escapeString(str) {
                            var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;
                            for (i = 0, len = str.length; i < len; ++i) {
                                code = str.charCodeAt(i);
                                if (code === 39) {
                                    ++singleQuotes;
                                } else if (code === 34) {
                                    ++doubleQuotes;
                                } else if (code === 47 && json) {
                                    result += '\\';
                                } else if (esutils.code.isLineTerminator(code) || code === 92) {
                                    result += escapeDisallowedCharacter(code);
                                    continue;
                                } else if (!esutils.code.isIdentifierPartES5(code) && (json && code < 32 || !json && !escapeless && (code < 32 || code > 126))) {
                                    result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));
                                    continue;
                                }
                                result += String.fromCharCode(code);
                            }
                            single = !(quotes === 'double' || quotes === 'auto' && doubleQuotes < singleQuotes);
                            quote = single ? '\'' : '"';
                            if (!(single ? singleQuotes : doubleQuotes)) {
                                return quote + result + quote;
                            }
                            str = result;
                            result = quote;
                            for (i = 0, len = str.length; i < len; ++i) {
                                code = str.charCodeAt(i);
                                if (code === 39 && single || code === 34 && !single) {
                                    result += '\\';
                                }
                                result += String.fromCharCode(code);
                            }
                            return result + quote;
                        }
                        function flattenToString(arr) {
                            var i, iz, elem, result = '';
                            for (i = 0, iz = arr.length; i < iz; ++i) {
                                elem = arr[i];
                                result += isArray(elem) ? flattenToString(elem) : elem;
                            }
                            return result;
                        }
                        function toSourceNodeWhenNeeded(generated, node) {
                            if (!sourceMap) {
                                if (isArray(generated)) {
                                    return flattenToString(generated);
                                } else {
                                    return generated;
                                }
                            }
                            if (node == null) {
                                if (generated instanceof SourceNode) {
                                    return generated;
                                } else {
                                    node = {};
                                }
                            }
                            if (node.loc == null) {
                                return new SourceNode(null, null, sourceMap, generated, node.name || null);
                            }
                            return new SourceNode(node.loc.start.line, node.loc.start.column, sourceMap === true ? node.loc.source || null : sourceMap, generated, node.name || null);
                        }
                        function noEmptySpace() {
                            return space ? space : ' ';
                        }
                        function join(left, right) {
                            var leftSource, rightSource, leftCharCode, rightCharCode;
                            leftSource = toSourceNodeWhenNeeded(left).toString();
                            if (leftSource.length === 0) {
                                return [right];
                            }
                            rightSource = toSourceNodeWhenNeeded(right).toString();
                            if (rightSource.length === 0) {
                                return [left];
                            }
                            leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
                            rightCharCode = rightSource.charCodeAt(0);
                            if ((leftCharCode === 43 || leftCharCode === 45) && leftCharCode === rightCharCode || esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode) || leftCharCode === 47 && rightCharCode === 105) {
                                return [
                                    left,
                                    noEmptySpace(),
                                    right
                                ];
                            } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) || esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {
                                return [
                                    left,
                                    right
                                ];
                            }
                            return [
                                left,
                                space,
                                right
                            ];
                        }
                        function addIndent(stmt) {
                            return [
                                base,
                                stmt
                            ];
                        }
                        function withIndent(fn) {
                            var previousBase;
                            previousBase = base;
                            base += indent;
                            fn(base);
                            base = previousBase;
                        }
                        function calculateSpaces(str) {
                            var i;
                            for (i = str.length - 1; i >= 0; --i) {
                                if (esutils.code.isLineTerminator(str.charCodeAt(i))) {
                                    break;
                                }
                            }
                            return str.length - 1 - i;
                        }
                        function adjustMultilineComment(value, specialBase) {
                            var array, i, len, line, j, spaces, previousBase, sn;
                            array = value.split(/\r\n|[\r\n]/);
                            spaces = Number.MAX_VALUE;
                            for (i = 1, len = array.length; i < len; ++i) {
                                line = array[i];
                                j = 0;
                                while (j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))) {
                                    ++j;
                                }
                                if (spaces > j) {
                                    spaces = j;
                                }
                            }
                            if (typeof specialBase !== 'undefined') {
                                previousBase = base;
                                if (array[1][spaces] === '*') {
                                    specialBase += ' ';
                                }
                                base = specialBase;
                            } else {
                                if (spaces & 1) {
                                    --spaces;
                                }
                                previousBase = base;
                            }
                            for (i = 1, len = array.length; i < len; ++i) {
                                sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));
                                array[i] = sourceMap ? sn.join('') : sn;
                            }
                            base = previousBase;
                            return array.join('\n');
                        }
                        function generateComment(comment, specialBase) {
                            if (comment.type === 'Line') {
                                if (endsWithLineTerminator(comment.value)) {
                                    return '//' + comment.value;
                                } else {
                                    var result = '//' + comment.value;
                                    if (!preserveBlankLines) {
                                        result += '\n';
                                    }
                                    return result;
                                }
                            }
                            if (extra.format.indent.adjustMultilineComment && /[\n\r]/.test(comment.value)) {
                                return adjustMultilineComment('/*' + comment.value + '*/', specialBase);
                            }
                            return '/*' + comment.value + '*/';
                        }
                        function addComments(stmt, result) {
                            var i, len, comment, save, tailingToStatement, specialBase, fragment, extRange, range, prevRange, prefix, infix, suffix, count;
                            if (stmt.leadingComments && stmt.leadingComments.length > 0) {
                                save = result;
                                if (preserveBlankLines) {
                                    comment = stmt.leadingComments[0];
                                    result = [];
                                    extRange = comment.extendedRange;
                                    range = comment.range;
                                    prefix = sourceCode.substring(extRange[0], range[0]);
                                    count = (prefix.match(/\n/g) || []).length;
                                    if (count > 0) {
                                        result.push(stringRepeat('\n', count));
                                        result.push(addIndent(generateComment(comment)));
                                    } else {
                                        result.push(prefix);
                                        result.push(generateComment(comment));
                                    }
                                    prevRange = range;
                                    for (i = 1, len = stmt.leadingComments.length; i < len; i++) {
                                        comment = stmt.leadingComments[i];
                                        range = comment.range;
                                        infix = sourceCode.substring(prevRange[1], range[0]);
                                        count = (infix.match(/\n/g) || []).length;
                                        result.push(stringRepeat('\n', count));
                                        result.push(addIndent(generateComment(comment)));
                                        prevRange = range;
                                    }
                                    suffix = sourceCode.substring(range[1], extRange[1]);
                                    count = (suffix.match(/\n/g) || []).length;
                                    result.push(stringRepeat('\n', count));
                                } else {
                                    comment = stmt.leadingComments[0];
                                    result = [];
                                    if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {
                                        result.push('\n');
                                    }
                                    result.push(generateComment(comment));
                                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                                        result.push('\n');
                                    }
                                    for (i = 1, len = stmt.leadingComments.length; i < len; ++i) {
                                        comment = stmt.leadingComments[i];
                                        fragment = [generateComment(comment)];
                                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                                            fragment.push('\n');
                                        }
                                        result.push(addIndent(fragment));
                                    }
                                }
                                result.push(addIndent(save));
                            }
                            if (stmt.trailingComments) {
                                if (preserveBlankLines) {
                                    comment = stmt.trailingComments[0];
                                    extRange = comment.extendedRange;
                                    range = comment.range;
                                    prefix = sourceCode.substring(extRange[0], range[0]);
                                    count = (prefix.match(/\n/g) || []).length;
                                    if (count > 0) {
                                        result.push(stringRepeat('\n', count));
                                        result.push(addIndent(generateComment(comment)));
                                    } else {
                                        result.push(prefix);
                                        result.push(generateComment(comment));
                                    }
                                } else {
                                    tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
                                    specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([
                                        base,
                                        result,
                                        indent
                                    ]).toString()));
                                    for (i = 0, len = stmt.trailingComments.length; i < len; ++i) {
                                        comment = stmt.trailingComments[i];
                                        if (tailingToStatement) {
                                            if (i === 0) {
                                                result = [
                                                    result,
                                                    indent
                                                ];
                                            } else {
                                                result = [
                                                    result,
                                                    specialBase
                                                ];
                                            }
                                            result.push(generateComment(comment, specialBase));
                                        } else {
                                            result = [
                                                result,
                                                addIndent(generateComment(comment))
                                            ];
                                        }
                                        if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                                            result = [
                                                result,
                                                '\n'
                                            ];
                                        }
                                    }
                                }
                            }
                            return result;
                        }
                        function generateBlankLines(start, end, result) {
                            var j, newlineCount = 0;
                            for (j = start; j < end; j++) {
                                if (sourceCode[j] === '\n') {
                                    newlineCount++;
                                }
                            }
                            for (j = 1; j < newlineCount; j++) {
                                result.push(newline);
                            }
                        }
                        function parenthesize(text, current, should) {
                            if (current < should) {
                                return [
                                    '(',
                                    text,
                                    ')'
                                ];
                            }
                            return text;
                        }
                        function generateVerbatimString(string) {
                            var i, iz, result;
                            result = string.split(/\r\n|\n/);
                            for (i = 1, iz = result.length; i < iz; i++) {
                                result[i] = newline + base + result[i];
                            }
                            return result;
                        }
                        function generateVerbatim(expr, precedence) {
                            var verbatim, result, prec;
                            verbatim = expr[extra.verbatim];
                            if (typeof verbatim === 'string') {
                                result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, precedence);
                            } else {
                                result = generateVerbatimString(verbatim.content);
                                prec = verbatim.precedence != null ? verbatim.precedence : Precedence.Sequence;
                                result = parenthesize(result, prec, precedence);
                            }
                            return toSourceNodeWhenNeeded(result, expr);
                        }
                        function CodeGenerator() {
                        }
                        CodeGenerator.prototype.maybeBlock = function (stmt, flags) {
                            var result, noLeadingComment, that = this;
                            noLeadingComment = !extra.comment || !stmt.leadingComments;
                            if (stmt.type === Syntax.BlockStatement && noLeadingComment) {
                                return [
                                    space,
                                    this.generateStatement(stmt, flags)
                                ];
                            }
                            if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {
                                return ';';
                            }
                            withIndent(function () {
                                result = [
                                    newline,
                                    addIndent(that.generateStatement(stmt, flags))
                                ];
                            });
                            return result;
                        };
                        CodeGenerator.prototype.maybeBlockSuffix = function (stmt, result) {
                            var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
                            if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {
                                return [
                                    result,
                                    space
                                ];
                            }
                            if (ends) {
                                return [
                                    result,
                                    base
                                ];
                            }
                            return [
                                result,
                                newline,
                                base
                            ];
                        };
                        function generateIdentifier(node) {
                            return toSourceNodeWhenNeeded(node.name, node);
                        }
                        function generateAsyncPrefix(node, spaceRequired) {
                            return node.async ? 'async' + (spaceRequired ? noEmptySpace() : space) : '';
                        }
                        function generateStarSuffix(node) {
                            var isGenerator = node.generator && !extra.moz.starlessGenerator;
                            return isGenerator ? '*' + space : '';
                        }
                        function generateMethodPrefix(prop) {
                            var func = prop.value;
                            if (func.async) {
                                return generateAsyncPrefix(func, !prop.computed);
                            } else {
                                return generateStarSuffix(func) ? '*' : '';
                            }
                        }
                        CodeGenerator.prototype.generatePattern = function (node, precedence, flags) {
                            if (node.type === Syntax.Identifier) {
                                return generateIdentifier(node);
                            }
                            return this.generateExpression(node, precedence, flags);
                        };
                        CodeGenerator.prototype.generateFunctionParams = function (node) {
                            var i, iz, result, hasDefault;
                            hasDefault = false;
                            if (node.type === Syntax.ArrowFunctionExpression && !node.rest && (!node.defaults || node.defaults.length === 0) && node.params.length === 1 && node.params[0].type === Syntax.Identifier) {
                                result = [
                                    generateAsyncPrefix(node, true),
                                    generateIdentifier(node.params[0])
                                ];
                            } else {
                                result = node.type === Syntax.ArrowFunctionExpression ? [generateAsyncPrefix(node, false)] : [];
                                result.push('(');
                                if (node.defaults) {
                                    hasDefault = true;
                                }
                                for (i = 0, iz = node.params.length; i < iz; ++i) {
                                    if (hasDefault && node.defaults[i]) {
                                        result.push(this.generateAssignment(node.params[i], node.defaults[i], '=', Precedence.Assignment, E_TTT));
                                    } else {
                                        result.push(this.generatePattern(node.params[i], Precedence.Assignment, E_TTT));
                                    }
                                    if (i + 1 < iz) {
                                        result.push(',' + space);
                                    }
                                }
                                if (node.rest) {
                                    if (node.params.length) {
                                        result.push(',' + space);
                                    }
                                    result.push('...');
                                    result.push(generateIdentifier(node.rest));
                                }
                                result.push(')');
                            }
                            return result;
                        };
                        CodeGenerator.prototype.generateFunctionBody = function (node) {
                            var result, expr;
                            result = this.generateFunctionParams(node);
                            if (node.type === Syntax.ArrowFunctionExpression) {
                                result.push(space);
                                result.push('=>');
                            }
                            if (node.expression) {
                                result.push(space);
                                expr = this.generateExpression(node.body, Precedence.Assignment, E_TTT);
                                if (expr.toString().charAt(0) === '{') {
                                    expr = [
                                        '(',
                                        expr,
                                        ')'
                                    ];
                                }
                                result.push(expr);
                            } else {
                                result.push(this.maybeBlock(node.body, S_TTFF));
                            }
                            return result;
                        };
                        CodeGenerator.prototype.generateIterationForStatement = function (operator, stmt, flags) {
                            var result = ['for' + space + '('], that = this;
                            withIndent(function () {
                                if (stmt.left.type === Syntax.VariableDeclaration) {
                                    withIndent(function () {
                                        result.push(stmt.left.kind + noEmptySpace());
                                        result.push(that.generateStatement(stmt.left.declarations[0], S_FFFF));
                                    });
                                } else {
                                    result.push(that.generateExpression(stmt.left, Precedence.Call, E_TTT));
                                }
                                result = join(result, operator);
                                result = [
                                    join(result, that.generateExpression(stmt.right, Precedence.Sequence, E_TTT)),
                                    ')'
                                ];
                            });
                            result.push(this.maybeBlock(stmt.body, flags));
                            return result;
                        };
                        CodeGenerator.prototype.generatePropertyKey = function (expr, computed, value) {
                            var result = [];
                            if (computed) {
                                result.push('[');
                            }
                            if (value.type === 'AssignmentPattern' && expr.name === value.left.name) {
                                result.push(this.AssignmentPattern(value, Precedence.Sequence, E_TTT));
                            } else {
                                result.push(this.generateExpression(expr, Precedence.Sequence, E_TTT));
                            }
                            if (computed) {
                                result.push(']');
                            }
                            return result;
                        };
                        CodeGenerator.prototype.generateAssignment = function (left, right, operator, precedence, flags) {
                            if (Precedence.Assignment < precedence) {
                                flags |= F_ALLOW_IN;
                            }
                            return parenthesize([
                                this.generateExpression(left, Precedence.Call, flags),
                                space + operator + space,
                                this.generateExpression(right, Precedence.Assignment, flags)
                            ], Precedence.Assignment, precedence);
                        };
                        CodeGenerator.prototype.semicolon = function (flags) {
                            if (!semicolons && flags & F_SEMICOLON_OPT) {
                                return '';
                            }
                            return ';';
                        };
                        CodeGenerator.Statement = {
                            BlockStatement: function (stmt, flags) {
                                var range, content, result = [
                                        '{',
                                        newline
                                    ], that = this;
                                withIndent(function () {
                                    if (stmt.body.length === 0 && preserveBlankLines) {
                                        range = stmt.range;
                                        if (range[1] - range[0] > 2) {
                                            content = sourceCode.substring(range[0] + 1, range[1] - 1);
                                            if (content[0] === '\n') {
                                                result = ['{'];
                                            }
                                            result.push(content);
                                        }
                                    }
                                    var i, iz, fragment, bodyFlags;
                                    bodyFlags = S_TFFF;
                                    if (flags & F_FUNC_BODY) {
                                        bodyFlags |= F_DIRECTIVE_CTX;
                                    }
                                    for (i = 0, iz = stmt.body.length; i < iz; ++i) {
                                        if (preserveBlankLines) {
                                            if (i === 0) {
                                                if (stmt.body[0].leadingComments) {
                                                    range = stmt.body[0].leadingComments[0].extendedRange;
                                                    content = sourceCode.substring(range[0], range[1]);
                                                    if (content[0] === '\n') {
                                                        result = ['{'];
                                                    }
                                                }
                                                if (!stmt.body[0].leadingComments) {
                                                    generateBlankLines(stmt.range[0], stmt.body[0].range[0], result);
                                                }
                                            }
                                            if (i > 0) {
                                                if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) {
                                                    generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
                                                }
                                            }
                                        }
                                        if (i === iz - 1) {
                                            bodyFlags |= F_SEMICOLON_OPT;
                                        }
                                        if (stmt.body[i].leadingComments && preserveBlankLines) {
                                            fragment = that.generateStatement(stmt.body[i], bodyFlags);
                                        } else {
                                            fragment = addIndent(that.generateStatement(stmt.body[i], bodyFlags));
                                        }
                                        result.push(fragment);
                                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                                            if (preserveBlankLines && i < iz - 1) {
                                                if (!stmt.body[i + 1].leadingComments) {
                                                    result.push(newline);
                                                }
                                            } else {
                                                result.push(newline);
                                            }
                                        }
                                        if (preserveBlankLines) {
                                            if (i === iz - 1) {
                                                if (!stmt.body[i].trailingComments) {
                                                    generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
                                                }
                                            }
                                        }
                                    }
                                });
                                result.push(addIndent('}'));
                                return result;
                            },
                            BreakStatement: function (stmt, flags) {
                                if (stmt.label) {
                                    return 'break ' + stmt.label.name + this.semicolon(flags);
                                }
                                return 'break' + this.semicolon(flags);
                            },
                            ContinueStatement: function (stmt, flags) {
                                if (stmt.label) {
                                    return 'continue ' + stmt.label.name + this.semicolon(flags);
                                }
                                return 'continue' + this.semicolon(flags);
                            },
                            ClassBody: function (stmt, flags) {
                                var result = [
                                        '{',
                                        newline
                                    ], that = this;
                                withIndent(function (indent) {
                                    var i, iz;
                                    for (i = 0, iz = stmt.body.length; i < iz; ++i) {
                                        result.push(indent);
                                        result.push(that.generateExpression(stmt.body[i], Precedence.Sequence, E_TTT));
                                        if (i + 1 < iz) {
                                            result.push(newline);
                                        }
                                    }
                                });
                                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                                    result.push(newline);
                                }
                                result.push(base);
                                result.push('}');
                                return result;
                            },
                            ClassDeclaration: function (stmt, flags) {
                                var result, fragment;
                                result = ['class'];
                                if (stmt.id) {
                                    result = join(result, this.generateExpression(stmt.id, Precedence.Sequence, E_TTT));
                                }
                                if (stmt.superClass) {
                                    fragment = join('extends', this.generateExpression(stmt.superClass, Precedence.Assignment, E_TTT));
                                    result = join(result, fragment);
                                }
                                result.push(space);
                                result.push(this.generateStatement(stmt.body, S_TFFT));
                                return result;
                            },
                            DirectiveStatement: function (stmt, flags) {
                                if (extra.raw && stmt.raw) {
                                    return stmt.raw + this.semicolon(flags);
                                }
                                return escapeDirective(stmt.directive) + this.semicolon(flags);
                            },
                            DoWhileStatement: function (stmt, flags) {
                                var result = join('do', this.maybeBlock(stmt.body, S_TFFF));
                                result = this.maybeBlockSuffix(stmt.body, result);
                                return join(result, [
                                    'while' + space + '(',
                                    this.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                                    ')' + this.semicolon(flags)
                                ]);
                            },
                            CatchClause: function (stmt, flags) {
                                var result, that = this;
                                withIndent(function () {
                                    var guard;
                                    result = [
                                        'catch' + space + '(',
                                        that.generateExpression(stmt.param, Precedence.Sequence, E_TTT),
                                        ')'
                                    ];
                                    if (stmt.guard) {
                                        guard = that.generateExpression(stmt.guard, Precedence.Sequence, E_TTT);
                                        result.splice(2, 0, ' if ', guard);
                                    }
                                });
                                result.push(this.maybeBlock(stmt.body, S_TFFF));
                                return result;
                            },
                            DebuggerStatement: function (stmt, flags) {
                                return 'debugger' + this.semicolon(flags);
                            },
                            EmptyStatement: function (stmt, flags) {
                                return ';';
                            },
                            ExportDefaultDeclaration: function (stmt, flags) {
                                var result = ['export'], bodyFlags;
                                bodyFlags = flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF;
                                result = join(result, 'default');
                                if (isStatement(stmt.declaration)) {
                                    result = join(result, this.generateStatement(stmt.declaration, bodyFlags));
                                } else {
                                    result = join(result, this.generateExpression(stmt.declaration, Precedence.Assignment, E_TTT) + this.semicolon(flags));
                                }
                                return result;
                            },
                            ExportNamedDeclaration: function (stmt, flags) {
                                var result = ['export'], bodyFlags, that = this;
                                bodyFlags = flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF;
                                if (stmt.declaration) {
                                    return join(result, this.generateStatement(stmt.declaration, bodyFlags));
                                }
                                if (stmt.specifiers) {
                                    if (stmt.specifiers.length === 0) {
                                        result = join(result, '{' + space + '}');
                                    } else if (stmt.specifiers[0].type === Syntax.ExportBatchSpecifier) {
                                        result = join(result, this.generateExpression(stmt.specifiers[0], Precedence.Sequence, E_TTT));
                                    } else {
                                        result = join(result, '{');
                                        withIndent(function (indent) {
                                            var i, iz;
                                            result.push(newline);
                                            for (i = 0, iz = stmt.specifiers.length; i < iz; ++i) {
                                                result.push(indent);
                                                result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                                                if (i + 1 < iz) {
                                                    result.push(',' + newline);
                                                }
                                            }
                                        });
                                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                                            result.push(newline);
                                        }
                                        result.push(base + '}');
                                    }
                                    if (stmt.source) {
                                        result = join(result, [
                                            'from' + space,
                                            this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                                            this.semicolon(flags)
                                        ]);
                                    } else {
                                        result.push(this.semicolon(flags));
                                    }
                                }
                                return result;
                            },
                            ExportAllDeclaration: function (stmt, flags) {
                                return [
                                    'export' + space,
                                    '*' + space,
                                    'from' + space,
                                    this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                                    this.semicolon(flags)
                                ];
                            },
                            ExpressionStatement: function (stmt, flags) {
                                var result, fragment;
                                function isClassPrefixed(fragment) {
                                    var code;
                                    if (fragment.slice(0, 5) !== 'class') {
                                        return false;
                                    }
                                    code = fragment.charCodeAt(5);
                                    return code === 123 || esutils.code.isWhiteSpace(code) || esutils.code.isLineTerminator(code);
                                }
                                function isFunctionPrefixed(fragment) {
                                    var code;
                                    if (fragment.slice(0, 8) !== 'function') {
                                        return false;
                                    }
                                    code = fragment.charCodeAt(8);
                                    return code === 40 || esutils.code.isWhiteSpace(code) || code === 42 || esutils.code.isLineTerminator(code);
                                }
                                function isAsyncPrefixed(fragment) {
                                    var code, i, iz;
                                    if (fragment.slice(0, 5) !== 'async') {
                                        return false;
                                    }
                                    if (!esutils.code.isWhiteSpace(fragment.charCodeAt(5))) {
                                        return false;
                                    }
                                    for (i = 6, iz = fragment.length; i < iz; ++i) {
                                        if (!esutils.code.isWhiteSpace(fragment.charCodeAt(i))) {
                                            break;
                                        }
                                    }
                                    if (i === iz) {
                                        return false;
                                    }
                                    if (fragment.slice(i, i + 8) !== 'function') {
                                        return false;
                                    }
                                    code = fragment.charCodeAt(i + 8);
                                    return code === 40 || esutils.code.isWhiteSpace(code) || code === 42 || esutils.code.isLineTerminator(code);
                                }
                                result = [this.generateExpression(stmt.expression, Precedence.Sequence, E_TTT)];
                                fragment = toSourceNodeWhenNeeded(result).toString();
                                if (fragment.charCodeAt(0) === 123 || isClassPrefixed(fragment) || isFunctionPrefixed(fragment) || isAsyncPrefixed(fragment) || directive && flags & F_DIRECTIVE_CTX && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string') {
                                    result = [
                                        '(',
                                        result,
                                        ')' + this.semicolon(flags)
                                    ];
                                } else {
                                    result.push(this.semicolon(flags));
                                }
                                return result;
                            },
                            ImportDeclaration: function (stmt, flags) {
                                var result, cursor, that = this;
                                if (stmt.specifiers.length === 0) {
                                    return [
                                        'import',
                                        space,
                                        this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                                        this.semicolon(flags)
                                    ];
                                }
                                result = ['import'];
                                cursor = 0;
                                if (stmt.specifiers[cursor].type === Syntax.ImportDefaultSpecifier) {
                                    result = join(result, [this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)]);
                                    ++cursor;
                                }
                                if (stmt.specifiers[cursor]) {
                                    if (cursor !== 0) {
                                        result.push(',');
                                    }
                                    if (stmt.specifiers[cursor].type === Syntax.ImportNamespaceSpecifier) {
                                        result = join(result, [
                                            space,
                                            this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)
                                        ]);
                                    } else {
                                        result.push(space + '{');
                                        if (stmt.specifiers.length - cursor === 1) {
                                            result.push(space);
                                            result.push(this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT));
                                            result.push(space + '}' + space);
                                        } else {
                                            withIndent(function (indent) {
                                                var i, iz;
                                                result.push(newline);
                                                for (i = cursor, iz = stmt.specifiers.length; i < iz; ++i) {
                                                    result.push(indent);
                                                    result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                                                    if (i + 1 < iz) {
                                                        result.push(',' + newline);
                                                    }
                                                }
                                            });
                                            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                                                result.push(newline);
                                            }
                                            result.push(base + '}' + space);
                                        }
                                    }
                                }
                                result = join(result, [
                                    'from' + space,
                                    this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                                    this.semicolon(flags)
                                ]);
                                return result;
                            },
                            VariableDeclarator: function (stmt, flags) {
                                var itemFlags = flags & F_ALLOW_IN ? E_TTT : E_FTT;
                                if (stmt.init) {
                                    return [
                                        this.generateExpression(stmt.id, Precedence.Assignment, itemFlags),
                                        space,
                                        '=',
                                        space,
                                        this.generateExpression(stmt.init, Precedence.Assignment, itemFlags)
                                    ];
                                }
                                return this.generatePattern(stmt.id, Precedence.Assignment, itemFlags);
                            },
                            VariableDeclaration: function (stmt, flags) {
                                var result, i, iz, node, bodyFlags, that = this;
                                result = [stmt.kind];
                                bodyFlags = flags & F_ALLOW_IN ? S_TFFF : S_FFFF;
                                function block() {
                                    node = stmt.declarations[0];
                                    if (extra.comment && node.leadingComments) {
                                        result.push('\n');
                                        result.push(addIndent(that.generateStatement(node, bodyFlags)));
                                    } else {
                                        result.push(noEmptySpace());
                                        result.push(that.generateStatement(node, bodyFlags));
                                    }
                                    for (i = 1, iz = stmt.declarations.length; i < iz; ++i) {
                                        node = stmt.declarations[i];
                                        if (extra.comment && node.leadingComments) {
                                            result.push(',' + newline);
                                            result.push(addIndent(that.generateStatement(node, bodyFlags)));
                                        } else {
                                            result.push(',' + space);
                                            result.push(that.generateStatement(node, bodyFlags));
                                        }
                                    }
                                }
                                if (stmt.declarations.length > 1) {
                                    withIndent(block);
                                } else {
                                    block();
                                }
                                result.push(this.semicolon(flags));
                                return result;
                            },
                            ThrowStatement: function (stmt, flags) {
                                return [
                                    join('throw', this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)),
                                    this.semicolon(flags)
                                ];
                            },
                            TryStatement: function (stmt, flags) {
                                var result, i, iz, guardedHandlers;
                                result = [
                                    'try',
                                    this.maybeBlock(stmt.block, S_TFFF)
                                ];
                                result = this.maybeBlockSuffix(stmt.block, result);
                                if (stmt.handlers) {
                                    for (i = 0, iz = stmt.handlers.length; i < iz; ++i) {
                                        result = join(result, this.generateStatement(stmt.handlers[i], S_TFFF));
                                        if (stmt.finalizer || i + 1 !== iz) {
                                            result = this.maybeBlockSuffix(stmt.handlers[i].body, result);
                                        }
                                    }
                                } else {
                                    guardedHandlers = stmt.guardedHandlers || [];
                                    for (i = 0, iz = guardedHandlers.length; i < iz; ++i) {
                                        result = join(result, this.generateStatement(guardedHandlers[i], S_TFFF));
                                        if (stmt.finalizer || i + 1 !== iz) {
                                            result = this.maybeBlockSuffix(guardedHandlers[i].body, result);
                                        }
                                    }
                                    if (stmt.handler) {
                                        if (isArray(stmt.handler)) {
                                            for (i = 0, iz = stmt.handler.length; i < iz; ++i) {
                                                result = join(result, this.generateStatement(stmt.handler[i], S_TFFF));
                                                if (stmt.finalizer || i + 1 !== iz) {
                                                    result = this.maybeBlockSuffix(stmt.handler[i].body, result);
                                                }
                                            }
                                        } else {
                                            result = join(result, this.generateStatement(stmt.handler, S_TFFF));
                                            if (stmt.finalizer) {
                                                result = this.maybeBlockSuffix(stmt.handler.body, result);
                                            }
                                        }
                                    }
                                }
                                if (stmt.finalizer) {
                                    result = join(result, [
                                        'finally',
                                        this.maybeBlock(stmt.finalizer, S_TFFF)
                                    ]);
                                }
                                return result;
                            },
                            SwitchStatement: function (stmt, flags) {
                                var result, fragment, i, iz, bodyFlags, that = this;
                                withIndent(function () {
                                    result = [
                                        'switch' + space + '(',
                                        that.generateExpression(stmt.discriminant, Precedence.Sequence, E_TTT),
                                        ')' + space + '{' + newline
                                    ];
                                });
                                if (stmt.cases) {
                                    bodyFlags = S_TFFF;
                                    for (i = 0, iz = stmt.cases.length; i < iz; ++i) {
                                        if (i === iz - 1) {
                                            bodyFlags |= F_SEMICOLON_OPT;
                                        }
                                        fragment = addIndent(this.generateStatement(stmt.cases[i], bodyFlags));
                                        result.push(fragment);
                                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                                            result.push(newline);
                                        }
                                    }
                                }
                                result.push(addIndent('}'));
                                return result;
                            },
                            SwitchCase: function (stmt, flags) {
                                var result, fragment, i, iz, bodyFlags, that = this;
                                withIndent(function () {
                                    if (stmt.test) {
                                        result = [
                                            join('case', that.generateExpression(stmt.test, Precedence.Sequence, E_TTT)),
                                            ':'
                                        ];
                                    } else {
                                        result = ['default:'];
                                    }
                                    i = 0;
                                    iz = stmt.consequent.length;
                                    if (iz && stmt.consequent[0].type === Syntax.BlockStatement) {
                                        fragment = that.maybeBlock(stmt.consequent[0], S_TFFF);
                                        result.push(fragment);
                                        i = 1;
                                    }
                                    if (i !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                                        result.push(newline);
                                    }
                                    bodyFlags = S_TFFF;
                                    for (; i < iz; ++i) {
                                        if (i === iz - 1 && flags & F_SEMICOLON_OPT) {
                                            bodyFlags |= F_SEMICOLON_OPT;
                                        }
                                        fragment = addIndent(that.generateStatement(stmt.consequent[i], bodyFlags));
                                        result.push(fragment);
                                        if (i + 1 !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                                            result.push(newline);
                                        }
                                    }
                                });
                                return result;
                            },
                            IfStatement: function (stmt, flags) {
                                var result, bodyFlags, semicolonOptional, that = this;
                                withIndent(function () {
                                    result = [
                                        'if' + space + '(',
                                        that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                                        ')'
                                    ];
                                });
                                semicolonOptional = flags & F_SEMICOLON_OPT;
                                bodyFlags = S_TFFF;
                                if (semicolonOptional) {
                                    bodyFlags |= F_SEMICOLON_OPT;
                                }
                                if (stmt.alternate) {
                                    result.push(this.maybeBlock(stmt.consequent, S_TFFF));
                                    result = this.maybeBlockSuffix(stmt.consequent, result);
                                    if (stmt.alternate.type === Syntax.IfStatement) {
                                        result = join(result, [
                                            'else ',
                                            this.generateStatement(stmt.alternate, bodyFlags)
                                        ]);
                                    } else {
                                        result = join(result, join('else', this.maybeBlock(stmt.alternate, bodyFlags)));
                                    }
                                } else {
                                    result.push(this.maybeBlock(stmt.consequent, bodyFlags));
                                }
                                return result;
                            },
                            ForStatement: function (stmt, flags) {
                                var result, that = this;
                                withIndent(function () {
                                    result = ['for' + space + '('];
                                    if (stmt.init) {
                                        if (stmt.init.type === Syntax.VariableDeclaration) {
                                            result.push(that.generateStatement(stmt.init, S_FFFF));
                                        } else {
                                            result.push(that.generateExpression(stmt.init, Precedence.Sequence, E_FTT));
                                            result.push(';');
                                        }
                                    } else {
                                        result.push(';');
                                    }
                                    if (stmt.test) {
                                        result.push(space);
                                        result.push(that.generateExpression(stmt.test, Precedence.Sequence, E_TTT));
                                        result.push(';');
                                    } else {
                                        result.push(';');
                                    }
                                    if (stmt.update) {
                                        result.push(space);
                                        result.push(that.generateExpression(stmt.update, Precedence.Sequence, E_TTT));
                                        result.push(')');
                                    } else {
                                        result.push(')');
                                    }
                                });
                                result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
                                return result;
                            },
                            ForInStatement: function (stmt, flags) {
                                return this.generateIterationForStatement('in', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
                            },
                            ForOfStatement: function (stmt, flags) {
                                return this.generateIterationForStatement('of', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
                            },
                            LabeledStatement: function (stmt, flags) {
                                return [
                                    stmt.label.name + ':',
                                    this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF)
                                ];
                            },
                            Program: function (stmt, flags) {
                                var result, fragment, i, iz, bodyFlags;
                                iz = stmt.body.length;
                                result = [safeConcatenation && iz > 0 ? '\n' : ''];
                                bodyFlags = S_TFTF;
                                for (i = 0; i < iz; ++i) {
                                    if (!safeConcatenation && i === iz - 1) {
                                        bodyFlags |= F_SEMICOLON_OPT;
                                    }
                                    if (preserveBlankLines) {
                                        if (i === 0) {
                                            if (!stmt.body[0].leadingComments) {
                                                generateBlankLines(stmt.range[0], stmt.body[i].range[0], result);
                                            }
                                        }
                                        if (i > 0) {
                                            if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) {
                                                generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
                                            }
                                        }
                                    }
                                    fragment = addIndent(this.generateStatement(stmt.body[i], bodyFlags));
                                    result.push(fragment);
                                    if (i + 1 < iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                                        if (preserveBlankLines) {
                                            if (!stmt.body[i + 1].leadingComments) {
                                                result.push(newline);
                                            }
                                        } else {
                                            result.push(newline);
                                        }
                                    }
                                    if (preserveBlankLines) {
                                        if (i === iz - 1) {
                                            if (!stmt.body[i].trailingComments) {
                                                generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
                                            }
                                        }
                                    }
                                }
                                return result;
                            },
                            FunctionDeclaration: function (stmt, flags) {
                                return [
                                    generateAsyncPrefix(stmt, true),
                                    'function',
                                    generateStarSuffix(stmt) || noEmptySpace(),
                                    stmt.id ? generateIdentifier(stmt.id) : '',
                                    this.generateFunctionBody(stmt)
                                ];
                            },
                            ReturnStatement: function (stmt, flags) {
                                if (stmt.argument) {
                                    return [
                                        join('return', this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)),
                                        this.semicolon(flags)
                                    ];
                                }
                                return ['return' + this.semicolon(flags)];
                            },
                            WhileStatement: function (stmt, flags) {
                                var result, that = this;
                                withIndent(function () {
                                    result = [
                                        'while' + space + '(',
                                        that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                                        ')'
                                    ];
                                });
                                result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
                                return result;
                            },
                            WithStatement: function (stmt, flags) {
                                var result, that = this;
                                withIndent(function () {
                                    result = [
                                        'with' + space + '(',
                                        that.generateExpression(stmt.object, Precedence.Sequence, E_TTT),
                                        ')'
                                    ];
                                });
                                result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
                                return result;
                            }
                        };
                        merge(CodeGenerator.prototype, CodeGenerator.Statement);
                        CodeGenerator.Expression = {
                            SequenceExpression: function (expr, precedence, flags) {
                                var result, i, iz;
                                if (Precedence.Sequence < precedence) {
                                    flags |= F_ALLOW_IN;
                                }
                                result = [];
                                for (i = 0, iz = expr.expressions.length; i < iz; ++i) {
                                    result.push(this.generateExpression(expr.expressions[i], Precedence.Assignment, flags));
                                    if (i + 1 < iz) {
                                        result.push(',' + space);
                                    }
                                }
                                return parenthesize(result, Precedence.Sequence, precedence);
                            },
                            AssignmentExpression: function (expr, precedence, flags) {
                                return this.generateAssignment(expr.left, expr.right, expr.operator, precedence, flags);
                            },
                            ArrowFunctionExpression: function (expr, precedence, flags) {
                                return parenthesize(this.generateFunctionBody(expr), Precedence.ArrowFunction, precedence);
                            },
                            ConditionalExpression: function (expr, precedence, flags) {
                                if (Precedence.Conditional < precedence) {
                                    flags |= F_ALLOW_IN;
                                }
                                return parenthesize([
                                    this.generateExpression(expr.test, Precedence.LogicalOR, flags),
                                    space + '?' + space,
                                    this.generateExpression(expr.consequent, Precedence.Assignment, flags),
                                    space + ':' + space,
                                    this.generateExpression(expr.alternate, Precedence.Assignment, flags)
                                ], Precedence.Conditional, precedence);
                            },
                            LogicalExpression: function (expr, precedence, flags) {
                                return this.BinaryExpression(expr, precedence, flags);
                            },
                            BinaryExpression: function (expr, precedence, flags) {
                                var result, currentPrecedence, fragment, leftSource;
                                currentPrecedence = BinaryPrecedence[expr.operator];
                                if (currentPrecedence < precedence) {
                                    flags |= F_ALLOW_IN;
                                }
                                fragment = this.generateExpression(expr.left, currentPrecedence, flags);
                                leftSource = fragment.toString();
                                if (leftSource.charCodeAt(leftSource.length - 1) === 47 && esutils.code.isIdentifierPartES5(expr.operator.charCodeAt(0))) {
                                    result = [
                                        fragment,
                                        noEmptySpace(),
                                        expr.operator
                                    ];
                                } else {
                                    result = join(fragment, expr.operator);
                                }
                                fragment = this.generateExpression(expr.right, currentPrecedence + 1, flags);
                                if (expr.operator === '/' && fragment.toString().charAt(0) === '/' || expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {
                                    result.push(noEmptySpace());
                                    result.push(fragment);
                                } else {
                                    result = join(result, fragment);
                                }
                                if (expr.operator === 'in' && !(flags & F_ALLOW_IN)) {
                                    return [
                                        '(',
                                        result,
                                        ')'
                                    ];
                                }
                                return parenthesize(result, currentPrecedence, precedence);
                            },
                            CallExpression: function (expr, precedence, flags) {
                                var result, i, iz;
                                result = [this.generateExpression(expr.callee, Precedence.Call, E_TTF)];
                                result.push('(');
                                for (i = 0, iz = expr['arguments'].length; i < iz; ++i) {
                                    result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
                                    if (i + 1 < iz) {
                                        result.push(',' + space);
                                    }
                                }
                                result.push(')');
                                if (!(flags & F_ALLOW_CALL)) {
                                    return [
                                        '(',
                                        result,
                                        ')'
                                    ];
                                }
                                return parenthesize(result, Precedence.Call, precedence);
                            },
                            NewExpression: function (expr, precedence, flags) {
                                var result, length, i, iz, itemFlags;
                                length = expr['arguments'].length;
                                itemFlags = flags & F_ALLOW_UNPARATH_NEW && !parentheses && length === 0 ? E_TFT : E_TFF;
                                result = join('new', this.generateExpression(expr.callee, Precedence.New, itemFlags));
                                if (!(flags & F_ALLOW_UNPARATH_NEW) || parentheses || length > 0) {
                                    result.push('(');
                                    for (i = 0, iz = length; i < iz; ++i) {
                                        result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
                                        if (i + 1 < iz) {
                                            result.push(',' + space);
                                        }
                                    }
                                    result.push(')');
                                }
                                return parenthesize(result, Precedence.New, precedence);
                            },
                            MemberExpression: function (expr, precedence, flags) {
                                var result, fragment;
                                result = [this.generateExpression(expr.object, Precedence.Call, flags & F_ALLOW_CALL ? E_TTF : E_TFF)];
                                if (expr.computed) {
                                    result.push('[');
                                    result.push(this.generateExpression(expr.property, Precedence.Sequence, flags & F_ALLOW_CALL ? E_TTT : E_TFT));
                                    result.push(']');
                                } else {
                                    if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {
                                        fragment = toSourceNodeWhenNeeded(result).toString();
                                        if (fragment.indexOf('.') < 0 && !/[eExX]/.test(fragment) && esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) && !(fragment.length >= 2 && fragment.charCodeAt(0) === 48)) {
                                            result.push('.');
                                        }
                                    }
                                    result.push('.');
                                    result.push(generateIdentifier(expr.property));
                                }
                                return parenthesize(result, Precedence.Member, precedence);
                            },
                            MetaProperty: function (expr, precedence, flags) {
                                var result;
                                result = [];
                                result.push(expr.meta);
                                result.push('.');
                                result.push(expr.property);
                                return parenthesize(result, Precedence.Member, precedence);
                            },
                            UnaryExpression: function (expr, precedence, flags) {
                                var result, fragment, rightCharCode, leftSource, leftCharCode;
                                fragment = this.generateExpression(expr.argument, Precedence.Unary, E_TTT);
                                if (space === '') {
                                    result = join(expr.operator, fragment);
                                } else {
                                    result = [expr.operator];
                                    if (expr.operator.length > 2) {
                                        result = join(result, fragment);
                                    } else {
                                        leftSource = toSourceNodeWhenNeeded(result).toString();
                                        leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
                                        rightCharCode = fragment.toString().charCodeAt(0);
                                        if ((leftCharCode === 43 || leftCharCode === 45) && leftCharCode === rightCharCode || esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode)) {
                                            result.push(noEmptySpace());
                                            result.push(fragment);
                                        } else {
                                            result.push(fragment);
                                        }
                                    }
                                }
                                return parenthesize(result, Precedence.Unary, precedence);
                            },
                            YieldExpression: function (expr, precedence, flags) {
                                var result;
                                if (expr.delegate) {
                                    result = 'yield*';
                                } else {
                                    result = 'yield';
                                }
                                if (expr.argument) {
                                    result = join(result, this.generateExpression(expr.argument, Precedence.Yield, E_TTT));
                                }
                                return parenthesize(result, Precedence.Yield, precedence);
                            },
                            AwaitExpression: function (expr, precedence, flags) {
                                var result = join(expr.all ? 'await*' : 'await', this.generateExpression(expr.argument, Precedence.Await, E_TTT));
                                return parenthesize(result, Precedence.Await, precedence);
                            },
                            UpdateExpression: function (expr, precedence, flags) {
                                if (expr.prefix) {
                                    return parenthesize([
                                        expr.operator,
                                        this.generateExpression(expr.argument, Precedence.Unary, E_TTT)
                                    ], Precedence.Unary, precedence);
                                }
                                return parenthesize([
                                    this.generateExpression(expr.argument, Precedence.Postfix, E_TTT),
                                    expr.operator
                                ], Precedence.Postfix, precedence);
                            },
                            FunctionExpression: function (expr, precedence, flags) {
                                var result = [
                                    generateAsyncPrefix(expr, true),
                                    'function'
                                ];
                                if (expr.id) {
                                    result.push(generateStarSuffix(expr) || noEmptySpace());
                                    result.push(generateIdentifier(expr.id));
                                } else {
                                    result.push(generateStarSuffix(expr) || space);
                                }
                                result.push(this.generateFunctionBody(expr));
                                return result;
                            },
                            ArrayPattern: function (expr, precedence, flags) {
                                return this.ArrayExpression(expr, precedence, flags, true);
                            },
                            ArrayExpression: function (expr, precedence, flags, isPattern) {
                                var result, multiline, that = this;
                                if (!expr.elements.length) {
                                    return '[]';
                                }
                                multiline = isPattern ? false : expr.elements.length > 1;
                                result = [
                                    '[',
                                    multiline ? newline : ''
                                ];
                                withIndent(function (indent) {
                                    var i, iz;
                                    for (i = 0, iz = expr.elements.length; i < iz; ++i) {
                                        if (!expr.elements[i]) {
                                            if (multiline) {
                                                result.push(indent);
                                            }
                                            if (i + 1 === iz) {
                                                result.push(',');
                                            }
                                        } else {
                                            result.push(multiline ? indent : '');
                                            result.push(that.generateExpression(expr.elements[i], Precedence.Assignment, E_TTT));
                                        }
                                        if (i + 1 < iz) {
                                            result.push(',' + (multiline ? newline : space));
                                        }
                                    }
                                });
                                if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                                    result.push(newline);
                                }
                                result.push(multiline ? base : '');
                                result.push(']');
                                return result;
                            },
                            RestElement: function (expr, precedence, flags) {
                                return '...' + this.generatePattern(expr.argument);
                            },
                            ClassExpression: function (expr, precedence, flags) {
                                var result, fragment;
                                result = ['class'];
                                if (expr.id) {
                                    result = join(result, this.generateExpression(expr.id, Precedence.Sequence, E_TTT));
                                }
                                if (expr.superClass) {
                                    fragment = join('extends', this.generateExpression(expr.superClass, Precedence.Assignment, E_TTT));
                                    result = join(result, fragment);
                                }
                                result.push(space);
                                result.push(this.generateStatement(expr.body, S_TFFT));
                                return result;
                            },
                            MethodDefinition: function (expr, precedence, flags) {
                                var result, fragment;
                                if (expr['static']) {
                                    result = ['static' + space];
                                } else {
                                    result = [];
                                }
                                if (expr.kind === 'get' || expr.kind === 'set') {
                                    fragment = [
                                        join(expr.kind, this.generatePropertyKey(expr.key, expr.computed, expr.value)),
                                        this.generateFunctionBody(expr.value)
                                    ];
                                } else {
                                    fragment = [
                                        generateMethodPrefix(expr),
                                        this.generatePropertyKey(expr.key, expr.computed, expr.value),
                                        this.generateFunctionBody(expr.value)
                                    ];
                                }
                                return join(result, fragment);
                            },
                            Property: function (expr, precedence, flags) {
                                if (expr.kind === 'get' || expr.kind === 'set') {
                                    return [
                                        expr.kind,
                                        noEmptySpace(),
                                        this.generatePropertyKey(expr.key, expr.computed, expr.value),
                                        this.generateFunctionBody(expr.value)
                                    ];
                                }
                                if (expr.shorthand) {
                                    return this.generatePropertyKey(expr.key, expr.computed, expr.value);
                                }
                                if (expr.method) {
                                    return [
                                        generateMethodPrefix(expr),
                                        this.generatePropertyKey(expr.key, expr.computed, expr.value),
                                        this.generateFunctionBody(expr.value)
                                    ];
                                }
                                return [
                                    this.generatePropertyKey(expr.key, expr.computed, expr.value),
                                    ':' + space,
                                    this.generateExpression(expr.value, Precedence.Assignment, E_TTT)
                                ];
                            },
                            ObjectExpression: function (expr, precedence, flags) {
                                var multiline, result, fragment, that = this;
                                if (!expr.properties.length) {
                                    return '{}';
                                }
                                multiline = expr.properties.length > 1;
                                withIndent(function () {
                                    fragment = that.generateExpression(expr.properties[0], Precedence.Sequence, E_TTT);
                                });
                                if (!multiline) {
                                    if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                                        return [
                                            '{',
                                            space,
                                            fragment,
                                            space,
                                            '}'
                                        ];
                                    }
                                }
                                withIndent(function (indent) {
                                    var i, iz;
                                    result = [
                                        '{',
                                        newline,
                                        indent,
                                        fragment
                                    ];
                                    if (multiline) {
                                        result.push(',' + newline);
                                        for (i = 1, iz = expr.properties.length; i < iz; ++i) {
                                            result.push(indent);
                                            result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
                                            if (i + 1 < iz) {
                                                result.push(',' + newline);
                                            }
                                        }
                                    }
                                });
                                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                                    result.push(newline);
                                }
                                result.push(base);
                                result.push('}');
                                return result;
                            },
                            AssignmentPattern: function (expr, precedence, flags) {
                                return this.generateAssignment(expr.left, expr.right, '=', precedence, flags);
                            },
                            ObjectPattern: function (expr, precedence, flags) {
                                var result, i, iz, multiline, property, that = this;
                                if (!expr.properties.length) {
                                    return '{}';
                                }
                                multiline = false;
                                if (expr.properties.length === 1) {
                                    property = expr.properties[0];
                                    if (property.value.type !== Syntax.Identifier) {
                                        multiline = true;
                                    }
                                } else {
                                    for (i = 0, iz = expr.properties.length; i < iz; ++i) {
                                        property = expr.properties[i];
                                        if (!property.shorthand) {
                                            multiline = true;
                                            break;
                                        }
                                    }
                                }
                                result = [
                                    '{',
                                    multiline ? newline : ''
                                ];
                                withIndent(function (indent) {
                                    var i, iz;
                                    for (i = 0, iz = expr.properties.length; i < iz; ++i) {
                                        result.push(multiline ? indent : '');
                                        result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
                                        if (i + 1 < iz) {
                                            result.push(',' + (multiline ? newline : space));
                                        }
                                    }
                                });
                                if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                                    result.push(newline);
                                }
                                result.push(multiline ? base : '');
                                result.push('}');
                                return result;
                            },
                            ThisExpression: function (expr, precedence, flags) {
                                return 'this';
                            },
                            Super: function (expr, precedence, flags) {
                                return 'super';
                            },
                            Identifier: function (expr, precedence, flags) {
                                return generateIdentifier(expr);
                            },
                            ImportDefaultSpecifier: function (expr, precedence, flags) {
                                return generateIdentifier(expr.id || expr.local);
                            },
                            ImportNamespaceSpecifier: function (expr, precedence, flags) {
                                var result = ['*'];
                                var id = expr.id || expr.local;
                                if (id) {
                                    result.push(space + 'as' + noEmptySpace() + generateIdentifier(id));
                                }
                                return result;
                            },
                            ImportSpecifier: function (expr, precedence, flags) {
                                var imported = expr.imported;
                                var result = [imported.name];
                                var local = expr.local;
                                if (local && local.name !== imported.name) {
                                    result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(local));
                                }
                                return result;
                            },
                            ExportSpecifier: function (expr, precedence, flags) {
                                var local = expr.local;
                                var result = [local.name];
                                var exported = expr.exported;
                                if (exported && exported.name !== local.name) {
                                    result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(exported));
                                }
                                return result;
                            },
                            Literal: function (expr, precedence, flags) {
                                var raw;
                                if (expr.hasOwnProperty('raw') && parse && extra.raw) {
                                    try {
                                        raw = parse(expr.raw).body[0].expression;
                                        if (raw.type === Syntax.Literal) {
                                            if (raw.value === expr.value) {
                                                return expr.raw;
                                            }
                                        }
                                    } catch (e) {
                                    }
                                }
                                if (expr.value === null) {
                                    return 'null';
                                }
                                if (typeof expr.value === 'string') {
                                    return escapeString(expr.value);
                                }
                                if (typeof expr.value === 'number') {
                                    return generateNumber(expr.value);
                                }
                                if (typeof expr.value === 'boolean') {
                                    return expr.value ? 'true' : 'false';
                                }
                                if (expr.regex) {
                                    return '/' + expr.regex.pattern + '/' + expr.regex.flags;
                                }
                                return generateRegExp(expr.value);
                            },
                            GeneratorExpression: function (expr, precedence, flags) {
                                return this.ComprehensionExpression(expr, precedence, flags);
                            },
                            ComprehensionExpression: function (expr, precedence, flags) {
                                var result, i, iz, fragment, that = this;
                                result = expr.type === Syntax.GeneratorExpression ? ['('] : ['['];
                                if (extra.moz.comprehensionExpressionStartsWithAssignment) {
                                    fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);
                                    result.push(fragment);
                                }
                                if (expr.blocks) {
                                    withIndent(function () {
                                        for (i = 0, iz = expr.blocks.length; i < iz; ++i) {
                                            fragment = that.generateExpression(expr.blocks[i], Precedence.Sequence, E_TTT);
                                            if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {
                                                result = join(result, fragment);
                                            } else {
                                                result.push(fragment);
                                            }
                                        }
                                    });
                                }
                                if (expr.filter) {
                                    result = join(result, 'if' + space);
                                    fragment = this.generateExpression(expr.filter, Precedence.Sequence, E_TTT);
                                    result = join(result, [
                                        '(',
                                        fragment,
                                        ')'
                                    ]);
                                }
                                if (!extra.moz.comprehensionExpressionStartsWithAssignment) {
                                    fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);
                                    result = join(result, fragment);
                                }
                                result.push(expr.type === Syntax.GeneratorExpression ? ')' : ']');
                                return result;
                            },
                            ComprehensionBlock: function (expr, precedence, flags) {
                                var fragment;
                                if (expr.left.type === Syntax.VariableDeclaration) {
                                    fragment = [
                                        expr.left.kind,
                                        noEmptySpace(),
                                        this.generateStatement(expr.left.declarations[0], S_FFFF)
                                    ];
                                } else {
                                    fragment = this.generateExpression(expr.left, Precedence.Call, E_TTT);
                                }
                                fragment = join(fragment, expr.of ? 'of' : 'in');
                                fragment = join(fragment, this.generateExpression(expr.right, Precedence.Sequence, E_TTT));
                                return [
                                    'for' + space + '(',
                                    fragment,
                                    ')'
                                ];
                            },
                            SpreadElement: function (expr, precedence, flags) {
                                return [
                                    '...',
                                    this.generateExpression(expr.argument, Precedence.Assignment, E_TTT)
                                ];
                            },
                            TaggedTemplateExpression: function (expr, precedence, flags) {
                                var itemFlags = E_TTF;
                                if (!(flags & F_ALLOW_CALL)) {
                                    itemFlags = E_TFF;
                                }
                                var result = [
                                    this.generateExpression(expr.tag, Precedence.Call, itemFlags),
                                    this.generateExpression(expr.quasi, Precedence.Primary, E_FFT)
                                ];
                                return parenthesize(result, Precedence.TaggedTemplate, precedence);
                            },
                            TemplateElement: function (expr, precedence, flags) {
                                return expr.value.raw;
                            },
                            TemplateLiteral: function (expr, precedence, flags) {
                                var result, i, iz;
                                result = ['`'];
                                for (i = 0, iz = expr.quasis.length; i < iz; ++i) {
                                    result.push(this.generateExpression(expr.quasis[i], Precedence.Primary, E_TTT));
                                    if (i + 1 < iz) {
                                        result.push('${' + space);
                                        result.push(this.generateExpression(expr.expressions[i], Precedence.Sequence, E_TTT));
                                        result.push(space + '}');
                                    }
                                }
                                result.push('`');
                                return result;
                            },
                            ModuleSpecifier: function (expr, precedence, flags) {
                                return this.Literal(expr, precedence, flags);
                            }
                        };
                        merge(CodeGenerator.prototype, CodeGenerator.Expression);
                        CodeGenerator.prototype.generateExpression = function (expr, precedence, flags) {
                            var result, type;
                            type = expr.type || Syntax.Property;
                            if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {
                                return generateVerbatim(expr, precedence);
                            }
                            result = this[type](expr, precedence, flags);
                            if (extra.comment) {
                                result = addComments(expr, result);
                            }
                            return toSourceNodeWhenNeeded(result, expr);
                        };
                        CodeGenerator.prototype.generateStatement = function (stmt, flags) {
                            var result, fragment;
                            result = this[stmt.type](stmt, flags);
                            if (extra.comment) {
                                result = addComments(stmt, result);
                            }
                            fragment = toSourceNodeWhenNeeded(result).toString();
                            if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' && fragment.charAt(fragment.length - 1) === '\n') {
                                result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\s+$/, '') : fragment.replace(/\s+$/, '');
                            }
                            return toSourceNodeWhenNeeded(result, stmt);
                        };
                        function generateInternal(node) {
                            var codegen;
                            codegen = new CodeGenerator();
                            if (isStatement(node)) {
                                return codegen.generateStatement(node, S_TFFF);
                            }
                            if (isExpression(node)) {
                                return codegen.generateExpression(node, Precedence.Sequence, E_TTT);
                            }
                            throw new Error('Unknown node type: ' + node.type);
                        }
                        function generate(node, options) {
                            var defaultOptions = getDefaultOptions(), result, pair;
                            if (options != null) {
                                if (typeof options.indent === 'string') {
                                    defaultOptions.format.indent.style = options.indent;
                                }
                                if (typeof options.base === 'number') {
                                    defaultOptions.format.indent.base = options.base;
                                }
                                options = updateDeeply(defaultOptions, options);
                                indent = options.format.indent.style;
                                if (typeof options.base === 'string') {
                                    base = options.base;
                                } else {
                                    base = stringRepeat(indent, options.format.indent.base);
                                }
                            } else {
                                options = defaultOptions;
                                indent = options.format.indent.style;
                                base = stringRepeat(indent, options.format.indent.base);
                            }
                            json = options.format.json;
                            renumber = options.format.renumber;
                            hexadecimal = json ? false : options.format.hexadecimal;
                            quotes = json ? 'double' : options.format.quotes;
                            escapeless = options.format.escapeless;
                            newline = options.format.newline;
                            space = options.format.space;
                            if (options.format.compact) {
                                newline = space = indent = base = '';
                            }
                            parentheses = options.format.parentheses;
                            semicolons = options.format.semicolons;
                            safeConcatenation = options.format.safeConcatenation;
                            directive = options.directive;
                            parse = json ? null : options.parse;
                            sourceMap = options.sourceMap;
                            sourceCode = options.sourceCode;
                            preserveBlankLines = options.format.preserveBlankLines && sourceCode !== null;
                            extra = options;
                            if (sourceMap) {
                                if (!exports.browser) {
                                    SourceNode = require('source-map').SourceNode;
                                } else {
                                    SourceNode = global.sourceMap.SourceNode;
                                }
                            }
                            result = generateInternal(node);
                            if (!sourceMap) {
                                pair = {
                                    code: result.toString(),
                                    map: null
                                };
                                return options.sourceMapWithCode ? pair : pair.code;
                            }
                            pair = result.toStringWithSourceMap({
                                file: options.file,
                                sourceRoot: options.sourceMapRoot
                            });
                            if (options.sourceContent) {
                                pair.map.setSourceContent(options.sourceMap, options.sourceContent);
                            }
                            if (options.sourceMapWithCode) {
                                return pair;
                            }
                            return pair.map.toString();
                        }
                        FORMAT_MINIFY = {
                            indent: {
                                style: '',
                                base: 0
                            },
                            renumber: true,
                            hexadecimal: true,
                            quotes: 'auto',
                            escapeless: true,
                            compact: true,
                            parentheses: false,
                            semicolons: false
                        };
                        FORMAT_DEFAULTS = getDefaultOptions().format;
                        exports.version = require('./package.json').version;
                        exports.generate = generate;
                        exports.attachComments = estraverse.attachComments;
                        exports.Precedence = updateDeeply({}, Precedence);
                        exports.browser = false;
                        exports.FORMAT_MINIFY = FORMAT_MINIFY;
                        exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;
                    }());
                }.call(this, typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}));
            },
            {
                './package.json': 33,
                'estraverse': 40,
                'esutils': 45,
                'source-map': 84
            }
        ],
        33: [
            function (require, module, exports) {
                module.exports = {
                    '_from': 'github:t2ym/escodegen#master',
                    '_id': 'escodegen@1.8.1',
                    '_inBundle': false,
                    '_integrity': 'sha1-ZVoQxsWYt9wDYqRIvrGPB/zcBsY=',
                    '_location': '/escodegen',
                    '_phantomChildren': {},
                    '_requested': {
                        'type': 'git',
                        'raw': 'escodegen@github:t2ym/escodegen#master',
                        'name': 'escodegen',
                        'escapedName': 'escodegen',
                        'rawSpec': 'github:t2ym/escodegen#master',
                        'saveSpec': 'github:t2ym/escodegen#master',
                        'fetchSpec': null,
                        'gitCommittish': 'master'
                    },
                    '_requiredBy': [
                        '/',
                        '/polymer-analyzer'
                    ],
                    '_resolved': 'github:t2ym/escodegen#9eba7a731e3f391983bd1b96a28a7366513a19d1',
                    '_spec': 'escodegen@github:t2ym/escodegen#master',
                    '_where': '/home/fedora/WebComponents/components/thin-hook',
                    'bin': {
                        'esgenerate': './bin/esgenerate.js',
                        'escodegen': './bin/escodegen.js'
                    },
                    'bugs': { 'url': 'https://github.com/estools/escodegen/issues' },
                    'bundleDependencies': false,
                    'dependencies': {
                        'esprima': '^2.7.1',
                        'estraverse': '^4.2.0',
                        'esutils': '^2.0.2',
                        'optionator': '^0.8.1',
                        'source-map': '~0.2.0'
                    },
                    'deprecated': false,
                    'description': 'ECMAScript code generator',
                    'devDependencies': {
                        'acorn': '^2.7.0',
                        'bluebird': '^2.3.11',
                        'bower-registry-client': '^0.2.1',
                        'chai': '^1.10.0',
                        'commonjs-everywhere': '^0.9.7',
                        'gulp': '^3.8.10',
                        'gulp-eslint': '^0.2.0',
                        'gulp-mocha': '^2.0.0',
                        'semver': '^5.1.0'
                    },
                    'engines': { 'node': '>=0.12.0' },
                    'files': [
                        'LICENSE.BSD',
                        'LICENSE.source-map',
                        'README.md',
                        'bin',
                        'escodegen.js',
                        'package.json'
                    ],
                    'homepage': 'http://github.com/estools/escodegen',
                    'license': 'BSD-2-Clause',
                    'main': 'escodegen.js',
                    'maintainers': [{
                            'name': 'Yusuke Suzuki',
                            'email': 'utatane.tea@gmail.com',
                            'url': 'http://github.com/Constellation'
                        }],
                    'name': 'escodegen',
                    'optionalDependencies': { 'source-map': '~0.2.0' },
                    'repository': {
                        'type': 'git',
                        'url': 'git+ssh://git@github.com/estools/escodegen.git'
                    },
                    'scripts': {
                        'build': 'cjsify -a path: tools/entry-point.js > escodegen.browser.js',
                        'build-min': 'cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js',
                        'lint': 'gulp lint',
                        'release': 'node tools/release.js',
                        'test': 'gulp travis',
                        'unit-test': 'gulp test'
                    },
                    'version': '1.8.1'
                };
            },
            {}
        ],
        34: [
            function (require, module, exports) {
                'use strict';
                var astNodeTypes = require('./lib/ast-node-types'), commentAttachment = require('./lib/comment-attachment'), TokenTranslator = require('./lib/token-translator'), acornJSX = require('acorn-jsx/inject'), rawAcorn = require('acorn');
                var acorn = acornJSX(rawAcorn);
                var DEFAULT_ECMA_VERSION = 5;
                var lookahead, extra, lastToken;
                var assign = Object.assign || function assign(target) {
                    for (var argIndex = 1; argIndex < arguments.length; argIndex++) {
                        if (arguments[argIndex] !== null && typeof arguments[argIndex] === 'object') {
                            var keys = Object.keys(arguments[argIndex]);
                            for (var keyIndex = 0; keyIndex < keys.length; keyIndex++) {
                                target[keys[keyIndex]] = arguments[argIndex][keys[keyIndex]];
                            }
                        }
                    }
                    return target;
                };
                function resetExtra() {
                    extra = {
                        tokens: null,
                        range: false,
                        loc: false,
                        comment: false,
                        comments: [],
                        tolerant: false,
                        errors: [],
                        strict: false,
                        ecmaFeatures: {},
                        ecmaVersion: DEFAULT_ECMA_VERSION,
                        isModule: false
                    };
                }
                var tt = acorn.tokTypes, getLineInfo = acorn.getLineInfo, lineBreak = acorn.lineBreak;
                tt.jsxAttrValueToken = {};
                function normalizeEcmaVersion(ecmaVersion) {
                    if (typeof ecmaVersion === 'number') {
                        var version = ecmaVersion;
                        if (version >= 2015) {
                            version -= 2009;
                        }
                        switch (version) {
                        case 3:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                            return version;
                        default:
                            throw new Error('Invalid ecmaVersion.');
                        }
                    } else {
                        return DEFAULT_ECMA_VERSION;
                    }
                }
                function isValidNode(node) {
                    var ecma = extra.ecmaFeatures;
                    switch (node.type) {
                    case 'ExperimentalSpreadProperty':
                    case 'ExperimentalRestProperty':
                        return ecma.experimentalObjectRestSpread;
                    case 'ImportDeclaration':
                    case 'ExportNamedDeclaration':
                    case 'ExportDefaultDeclaration':
                    case 'ExportAllDeclaration':
                        return extra.isModule;
                    default:
                        return true;
                    }
                }
                function esprimaFinishNode(result) {
                    if (!isValidNode(result)) {
                        this.unexpected(result.start);
                    }
                    if (result.type === 'TryStatement') {
                        delete result.guardedHandlers;
                    } else if (result.type === 'CatchClause') {
                        delete result.guard;
                    }
                    if (result.type === 'TemplateElement') {
                        var terminalDollarBraceL = this.input.slice(result.end, result.end + 2) === '${';
                        if (result.range) {
                            result.range[0]--;
                            result.range[1] += terminalDollarBraceL ? 2 : 1;
                        }
                        if (result.loc) {
                            result.loc.start.column--;
                            result.loc.end.column += terminalDollarBraceL ? 2 : 1;
                        }
                    }
                    if (result.type === 'Literal' && result.value === undefined) {
                        result.value = null;
                    }
                    if (extra.attachComment) {
                        commentAttachment.processComment(result);
                    }
                    if (result.type.indexOf('Function') > -1 && !result.generator) {
                        result.generator = false;
                    }
                    return result;
                }
                function isValidToken(parser) {
                    var ecma = extra.ecmaFeatures;
                    var type = parser.type;
                    switch (type) {
                    case tt.jsxName:
                    case tt.jsxText:
                    case tt.jsxTagStart:
                    case tt.jsxTagEnd:
                        return ecma.jsx;
                    case tt.regexp:
                        if (extra.ecmaVersion < 6 && parser.value.flags && parser.value.flags.indexOf('y') > -1) {
                            return false;
                        }
                        return true;
                    default:
                        return true;
                    }
                }
                function wrapFinishNode(finishNode) {
                    return function (node, type, pos, loc) {
                        var result = finishNode.call(this, node, type, pos, loc);
                        return esprimaFinishNode.call(this, result);
                    };
                }
                acorn.plugins.espree = function (instance) {
                    instance.extend('finishNode', wrapFinishNode);
                    instance.extend('finishNodeAt', wrapFinishNode);
                    instance.extend('next', function (next) {
                        return function () {
                            if (!isValidToken(this)) {
                                this.unexpected();
                            }
                            return next.call(this);
                        };
                    });
                    instance.extend('checkLVal', function (checkLVal) {
                        return function (expr, isBinding, checkClashes) {
                            if (extra.ecmaFeatures.experimentalObjectRestSpread && expr.type === 'ObjectPattern') {
                                for (var i = 0; i < expr.properties.length; i++) {
                                    if (expr.properties[i].type.indexOf('Experimental') === -1) {
                                        this.checkLVal(expr.properties[i].value, isBinding, checkClashes);
                                    }
                                }
                                return undefined;
                            }
                            return checkLVal.call(this, expr, isBinding, checkClashes);
                        };
                    });
                    instance.extend('parseTopLevel', function (parseTopLevel) {
                        return function (node) {
                            if (extra.ecmaFeatures.impliedStrict && this.options.ecmaVersion >= 5) {
                                this.strict = true;
                            }
                            return parseTopLevel.call(this, node);
                        };
                    });
                    instance.extend('toAssignable', function (toAssignable) {
                        return function (node, isBinding) {
                            if (extra.ecmaFeatures.experimentalObjectRestSpread && node.type === 'ObjectExpression') {
                                node.type = 'ObjectPattern';
                                for (var i = 0; i < node.properties.length; i++) {
                                    var prop = node.properties[i];
                                    if (prop.type === 'ExperimentalSpreadProperty') {
                                        prop.type = 'ExperimentalRestProperty';
                                    } else if (prop.kind !== 'init') {
                                        this.raise(prop.key.start, 'Object pattern can\'t contain getter or setter');
                                    } else {
                                        this.toAssignable(prop.value, isBinding);
                                    }
                                }
                                return node;
                            } else {
                                return toAssignable.call(this, node, isBinding);
                            }
                        };
                    });
                    instance.parseObjectRest = function () {
                        var node = this.startNode();
                        this.next();
                        node.argument = this.parseIdent();
                        return this.finishNode(node, 'ExperimentalRestProperty');
                    };
                    instance.parseObj = function (isPattern, refShorthandDefaultPos) {
                        var node = this.startNode(), first = true, hasRestProperty = false, propHash = {};
                        node.properties = [];
                        this.next();
                        while (!this.eat(tt.braceR)) {
                            if (!first) {
                                this.expect(tt.comma);
                                if (this.afterTrailingComma(tt.braceR)) {
                                    if (hasRestProperty) {
                                        this.raise(node.properties[node.properties.length - 1].end, 'Unexpected trailing comma after rest property');
                                    }
                                    break;
                                }
                            } else {
                                first = false;
                            }
                            var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
                            if (extra.ecmaFeatures.experimentalObjectRestSpread && this.type === tt.ellipsis) {
                                if (isPattern) {
                                    prop = this.parseObjectRest();
                                    hasRestProperty = true;
                                } else {
                                    prop = this.parseSpread();
                                    prop.type = 'ExperimentalSpreadProperty';
                                }
                                node.properties.push(prop);
                                continue;
                            }
                            if (this.options.ecmaVersion >= 6) {
                                prop.method = false;
                                prop.shorthand = false;
                                if (isPattern || refShorthandDefaultPos) {
                                    startPos = this.start;
                                    startLoc = this.startLoc;
                                }
                                if (!isPattern) {
                                    isGenerator = this.eat(tt.star);
                                }
                            }
                            this.parsePropertyName(prop, refShorthandDefaultPos);
                            if (this.options.ecmaVersion >= 8 && !isPattern && !isGenerator && !prop.computed && prop.key.type === 'Identifier' && prop.key.name === 'async' && (this.type === tt.name || this.type === tt.num || this.type === tt.string || this.type === tt.bracketL) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
                                this.parsePropertyName(prop, refShorthandDefaultPos);
                                isAsync = true;
                            } else {
                                isAsync = false;
                            }
                            this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refShorthandDefaultPos);
                            this.checkPropClash(prop, propHash);
                            node.properties.push(this.finishNode(prop, 'Property'));
                        }
                        return this.finishNode(node, isPattern ? 'ObjectPattern' : 'ObjectExpression');
                    };
                    instance.raise = instance.raiseRecoverable = function (pos, message) {
                        var loc = getLineInfo(this.input, pos);
                        var err = new SyntaxError(message);
                        err.index = pos;
                        err.lineNumber = loc.line;
                        err.column = loc.column + 1;
                        throw err;
                    };
                    instance.unexpected = function (pos) {
                        var message = 'Unexpected token';
                        if (pos !== null && pos !== undefined) {
                            this.pos = pos;
                            if (this.options.locations) {
                                while (this.pos < this.lineStart) {
                                    this.lineStart = this.input.lastIndexOf('\n', this.lineStart - 2) + 1;
                                    --this.curLine;
                                }
                            }
                            this.nextToken();
                        }
                        if (this.end > this.start) {
                            message += ' ' + this.input.slice(this.start, this.end);
                        }
                        this.raise(this.start, message);
                    };
                    instance.extend('jsx_readString', function (jsxReadString) {
                        return function (quote) {
                            var result = jsxReadString.call(this, quote);
                            if (this.type === tt.string) {
                                extra.jsxAttrValueToken = true;
                            }
                            return result;
                        };
                    });
                };
                function tokenize(code, options) {
                    var toString, tokens, impliedStrict, translator = new TokenTranslator(tt, code);
                    toString = String;
                    if (typeof code !== 'string' && !(code instanceof String)) {
                        code = toString(code);
                    }
                    lookahead = null;
                    options = assign({}, options);
                    var acornOptions = {
                        ecmaVersion: DEFAULT_ECMA_VERSION,
                        plugins: { espree: true }
                    };
                    resetExtra();
                    options.tokens = true;
                    extra.tokens = [];
                    extra.range = typeof options.range === 'boolean' && options.range;
                    acornOptions.ranges = extra.range;
                    extra.loc = typeof options.loc === 'boolean' && options.loc;
                    acornOptions.locations = extra.loc;
                    extra.comment = typeof options.comment === 'boolean' && options.comment;
                    if (extra.comment) {
                        acornOptions.onComment = function () {
                            var comment = convertAcornCommentToEsprimaComment.apply(this, arguments);
                            extra.comments.push(comment);
                        };
                    }
                    extra.tolerant = typeof options.tolerant === 'boolean' && options.tolerant;
                    acornOptions.ecmaVersion = extra.ecmaVersion = normalizeEcmaVersion(options.ecmaVersion);
                    if (options.ecmaFeatures && typeof options.ecmaFeatures === 'object') {
                        extra.ecmaFeatures = assign({}, options.ecmaFeatures);
                        impliedStrict = extra.ecmaFeatures.impliedStrict;
                        extra.ecmaFeatures.impliedStrict = typeof impliedStrict === 'boolean' && impliedStrict;
                    }
                    try {
                        var tokenizer = acorn.tokenizer(code, acornOptions);
                        while ((lookahead = tokenizer.getToken()).type !== tt.eof) {
                            translator.onToken(lookahead, extra);
                        }
                        tokens = extra.tokens;
                        if (extra.comment) {
                            tokens.comments = extra.comments;
                        }
                        if (extra.tolerant) {
                            tokens.errors = extra.errors;
                        }
                    } catch (e) {
                        throw e;
                    }
                    return tokens;
                }
                function convertAcornCommentToEsprimaComment(block, text, start, end, startLoc, endLoc) {
                    var comment = {
                        type: block ? 'Block' : 'Line',
                        value: text
                    };
                    if (typeof start === 'number') {
                        comment.start = start;
                        comment.end = end;
                        comment.range = [
                            start,
                            end
                        ];
                    }
                    if (typeof startLoc === 'object') {
                        comment.loc = {
                            start: startLoc,
                            end: endLoc
                        };
                    }
                    return comment;
                }
                function parse(code, options) {
                    var program, toString = String, translator, impliedStrict, acornOptions = {
                            ecmaVersion: DEFAULT_ECMA_VERSION,
                            plugins: { espree: true }
                        };
                    lastToken = null;
                    if (typeof code !== 'string' && !(code instanceof String)) {
                        code = toString(code);
                    }
                    resetExtra();
                    commentAttachment.reset();
                    if (typeof options !== 'undefined') {
                        extra.range = typeof options.range === 'boolean' && options.range;
                        extra.loc = typeof options.loc === 'boolean' && options.loc;
                        extra.attachComment = typeof options.attachComment === 'boolean' && options.attachComment;
                        if (extra.loc && options.source !== null && options.source !== undefined) {
                            extra.source = toString(options.source);
                        }
                        if (typeof options.tokens === 'boolean' && options.tokens) {
                            extra.tokens = [];
                            translator = new TokenTranslator(tt, code);
                        }
                        if (typeof options.comment === 'boolean' && options.comment) {
                            extra.comment = true;
                            extra.comments = [];
                        }
                        if (typeof options.tolerant === 'boolean' && options.tolerant) {
                            extra.errors = [];
                        }
                        if (extra.attachComment) {
                            extra.range = true;
                            extra.comments = [];
                            commentAttachment.reset();
                        }
                        acornOptions.ecmaVersion = extra.ecmaVersion = normalizeEcmaVersion(options.ecmaVersion);
                        if (options.sourceType === 'module') {
                            extra.isModule = true;
                            if (acornOptions.ecmaVersion < 6) {
                                acornOptions.ecmaVersion = 6;
                                extra.ecmaVersion = 6;
                            }
                            acornOptions.sourceType = 'module';
                        }
                        if (options.ecmaFeatures && typeof options.ecmaFeatures === 'object') {
                            extra.ecmaFeatures = assign({}, options.ecmaFeatures);
                            impliedStrict = extra.ecmaFeatures.impliedStrict;
                            extra.ecmaFeatures.impliedStrict = typeof impliedStrict === 'boolean' && impliedStrict;
                            if (options.ecmaFeatures.globalReturn) {
                                acornOptions.allowReturnOutsideFunction = true;
                            }
                        }
                        acornOptions.onToken = function (token) {
                            if (extra.tokens) {
                                translator.onToken(token, extra);
                            }
                            if (token.type !== tt.eof) {
                                lastToken = token;
                            }
                        };
                        if (extra.attachComment || extra.comment) {
                            acornOptions.onComment = function () {
                                var comment = convertAcornCommentToEsprimaComment.apply(this, arguments);
                                extra.comments.push(comment);
                                if (extra.attachComment) {
                                    commentAttachment.addComment(comment);
                                }
                            };
                        }
                        if (extra.range) {
                            acornOptions.ranges = true;
                        }
                        if (extra.loc) {
                            acornOptions.locations = true;
                        }
                        if (extra.ecmaFeatures.jsx) {
                            acornOptions.plugins = {
                                jsx: true,
                                espree: true
                            };
                        }
                    }
                    program = acorn.parse(code, acornOptions);
                    program.sourceType = extra.isModule ? 'module' : 'script';
                    if (extra.comment || extra.attachComment) {
                        program.comments = extra.comments;
                    }
                    if (extra.tokens) {
                        program.tokens = extra.tokens;
                    }
                    if (program.range) {
                        program.range[0] = program.body.length ? program.body[0].range[0] : program.range[0];
                        program.range[1] = lastToken ? lastToken.range[1] : program.range[1];
                    }
                    if (program.loc) {
                        program.loc.start = program.body.length ? program.body[0].loc.start : program.loc.start;
                        program.loc.end = lastToken ? lastToken.loc.end : program.loc.end;
                    }
                    return program;
                }
                exports.version = require('./package.json').version;
                exports.tokenize = tokenize;
                exports.parse = parse;
                exports.Syntax = function () {
                    var name, types = {};
                    if (typeof Object.create === 'function') {
                        types = Object.create(null);
                    }
                    for (name in astNodeTypes) {
                        if (astNodeTypes.hasOwnProperty(name)) {
                            types[name] = astNodeTypes[name];
                        }
                    }
                    if (typeof Object.freeze === 'function') {
                        Object.freeze(types);
                    }
                    return types;
                }();
                exports.VisitorKeys = function () {
                    var visitorKeys = require('./lib/visitor-keys');
                    var name, keys = {};
                    if (typeof Object.create === 'function') {
                        keys = Object.create(null);
                    }
                    for (name in visitorKeys) {
                        if (visitorKeys.hasOwnProperty(name)) {
                            keys[name] = visitorKeys[name];
                        }
                    }
                    if (typeof Object.freeze === 'function') {
                        Object.freeze(keys);
                    }
                    return keys;
                }();
            },
            {
                './lib/ast-node-types': 35,
                './lib/comment-attachment': 36,
                './lib/token-translator': 37,
                './lib/visitor-keys': 38,
                './package.json': 39,
                'acorn': 3,
                'acorn-jsx/inject': 1
            }
        ],
        35: [
            function (require, module, exports) {
                'use strict';
                module.exports = {
                    AssignmentExpression: 'AssignmentExpression',
                    AssignmentPattern: 'AssignmentPattern',
                    ArrayExpression: 'ArrayExpression',
                    ArrayPattern: 'ArrayPattern',
                    ArrowFunctionExpression: 'ArrowFunctionExpression',
                    AwaitExpression: 'AwaitExpression',
                    BlockStatement: 'BlockStatement',
                    BinaryExpression: 'BinaryExpression',
                    BreakStatement: 'BreakStatement',
                    CallExpression: 'CallExpression',
                    CatchClause: 'CatchClause',
                    ClassBody: 'ClassBody',
                    ClassDeclaration: 'ClassDeclaration',
                    ClassExpression: 'ClassExpression',
                    ConditionalExpression: 'ConditionalExpression',
                    ContinueStatement: 'ContinueStatement',
                    DoWhileStatement: 'DoWhileStatement',
                    DebuggerStatement: 'DebuggerStatement',
                    EmptyStatement: 'EmptyStatement',
                    ExperimentalRestProperty: 'ExperimentalRestProperty',
                    ExperimentalSpreadProperty: 'ExperimentalSpreadProperty',
                    ExpressionStatement: 'ExpressionStatement',
                    ForStatement: 'ForStatement',
                    ForInStatement: 'ForInStatement',
                    ForOfStatement: 'ForOfStatement',
                    FunctionDeclaration: 'FunctionDeclaration',
                    FunctionExpression: 'FunctionExpression',
                    Identifier: 'Identifier',
                    IfStatement: 'IfStatement',
                    Literal: 'Literal',
                    LabeledStatement: 'LabeledStatement',
                    LogicalExpression: 'LogicalExpression',
                    MemberExpression: 'MemberExpression',
                    MetaProperty: 'MetaProperty',
                    MethodDefinition: 'MethodDefinition',
                    NewExpression: 'NewExpression',
                    ObjectExpression: 'ObjectExpression',
                    ObjectPattern: 'ObjectPattern',
                    Program: 'Program',
                    Property: 'Property',
                    RestElement: 'RestElement',
                    ReturnStatement: 'ReturnStatement',
                    SequenceExpression: 'SequenceExpression',
                    SpreadElement: 'SpreadElement',
                    Super: 'Super',
                    SwitchCase: 'SwitchCase',
                    SwitchStatement: 'SwitchStatement',
                    TaggedTemplateExpression: 'TaggedTemplateExpression',
                    TemplateElement: 'TemplateElement',
                    TemplateLiteral: 'TemplateLiteral',
                    ThisExpression: 'ThisExpression',
                    ThrowStatement: 'ThrowStatement',
                    TryStatement: 'TryStatement',
                    UnaryExpression: 'UnaryExpression',
                    UpdateExpression: 'UpdateExpression',
                    VariableDeclaration: 'VariableDeclaration',
                    VariableDeclarator: 'VariableDeclarator',
                    WhileStatement: 'WhileStatement',
                    WithStatement: 'WithStatement',
                    YieldExpression: 'YieldExpression',
                    JSXIdentifier: 'JSXIdentifier',
                    JSXNamespacedName: 'JSXNamespacedName',
                    JSXMemberExpression: 'JSXMemberExpression',
                    JSXEmptyExpression: 'JSXEmptyExpression',
                    JSXExpressionContainer: 'JSXExpressionContainer',
                    JSXElement: 'JSXElement',
                    JSXClosingElement: 'JSXClosingElement',
                    JSXOpeningElement: 'JSXOpeningElement',
                    JSXAttribute: 'JSXAttribute',
                    JSXSpreadAttribute: 'JSXSpreadAttribute',
                    JSXText: 'JSXText',
                    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
                    ExportNamedDeclaration: 'ExportNamedDeclaration',
                    ExportAllDeclaration: 'ExportAllDeclaration',
                    ExportSpecifier: 'ExportSpecifier',
                    ImportDeclaration: 'ImportDeclaration',
                    ImportSpecifier: 'ImportSpecifier',
                    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
                    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier'
                };
            },
            {}
        ],
        36: [
            function (require, module, exports) {
                'use strict';
                var astNodeTypes = require('./ast-node-types');
                var extra = {
                    trailingComments: [],
                    leadingComments: [],
                    bottomRightStack: [],
                    previousNode: null
                };
                module.exports = {
                    reset: function () {
                        extra.trailingComments = [];
                        extra.leadingComments = [];
                        extra.bottomRightStack = [];
                        extra.previousNode = null;
                    },
                    addComment: function (comment) {
                        extra.trailingComments.push(comment);
                        extra.leadingComments.push(comment);
                    },
                    processComment: function (node) {
                        var lastChild, trailingComments, i, j;
                        if (node.type === astNodeTypes.Program) {
                            if (node.body.length > 0) {
                                return;
                            }
                        }
                        if (extra.trailingComments.length > 0) {
                            if (extra.trailingComments[0].range[0] >= node.range[1]) {
                                trailingComments = extra.trailingComments;
                                extra.trailingComments = [];
                            } else {
                                extra.trailingComments.length = 0;
                            }
                        } else {
                            if (extra.bottomRightStack.length > 0 && extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments && extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments[0].range[0] >= node.range[1]) {
                                trailingComments = extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;
                                delete extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;
                            }
                        }
                        while (extra.bottomRightStack.length > 0 && extra.bottomRightStack[extra.bottomRightStack.length - 1].range[0] >= node.range[0]) {
                            lastChild = extra.bottomRightStack.pop();
                        }
                        if (lastChild) {
                            if (lastChild.leadingComments) {
                                if (lastChild.leadingComments[lastChild.leadingComments.length - 1].range[1] <= node.range[0]) {
                                    node.leadingComments = lastChild.leadingComments;
                                    delete lastChild.leadingComments;
                                } else {
                                    for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {
                                        if (lastChild.leadingComments[i].range[1] <= node.range[0]) {
                                            node.leadingComments = lastChild.leadingComments.splice(0, i + 1);
                                            break;
                                        }
                                    }
                                }
                            }
                        } else if (extra.leadingComments.length > 0) {
                            if (extra.leadingComments[extra.leadingComments.length - 1].range[1] <= node.range[0]) {
                                if (extra.previousNode) {
                                    for (j = 0; j < extra.leadingComments.length; j++) {
                                        if (extra.leadingComments[j].end < extra.previousNode.end) {
                                            extra.leadingComments.splice(j, 1);
                                            j--;
                                        }
                                    }
                                }
                                if (extra.leadingComments.length > 0) {
                                    node.leadingComments = extra.leadingComments;
                                    extra.leadingComments = [];
                                }
                            } else {
                                for (i = 0; i < extra.leadingComments.length; i++) {
                                    if (extra.leadingComments[i].range[1] > node.range[0]) {
                                        break;
                                    }
                                }
                                node.leadingComments = extra.leadingComments.slice(0, i);
                                if (node.leadingComments.length === 0) {
                                    delete node.leadingComments;
                                }
                                trailingComments = extra.leadingComments.slice(i);
                                if (trailingComments.length === 0) {
                                    trailingComments = null;
                                }
                            }
                        }
                        extra.previousNode = node;
                        if (trailingComments) {
                            node.trailingComments = trailingComments;
                        }
                        extra.bottomRightStack.push(node);
                    }
                };
            },
            { './ast-node-types': 35 }
        ],
        37: [
            function (require, module, exports) {
                'use strict';
                var Token = {
                    Boolean: 'Boolean',
                    EOF: '<end>',
                    Identifier: 'Identifier',
                    Keyword: 'Keyword',
                    Null: 'Null',
                    Numeric: 'Numeric',
                    Punctuator: 'Punctuator',
                    String: 'String',
                    RegularExpression: 'RegularExpression',
                    Template: 'Template',
                    JSXIdentifier: 'JSXIdentifier',
                    JSXText: 'JSXText'
                };
                function convertTemplatePart(tokens, code) {
                    var firstToken = tokens[0], lastTemplateToken = tokens[tokens.length - 1];
                    var token = {
                        type: Token.Template,
                        value: code.slice(firstToken.start, lastTemplateToken.end)
                    };
                    if (firstToken.loc) {
                        token.loc = {
                            start: firstToken.loc.start,
                            end: lastTemplateToken.loc.end
                        };
                    }
                    if (firstToken.range) {
                        token.start = firstToken.range[0];
                        token.end = lastTemplateToken.range[1];
                        token.range = [
                            token.start,
                            token.end
                        ];
                    }
                    return token;
                }
                function TokenTranslator(acornTokTypes, code) {
                    this._acornTokTypes = acornTokTypes;
                    this._tokens = [];
                    this._curlyBrace = null;
                    this._code = code;
                }
                TokenTranslator.prototype = {
                    constructor: TokenTranslator,
                    translate: function (token, extra) {
                        var type = token.type, tt = this._acornTokTypes;
                        if (type === tt.name) {
                            token.type = Token.Identifier;
                            if (token.value === 'static') {
                                token.type = Token.Keyword;
                            }
                            if (extra.ecmaVersion > 5 && (token.value === 'yield' || token.value === 'let')) {
                                token.type = Token.Keyword;
                            }
                        } else if (type === tt.semi || type === tt.comma || type === tt.parenL || type === tt.parenR || type === tt.braceL || type === tt.braceR || type === tt.dot || type === tt.bracketL || type === tt.colon || type === tt.question || type === tt.bracketR || type === tt.ellipsis || type === tt.arrow || type === tt.jsxTagStart || type === tt.incDec || type === tt.starstar || type === tt.jsxTagEnd || type === tt.prefix || type.binop && !type.keyword || type.isAssign) {
                            token.type = Token.Punctuator;
                            token.value = this._code.slice(token.start, token.end);
                        } else if (type === tt.jsxName) {
                            token.type = Token.JSXIdentifier;
                        } else if (type.label === 'jsxText' || type === tt.jsxAttrValueToken) {
                            token.type = Token.JSXText;
                        } else if (type.keyword) {
                            if (type.keyword === 'true' || type.keyword === 'false') {
                                token.type = Token.Boolean;
                            } else if (type.keyword === 'null') {
                                token.type = Token.Null;
                            } else {
                                token.type = Token.Keyword;
                            }
                        } else if (type === tt.num) {
                            token.type = Token.Numeric;
                            token.value = this._code.slice(token.start, token.end);
                        } else if (type === tt.string) {
                            if (extra.jsxAttrValueToken) {
                                extra.jsxAttrValueToken = false;
                                token.type = Token.JSXText;
                            } else {
                                token.type = Token.String;
                            }
                            token.value = this._code.slice(token.start, token.end);
                        } else if (type === tt.regexp) {
                            token.type = Token.RegularExpression;
                            var value = token.value;
                            token.regex = {
                                flags: value.flags,
                                pattern: value.pattern
                            };
                            token.value = '/' + value.pattern + '/' + value.flags;
                        }
                        return token;
                    },
                    onToken: function (token, extra) {
                        var that = this, tt = this._acornTokTypes, tokens = extra.tokens, templateTokens = this._tokens;
                        function translateTemplateTokens() {
                            tokens.push(convertTemplatePart(that._tokens, that._code));
                            that._tokens = [];
                        }
                        if (token.type === tt.eof) {
                            if (this._curlyBrace) {
                                tokens.push(this.translate(this._curlyBrace, extra));
                            }
                            return;
                        }
                        if (token.type === tt.backQuote) {
                            if (this._curlyBrace) {
                                tokens.push(this.translate(this._curlyBrace, extra));
                                this._curlyBrace = null;
                            }
                            templateTokens.push(token);
                            if (templateTokens.length > 1) {
                                translateTemplateTokens();
                            }
                            return;
                        } else if (token.type === tt.dollarBraceL) {
                            templateTokens.push(token);
                            translateTemplateTokens();
                            return;
                        } else if (token.type === tt.braceR) {
                            if (this._curlyBrace) {
                                tokens.push(this.translate(this._curlyBrace, extra));
                            }
                            this._curlyBrace = token;
                            return;
                        } else if (token.type === tt.template || token.type === tt.invalidTemplate) {
                            if (this._curlyBrace) {
                                templateTokens.push(this._curlyBrace);
                                this._curlyBrace = null;
                            }
                            templateTokens.push(token);
                            return;
                        }
                        if (this._curlyBrace) {
                            tokens.push(this.translate(this._curlyBrace, extra));
                            this._curlyBrace = null;
                        }
                        tokens.push(this.translate(token, extra));
                    }
                };
                module.exports = TokenTranslator;
            },
            {}
        ],
        38: [
            function (require, module, exports) {
                'use strict';
                module.exports = {
                    AssignmentExpression: [
                        'left',
                        'right'
                    ],
                    AssignmentPattern: [
                        'left',
                        'right'
                    ],
                    ArrayExpression: ['elements'],
                    ArrayPattern: ['elements'],
                    ArrowFunctionExpression: [
                        'params',
                        'body'
                    ],
                    BlockStatement: ['body'],
                    BinaryExpression: [
                        'left',
                        'right'
                    ],
                    BreakStatement: ['label'],
                    CallExpression: [
                        'callee',
                        'arguments'
                    ],
                    CatchClause: [
                        'param',
                        'body'
                    ],
                    ClassBody: ['body'],
                    ClassDeclaration: [
                        'id',
                        'superClass',
                        'body'
                    ],
                    ClassExpression: [
                        'id',
                        'superClass',
                        'body'
                    ],
                    ConditionalExpression: [
                        'test',
                        'consequent',
                        'alternate'
                    ],
                    ContinueStatement: ['label'],
                    DebuggerStatement: [],
                    DirectiveStatement: [],
                    DoWhileStatement: [
                        'body',
                        'test'
                    ],
                    EmptyStatement: [],
                    ExportAllDeclaration: ['source'],
                    ExportDefaultDeclaration: ['declaration'],
                    ExportNamedDeclaration: [
                        'declaration',
                        'specifiers',
                        'source'
                    ],
                    ExportSpecifier: [
                        'exported',
                        'local'
                    ],
                    ExpressionStatement: ['expression'],
                    ForStatement: [
                        'init',
                        'test',
                        'update',
                        'body'
                    ],
                    ForInStatement: [
                        'left',
                        'right',
                        'body'
                    ],
                    ForOfStatement: [
                        'left',
                        'right',
                        'body'
                    ],
                    FunctionDeclaration: [
                        'id',
                        'params',
                        'body'
                    ],
                    FunctionExpression: [
                        'id',
                        'params',
                        'body'
                    ],
                    Identifier: [],
                    IfStatement: [
                        'test',
                        'consequent',
                        'alternate'
                    ],
                    ImportDeclaration: [
                        'specifiers',
                        'source'
                    ],
                    ImportDefaultSpecifier: ['local'],
                    ImportNamespaceSpecifier: ['local'],
                    ImportSpecifier: [
                        'imported',
                        'local'
                    ],
                    Literal: [],
                    LabeledStatement: [
                        'label',
                        'body'
                    ],
                    LogicalExpression: [
                        'left',
                        'right'
                    ],
                    MemberExpression: [
                        'object',
                        'property'
                    ],
                    MetaProperty: [
                        'meta',
                        'property'
                    ],
                    MethodDefinition: [
                        'key',
                        'value'
                    ],
                    ModuleSpecifier: [],
                    NewExpression: [
                        'callee',
                        'arguments'
                    ],
                    ObjectExpression: ['properties'],
                    ObjectPattern: ['properties'],
                    Program: ['body'],
                    Property: [
                        'key',
                        'value'
                    ],
                    RestElement: ['argument'],
                    ReturnStatement: ['argument'],
                    SequenceExpression: ['expressions'],
                    SpreadElement: ['argument'],
                    Super: [],
                    SwitchStatement: [
                        'discriminant',
                        'cases'
                    ],
                    SwitchCase: [
                        'test',
                        'consequent'
                    ],
                    TaggedTemplateExpression: [
                        'tag',
                        'quasi'
                    ],
                    TemplateElement: [],
                    TemplateLiteral: [
                        'quasis',
                        'expressions'
                    ],
                    ThisExpression: [],
                    ThrowStatement: ['argument'],
                    TryStatement: [
                        'block',
                        'handler',
                        'finalizer'
                    ],
                    UnaryExpression: ['argument'],
                    UpdateExpression: ['argument'],
                    VariableDeclaration: ['declarations'],
                    VariableDeclarator: [
                        'id',
                        'init'
                    ],
                    WhileStatement: [
                        'test',
                        'body'
                    ],
                    WithStatement: [
                        'object',
                        'body'
                    ],
                    YieldExpression: ['argument'],
                    JSXIdentifier: [],
                    JSXNamespacedName: [
                        'namespace',
                        'name'
                    ],
                    JSXMemberExpression: [
                        'object',
                        'property'
                    ],
                    JSXEmptyExpression: [],
                    JSXExpressionContainer: ['expression'],
                    JSXElement: [
                        'openingElement',
                        'closingElement',
                        'children'
                    ],
                    JSXClosingElement: ['name'],
                    JSXOpeningElement: [
                        'name',
                        'attributes'
                    ],
                    JSXAttribute: [
                        'name',
                        'value'
                    ],
                    JSXText: null,
                    JSXSpreadAttribute: ['argument'],
                    ExperimentalRestProperty: ['argument'],
                    ExperimentalSpreadProperty: ['argument']
                };
            },
            {}
        ],
        39: [
            function (require, module, exports) {
                module.exports = {
                    '_from': 'espree@^3.3.2',
                    '_id': 'espree@3.5.0',
                    '_inBundle': false,
                    '_integrity': 'sha1-mDWGJb3QVYYeon4oZ+pyn69GPY0=',
                    '_location': '/espree',
                    '_phantomChildren': {},
                    '_requested': {
                        'type': 'range',
                        'registry': true,
                        'raw': 'espree@^3.3.2',
                        'name': 'espree',
                        'escapedName': 'espree',
                        'rawSpec': '^3.3.2',
                        'saveSpec': null,
                        'fetchSpec': '^3.3.2'
                    },
                    '_requiredBy': [
                        '/',
                        '/polymer-analyzer',
                        '/polymer-bundler'
                    ],
                    '_resolved': 'https://registry.npmjs.org/espree/-/espree-3.5.0.tgz',
                    '_shasum': '98358625bdd055861ea27e2867ea729faf463d8d',
                    '_spec': 'espree@^3.3.2',
                    '_where': '/home/fedora/WebComponents/components/thin-hook',
                    'author': {
                        'name': 'Nicholas C. Zakas',
                        'email': 'nicholas+npm@nczconsulting.com'
                    },
                    'bugs': { 'url': 'http://github.com/eslint/espree.git' },
                    'bundleDependencies': false,
                    'dependencies': {
                        'acorn': '^5.1.1',
                        'acorn-jsx': '^3.0.0'
                    },
                    'deprecated': false,
                    'description': 'An Esprima-compatible JavaScript parser built on Acorn',
                    'devDependencies': {
                        'browserify': '^7.0.0',
                        'chai': '^1.10.0',
                        'eslint': '^2.13.1',
                        'eslint-config-eslint': '^3.0.0',
                        'eslint-release': '^0.10.0',
                        'esprima': 'latest',
                        'esprima-fb': '^8001.2001.0-dev-harmony-fb',
                        'istanbul': '~0.2.6',
                        'json-diff': '~0.3.1',
                        'leche': '^1.0.1',
                        'mocha': '^2.0.1',
                        'regenerate': '~0.5.4',
                        'shelljs': '^0.3.0',
                        'shelljs-nodecli': '^0.1.1',
                        'unicode-6.3.0': '~0.1.0'
                    },
                    'engines': { 'node': '>=0.10.0' },
                    'files': [
                        'lib',
                        'espree.js'
                    ],
                    'homepage': 'https://github.com/eslint/espree',
                    'keywords': [
                        'ast',
                        'ecmascript',
                        'javascript',
                        'parser',
                        'syntax',
                        'acorn'
                    ],
                    'license': 'BSD-2-Clause',
                    'main': 'espree.js',
                    'name': 'espree',
                    'repository': {
                        'type': 'git',
                        'url': 'git+https://github.com/eslint/espree.git'
                    },
                    'scripts': {
                        'alpharelease': 'eslint-prelease alpha',
                        'betarelease': 'eslint-prelease beta',
                        'browserify': 'node Makefile.js browserify',
                        'ci-release': 'eslint-ci-release',
                        'generate-regex': 'node tools/generate-identifier-regex.js',
                        'gh-release': 'eslint-gh-release',
                        'lint': 'node Makefile.js lint',
                        'release': 'eslint-release',
                        'test': 'npm run-script lint && node Makefile.js test'
                    },
                    'version': '3.5.0'
                };
            },
            {}
        ],
        40: [
            function (require, module, exports) {
                (function clone(exports) {
                    'use strict';
                    var Syntax, isArray, VisitorOption, VisitorKeys, objectCreate, objectKeys, BREAK, SKIP, REMOVE;
                    function ignoreJSHintError() {
                    }
                    isArray = Array.isArray;
                    if (!isArray) {
                        isArray = function isArray(array) {
                            return Object.prototype.toString.call(array) === '[object Array]';
                        };
                    }
                    function deepCopy(obj) {
                        var ret = {}, key, val;
                        for (key in obj) {
                            if (obj.hasOwnProperty(key)) {
                                val = obj[key];
                                if (typeof val === 'object' && val !== null) {
                                    ret[key] = deepCopy(val);
                                } else {
                                    ret[key] = val;
                                }
                            }
                        }
                        return ret;
                    }
                    function shallowCopy(obj) {
                        var ret = {}, key;
                        for (key in obj) {
                            if (obj.hasOwnProperty(key)) {
                                ret[key] = obj[key];
                            }
                        }
                        return ret;
                    }
                    ignoreJSHintError(shallowCopy);
                    function upperBound(array, func) {
                        var diff, len, i, current;
                        len = array.length;
                        i = 0;
                        while (len) {
                            diff = len >>> 1;
                            current = i + diff;
                            if (func(array[current])) {
                                len = diff;
                            } else {
                                i = current + 1;
                                len -= diff + 1;
                            }
                        }
                        return i;
                    }
                    function lowerBound(array, func) {
                        var diff, len, i, current;
                        len = array.length;
                        i = 0;
                        while (len) {
                            diff = len >>> 1;
                            current = i + diff;
                            if (func(array[current])) {
                                i = current + 1;
                                len -= diff + 1;
                            } else {
                                len = diff;
                            }
                        }
                        return i;
                    }
                    ignoreJSHintError(lowerBound);
                    objectCreate = Object.create || function () {
                        function F() {
                        }
                        return function (o) {
                            F.prototype = o;
                            return new F();
                        };
                    }();
                    objectKeys = Object.keys || function (o) {
                        var keys = [], key;
                        for (key in o) {
                            keys.push(key);
                        }
                        return keys;
                    };
                    function extend(to, from) {
                        var keys = objectKeys(from), key, i, len;
                        for (i = 0, len = keys.length; i < len; i += 1) {
                            key = keys[i];
                            to[key] = from[key];
                        }
                        return to;
                    }
                    Syntax = {
                        AssignmentExpression: 'AssignmentExpression',
                        AssignmentPattern: 'AssignmentPattern',
                        ArrayExpression: 'ArrayExpression',
                        ArrayPattern: 'ArrayPattern',
                        ArrowFunctionExpression: 'ArrowFunctionExpression',
                        AwaitExpression: 'AwaitExpression',
                        BlockStatement: 'BlockStatement',
                        BinaryExpression: 'BinaryExpression',
                        BreakStatement: 'BreakStatement',
                        CallExpression: 'CallExpression',
                        CatchClause: 'CatchClause',
                        ClassBody: 'ClassBody',
                        ClassDeclaration: 'ClassDeclaration',
                        ClassExpression: 'ClassExpression',
                        ComprehensionBlock: 'ComprehensionBlock',
                        ComprehensionExpression: 'ComprehensionExpression',
                        ConditionalExpression: 'ConditionalExpression',
                        ContinueStatement: 'ContinueStatement',
                        DebuggerStatement: 'DebuggerStatement',
                        DirectiveStatement: 'DirectiveStatement',
                        DoWhileStatement: 'DoWhileStatement',
                        EmptyStatement: 'EmptyStatement',
                        ExportAllDeclaration: 'ExportAllDeclaration',
                        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
                        ExportNamedDeclaration: 'ExportNamedDeclaration',
                        ExportSpecifier: 'ExportSpecifier',
                        ExpressionStatement: 'ExpressionStatement',
                        ForStatement: 'ForStatement',
                        ForInStatement: 'ForInStatement',
                        ForOfStatement: 'ForOfStatement',
                        FunctionDeclaration: 'FunctionDeclaration',
                        FunctionExpression: 'FunctionExpression',
                        GeneratorExpression: 'GeneratorExpression',
                        Identifier: 'Identifier',
                        IfStatement: 'IfStatement',
                        ImportDeclaration: 'ImportDeclaration',
                        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
                        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
                        ImportSpecifier: 'ImportSpecifier',
                        Literal: 'Literal',
                        LabeledStatement: 'LabeledStatement',
                        LogicalExpression: 'LogicalExpression',
                        MemberExpression: 'MemberExpression',
                        MetaProperty: 'MetaProperty',
                        MethodDefinition: 'MethodDefinition',
                        ModuleSpecifier: 'ModuleSpecifier',
                        NewExpression: 'NewExpression',
                        ObjectExpression: 'ObjectExpression',
                        ObjectPattern: 'ObjectPattern',
                        Program: 'Program',
                        Property: 'Property',
                        RestElement: 'RestElement',
                        ReturnStatement: 'ReturnStatement',
                        SequenceExpression: 'SequenceExpression',
                        SpreadElement: 'SpreadElement',
                        Super: 'Super',
                        SwitchStatement: 'SwitchStatement',
                        SwitchCase: 'SwitchCase',
                        TaggedTemplateExpression: 'TaggedTemplateExpression',
                        TemplateElement: 'TemplateElement',
                        TemplateLiteral: 'TemplateLiteral',
                        ThisExpression: 'ThisExpression',
                        ThrowStatement: 'ThrowStatement',
                        TryStatement: 'TryStatement',
                        UnaryExpression: 'UnaryExpression',
                        UpdateExpression: 'UpdateExpression',
                        VariableDeclaration: 'VariableDeclaration',
                        VariableDeclarator: 'VariableDeclarator',
                        WhileStatement: 'WhileStatement',
                        WithStatement: 'WithStatement',
                        YieldExpression: 'YieldExpression'
                    };
                    VisitorKeys = {
                        AssignmentExpression: [
                            'left',
                            'right'
                        ],
                        AssignmentPattern: [
                            'left',
                            'right'
                        ],
                        ArrayExpression: ['elements'],
                        ArrayPattern: ['elements'],
                        ArrowFunctionExpression: [
                            'params',
                            'body'
                        ],
                        AwaitExpression: ['argument'],
                        BlockStatement: ['body'],
                        BinaryExpression: [
                            'left',
                            'right'
                        ],
                        BreakStatement: ['label'],
                        CallExpression: [
                            'callee',
                            'arguments'
                        ],
                        CatchClause: [
                            'param',
                            'body'
                        ],
                        ClassBody: ['body'],
                        ClassDeclaration: [
                            'id',
                            'superClass',
                            'body'
                        ],
                        ClassExpression: [
                            'id',
                            'superClass',
                            'body'
                        ],
                        ComprehensionBlock: [
                            'left',
                            'right'
                        ],
                        ComprehensionExpression: [
                            'blocks',
                            'filter',
                            'body'
                        ],
                        ConditionalExpression: [
                            'test',
                            'consequent',
                            'alternate'
                        ],
                        ContinueStatement: ['label'],
                        DebuggerStatement: [],
                        DirectiveStatement: [],
                        DoWhileStatement: [
                            'body',
                            'test'
                        ],
                        EmptyStatement: [],
                        ExportAllDeclaration: ['source'],
                        ExportDefaultDeclaration: ['declaration'],
                        ExportNamedDeclaration: [
                            'declaration',
                            'specifiers',
                            'source'
                        ],
                        ExportSpecifier: [
                            'exported',
                            'local'
                        ],
                        ExpressionStatement: ['expression'],
                        ForStatement: [
                            'init',
                            'test',
                            'update',
                            'body'
                        ],
                        ForInStatement: [
                            'left',
                            'right',
                            'body'
                        ],
                        ForOfStatement: [
                            'left',
                            'right',
                            'body'
                        ],
                        FunctionDeclaration: [
                            'id',
                            'params',
                            'body'
                        ],
                        FunctionExpression: [
                            'id',
                            'params',
                            'body'
                        ],
                        GeneratorExpression: [
                            'blocks',
                            'filter',
                            'body'
                        ],
                        Identifier: [],
                        IfStatement: [
                            'test',
                            'consequent',
                            'alternate'
                        ],
                        ImportDeclaration: [
                            'specifiers',
                            'source'
                        ],
                        ImportDefaultSpecifier: ['local'],
                        ImportNamespaceSpecifier: ['local'],
                        ImportSpecifier: [
                            'imported',
                            'local'
                        ],
                        Literal: [],
                        LabeledStatement: [
                            'label',
                            'body'
                        ],
                        LogicalExpression: [
                            'left',
                            'right'
                        ],
                        MemberExpression: [
                            'object',
                            'property'
                        ],
                        MetaProperty: [
                            'meta',
                            'property'
                        ],
                        MethodDefinition: [
                            'key',
                            'value'
                        ],
                        ModuleSpecifier: [],
                        NewExpression: [
                            'callee',
                            'arguments'
                        ],
                        ObjectExpression: ['properties'],
                        ObjectPattern: ['properties'],
                        Program: ['body'],
                        Property: [
                            'key',
                            'value'
                        ],
                        RestElement: ['argument'],
                        ReturnStatement: ['argument'],
                        SequenceExpression: ['expressions'],
                        SpreadElement: ['argument'],
                        Super: [],
                        SwitchStatement: [
                            'discriminant',
                            'cases'
                        ],
                        SwitchCase: [
                            'test',
                            'consequent'
                        ],
                        TaggedTemplateExpression: [
                            'tag',
                            'quasi'
                        ],
                        TemplateElement: [],
                        TemplateLiteral: [
                            'quasis',
                            'expressions'
                        ],
                        ThisExpression: [],
                        ThrowStatement: ['argument'],
                        TryStatement: [
                            'block',
                            'handler',
                            'finalizer'
                        ],
                        UnaryExpression: ['argument'],
                        UpdateExpression: ['argument'],
                        VariableDeclaration: ['declarations'],
                        VariableDeclarator: [
                            'id',
                            'init'
                        ],
                        WhileStatement: [
                            'test',
                            'body'
                        ],
                        WithStatement: [
                            'object',
                            'body'
                        ],
                        YieldExpression: ['argument']
                    };
                    BREAK = {};
                    SKIP = {};
                    REMOVE = {};
                    VisitorOption = {
                        Break: BREAK,
                        Skip: SKIP,
                        Remove: REMOVE
                    };
                    function Reference(parent, key) {
                        this.parent = parent;
                        this.key = key;
                    }
                    Reference.prototype.replace = function replace(node) {
                        this.parent[this.key] = node;
                    };
                    Reference.prototype.remove = function remove() {
                        if (isArray(this.parent)) {
                            this.parent.splice(this.key, 1);
                            return true;
                        } else {
                            this.replace(null);
                            return false;
                        }
                    };
                    function Element(node, path, wrap, ref) {
                        this.node = node;
                        this.path = path;
                        this.wrap = wrap;
                        this.ref = ref;
                    }
                    function Controller() {
                    }
                    Controller.prototype.path = function path() {
                        var i, iz, j, jz, result, element;
                        function addToPath(result, path) {
                            if (isArray(path)) {
                                for (j = 0, jz = path.length; j < jz; ++j) {
                                    result.push(path[j]);
                                }
                            } else {
                                result.push(path);
                            }
                        }
                        if (!this.__current.path) {
                            return null;
                        }
                        result = [];
                        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {
                            element = this.__leavelist[i];
                            addToPath(result, element.path);
                        }
                        addToPath(result, this.__current.path);
                        return result;
                    };
                    Controller.prototype.type = function () {
                        var node = this.current();
                        return node.type || this.__current.wrap;
                    };
                    Controller.prototype.parents = function parents() {
                        var i, iz, result;
                        result = [];
                        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {
                            result.push(this.__leavelist[i].node);
                        }
                        return result;
                    };
                    Controller.prototype.current = function current() {
                        return this.__current.node;
                    };
                    Controller.prototype.__execute = function __execute(callback, element) {
                        var previous, result;
                        result = undefined;
                        previous = this.__current;
                        this.__current = element;
                        this.__state = null;
                        if (callback) {
                            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);
                        }
                        this.__current = previous;
                        return result;
                    };
                    Controller.prototype.notify = function notify(flag) {
                        this.__state = flag;
                    };
                    Controller.prototype.skip = function () {
                        this.notify(SKIP);
                    };
                    Controller.prototype['break'] = function () {
                        this.notify(BREAK);
                    };
                    Controller.prototype.remove = function () {
                        this.notify(REMOVE);
                    };
                    Controller.prototype.__initialize = function (root, visitor) {
                        this.visitor = visitor;
                        this.root = root;
                        this.__worklist = [];
                        this.__leavelist = [];
                        this.__current = null;
                        this.__state = null;
                        this.__fallback = null;
                        if (visitor.fallback === 'iteration') {
                            this.__fallback = objectKeys;
                        } else if (typeof visitor.fallback === 'function') {
                            this.__fallback = visitor.fallback;
                        }
                        this.__keys = VisitorKeys;
                        if (visitor.keys) {
                            this.__keys = extend(objectCreate(this.__keys), visitor.keys);
                        }
                    };
                    function isNode(node) {
                        if (node == null) {
                            return false;
                        }
                        return typeof node === 'object' && typeof node.type === 'string';
                    }
                    function isProperty(nodeType, key) {
                        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;
                    }
                    Controller.prototype.traverse = function traverse(root, visitor) {
                        var worklist, leavelist, element, node, nodeType, ret, key, current, current2, candidates, candidate, sentinel;
                        this.__initialize(root, visitor);
                        sentinel = {};
                        worklist = this.__worklist;
                        leavelist = this.__leavelist;
                        worklist.push(new Element(root, null, null, null));
                        leavelist.push(new Element(null, null, null, null));
                        while (worklist.length) {
                            element = worklist.pop();
                            if (element === sentinel) {
                                element = leavelist.pop();
                                ret = this.__execute(visitor.leave, element);
                                if (this.__state === BREAK || ret === BREAK) {
                                    return;
                                }
                                continue;
                            }
                            if (element.node) {
                                ret = this.__execute(visitor.enter, element);
                                if (this.__state === BREAK || ret === BREAK) {
                                    return;
                                }
                                worklist.push(sentinel);
                                leavelist.push(element);
                                if (this.__state === SKIP || ret === SKIP) {
                                    continue;
                                }
                                node = element.node;
                                nodeType = node.type || element.wrap;
                                candidates = this.__keys[nodeType];
                                if (!candidates) {
                                    if (this.__fallback) {
                                        candidates = this.__fallback(node);
                                    } else {
                                        throw new Error('Unknown node type ' + nodeType + '.');
                                    }
                                }
                                current = candidates.length;
                                while ((current -= 1) >= 0) {
                                    key = candidates[current];
                                    candidate = node[key];
                                    if (!candidate) {
                                        continue;
                                    }
                                    if (isArray(candidate)) {
                                        current2 = candidate.length;
                                        while ((current2 -= 1) >= 0) {
                                            if (!candidate[current2]) {
                                                continue;
                                            }
                                            if (isProperty(nodeType, candidates[current])) {
                                                element = new Element(candidate[current2], [
                                                    key,
                                                    current2
                                                ], 'Property', null);
                                            } else if (isNode(candidate[current2])) {
                                                element = new Element(candidate[current2], [
                                                    key,
                                                    current2
                                                ], null, null);
                                            } else {
                                                continue;
                                            }
                                            worklist.push(element);
                                        }
                                    } else if (isNode(candidate)) {
                                        worklist.push(new Element(candidate, key, null, null));
                                    }
                                }
                            }
                        }
                    };
                    Controller.prototype.replace = function replace(root, visitor) {
                        var worklist, leavelist, node, nodeType, target, element, current, current2, candidates, candidate, sentinel, outer, key;
                        function removeElem(element) {
                            var i, key, nextElem, parent;
                            if (element.ref.remove()) {
                                key = element.ref.key;
                                parent = element.ref.parent;
                                i = worklist.length;
                                while (i--) {
                                    nextElem = worklist[i];
                                    if (nextElem.ref && nextElem.ref.parent === parent) {
                                        if (nextElem.ref.key < key) {
                                            break;
                                        }
                                        --nextElem.ref.key;
                                    }
                                }
                            }
                        }
                        this.__initialize(root, visitor);
                        sentinel = {};
                        worklist = this.__worklist;
                        leavelist = this.__leavelist;
                        outer = { root: root };
                        element = new Element(root, null, null, new Reference(outer, 'root'));
                        worklist.push(element);
                        leavelist.push(element);
                        while (worklist.length) {
                            element = worklist.pop();
                            if (element === sentinel) {
                                element = leavelist.pop();
                                target = this.__execute(visitor.leave, element);
                                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                                    element.ref.replace(target);
                                }
                                if (this.__state === REMOVE || target === REMOVE) {
                                    removeElem(element);
                                }
                                if (this.__state === BREAK || target === BREAK) {
                                    return outer.root;
                                }
                                continue;
                            }
                            target = this.__execute(visitor.enter, element);
                            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                                element.ref.replace(target);
                                element.node = target;
                            }
                            if (this.__state === REMOVE || target === REMOVE) {
                                removeElem(element);
                                element.node = null;
                            }
                            if (this.__state === BREAK || target === BREAK) {
                                return outer.root;
                            }
                            node = element.node;
                            if (!node) {
                                continue;
                            }
                            worklist.push(sentinel);
                            leavelist.push(element);
                            if (this.__state === SKIP || target === SKIP) {
                                continue;
                            }
                            nodeType = node.type || element.wrap;
                            candidates = this.__keys[nodeType];
                            if (!candidates) {
                                if (this.__fallback) {
                                    candidates = this.__fallback(node);
                                } else {
                                    throw new Error('Unknown node type ' + nodeType + '.');
                                }
                            }
                            current = candidates.length;
                            while ((current -= 1) >= 0) {
                                key = candidates[current];
                                candidate = node[key];
                                if (!candidate) {
                                    continue;
                                }
                                if (isArray(candidate)) {
                                    current2 = candidate.length;
                                    while ((current2 -= 1) >= 0) {
                                        if (!candidate[current2]) {
                                            continue;
                                        }
                                        if (isProperty(nodeType, candidates[current])) {
                                            element = new Element(candidate[current2], [
                                                key,
                                                current2
                                            ], 'Property', new Reference(candidate, current2));
                                        } else if (isNode(candidate[current2])) {
                                            element = new Element(candidate[current2], [
                                                key,
                                                current2
                                            ], null, new Reference(candidate, current2));
                                        } else {
                                            continue;
                                        }
                                        worklist.push(element);
                                    }
                                } else if (isNode(candidate)) {
                                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));
                                }
                            }
                        }
                        return outer.root;
                    };
                    function traverse(root, visitor) {
                        var controller = new Controller();
                        return controller.traverse(root, visitor);
                    }
                    function replace(root, visitor) {
                        var controller = new Controller();
                        return controller.replace(root, visitor);
                    }
                    function extendCommentRange(comment, tokens) {
                        var target;
                        target = upperBound(tokens, function search(token) {
                            return token.range[0] > comment.range[0];
                        });
                        comment.extendedRange = [
                            comment.range[0],
                            comment.range[1]
                        ];
                        if (target !== tokens.length) {
                            comment.extendedRange[1] = tokens[target].range[0];
                        }
                        target -= 1;
                        if (target >= 0) {
                            comment.extendedRange[0] = tokens[target].range[1];
                        }
                        return comment;
                    }
                    function attachComments(tree, providedComments, tokens) {
                        var comments = [], comment, len, i, cursor;
                        if (!tree.range) {
                            throw new Error('attachComments needs range information');
                        }
                        if (!tokens.length) {
                            if (providedComments.length) {
                                for (i = 0, len = providedComments.length; i < len; i += 1) {
                                    comment = deepCopy(providedComments[i]);
                                    comment.extendedRange = [
                                        0,
                                        tree.range[0]
                                    ];
                                    comments.push(comment);
                                }
                                tree.leadingComments = comments;
                            }
                            return tree;
                        }
                        for (i = 0, len = providedComments.length; i < len; i += 1) {
                            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));
                        }
                        cursor = 0;
                        traverse(tree, {
                            enter: function (node) {
                                var comment;
                                while (cursor < comments.length) {
                                    comment = comments[cursor];
                                    if (comment.extendedRange[1] > node.range[0]) {
                                        break;
                                    }
                                    if (comment.extendedRange[1] === node.range[0]) {
                                        if (!node.leadingComments) {
                                            node.leadingComments = [];
                                        }
                                        node.leadingComments.push(comment);
                                        comments.splice(cursor, 1);
                                    } else {
                                        cursor += 1;
                                    }
                                }
                                if (cursor === comments.length) {
                                    return VisitorOption.Break;
                                }
                                if (comments[cursor].extendedRange[0] > node.range[1]) {
                                    return VisitorOption.Skip;
                                }
                            }
                        });
                        cursor = 0;
                        traverse(tree, {
                            leave: function (node) {
                                var comment;
                                while (cursor < comments.length) {
                                    comment = comments[cursor];
                                    if (node.range[1] < comment.extendedRange[0]) {
                                        break;
                                    }
                                    if (node.range[1] === comment.extendedRange[0]) {
                                        if (!node.trailingComments) {
                                            node.trailingComments = [];
                                        }
                                        node.trailingComments.push(comment);
                                        comments.splice(cursor, 1);
                                    } else {
                                        cursor += 1;
                                    }
                                }
                                if (cursor === comments.length) {
                                    return VisitorOption.Break;
                                }
                                if (comments[cursor].extendedRange[0] > node.range[1]) {
                                    return VisitorOption.Skip;
                                }
                            }
                        });
                        return tree;
                    }
                    exports.version = require('./package.json').version;
                    exports.Syntax = Syntax;
                    exports.traverse = traverse;
                    exports.replace = replace;
                    exports.attachComments = attachComments;
                    exports.VisitorKeys = VisitorKeys;
                    exports.VisitorOption = VisitorOption;
                    exports.Controller = Controller;
                    exports.cloneEnvironment = function () {
                        return clone({});
                    };
                    return exports;
                }(exports));
            },
            { './package.json': 41 }
        ],
        41: [
            function (require, module, exports) {
                module.exports = {
                    '_from': 'estraverse@^4.2.0',
                    '_id': 'estraverse@4.2.0',
                    '_inBundle': false,
                    '_integrity': 'sha1-De4/7TH81GlhjOc0IJn8GvoL2xM=',
                    '_location': '/estraverse',
                    '_phantomChildren': {},
                    '_requested': {
                        'type': 'range',
                        'registry': true,
                        'raw': 'estraverse@^4.2.0',
                        'name': 'estraverse',
                        'escapedName': 'estraverse',
                        'rawSpec': '^4.2.0',
                        'saveSpec': null,
                        'fetchSpec': '^4.2.0'
                    },
                    '_requiredBy': [
                        '/escodegen',
                        '/polymer-analyzer'
                    ],
                    '_resolved': 'https://registry.npmjs.org/estraverse/-/estraverse-4.2.0.tgz',
                    '_shasum': '0dee3fed31fcd469618ce7342099fc1afa0bdb13',
                    '_spec': 'estraverse@^4.2.0',
                    '_where': '/home/fedora/WebComponents/components/thin-hook/node_modules/escodegen',
                    'bugs': { 'url': 'https://github.com/estools/estraverse/issues' },
                    'bundleDependencies': false,
                    'deprecated': false,
                    'description': 'ECMAScript JS AST traversal functions',
                    'devDependencies': {
                        'babel-preset-es2015': '^6.3.13',
                        'babel-register': '^6.3.13',
                        'chai': '^2.1.1',
                        'espree': '^1.11.0',
                        'gulp': '^3.8.10',
                        'gulp-bump': '^0.2.2',
                        'gulp-filter': '^2.0.0',
                        'gulp-git': '^1.0.1',
                        'gulp-tag-version': '^1.2.1',
                        'jshint': '^2.5.6',
                        'mocha': '^2.1.0'
                    },
                    'engines': { 'node': '>=0.10.0' },
                    'homepage': 'https://github.com/estools/estraverse',
                    'license': 'BSD-2-Clause',
                    'main': 'estraverse.js',
                    'maintainers': [{
                            'name': 'Yusuke Suzuki',
                            'email': 'utatane.tea@gmail.com',
                            'url': 'http://github.com/Constellation'
                        }],
                    'name': 'estraverse',
                    'repository': {
                        'type': 'git',
                        'url': 'git+ssh://git@github.com/estools/estraverse.git'
                    },
                    'scripts': {
                        'lint': 'jshint estraverse.js',
                        'test': 'npm run-script lint && npm run-script unit-test',
                        'unit-test': 'mocha --compilers js:babel-register'
                    },
                    'version': '4.2.0'
                };
            },
            {}
        ],
        42: [
            function (require, module, exports) {
                (function () {
                    'use strict';
                    function isExpression(node) {
                        if (node == null) {
                            return false;
                        }
                        switch (node.type) {
                        case 'ArrayExpression':
                        case 'AssignmentExpression':
                        case 'BinaryExpression':
                        case 'CallExpression':
                        case 'ConditionalExpression':
                        case 'FunctionExpression':
                        case 'Identifier':
                        case 'Literal':
                        case 'LogicalExpression':
                        case 'MemberExpression':
                        case 'NewExpression':
                        case 'ObjectExpression':
                        case 'SequenceExpression':
                        case 'ThisExpression':
                        case 'UnaryExpression':
                        case 'UpdateExpression':
                            return true;
                        }
                        return false;
                    }
                    function isIterationStatement(node) {
                        if (node == null) {
                            return false;
                        }
                        switch (node.type) {
                        case 'DoWhileStatement':
                        case 'ForInStatement':
                        case 'ForStatement':
                        case 'WhileStatement':
                            return true;
                        }
                        return false;
                    }
                    function isStatement(node) {
                        if (node == null) {
                            return false;
                        }
                        switch (node.type) {
                        case 'BlockStatement':
                        case 'BreakStatement':
                        case 'ContinueStatement':
                        case 'DebuggerStatement':
                        case 'DoWhileStatement':
                        case 'EmptyStatement':
                        case 'ExpressionStatement':
                        case 'ForInStatement':
                        case 'ForStatement':
                        case 'IfStatement':
                        case 'LabeledStatement':
                        case 'ReturnStatement':
                        case 'SwitchStatement':
                        case 'ThrowStatement':
                        case 'TryStatement':
                        case 'VariableDeclaration':
                        case 'WhileStatement':
                        case 'WithStatement':
                            return true;
                        }
                        return false;
                    }
                    function isSourceElement(node) {
                        return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
                    }
                    function trailingStatement(node) {
                        switch (node.type) {
                        case 'IfStatement':
                            if (node.alternate != null) {
                                return node.alternate;
                            }
                            return node.consequent;
                        case 'LabeledStatement':
                        case 'ForStatement':
                        case 'ForInStatement':
                        case 'WhileStatement':
                        case 'WithStatement':
                            return node.body;
                        }
                        return null;
                    }
                    function isProblematicIfStatement(node) {
                        var current;
                        if (node.type !== 'IfStatement') {
                            return false;
                        }
                        if (node.alternate == null) {
                            return false;
                        }
                        current = node.consequent;
                        do {
                            if (current.type === 'IfStatement') {
                                if (current.alternate == null) {
                                    return true;
                                }
                            }
                            current = trailingStatement(current);
                        } while (current);
                        return false;
                    }
                    module.exports = {
                        isExpression: isExpression,
                        isStatement: isStatement,
                        isIterationStatement: isIterationStatement,
                        isSourceElement: isSourceElement,
                        isProblematicIfStatement: isProblematicIfStatement,
                        trailingStatement: trailingStatement
                    };
                }());
            },
            {}
        ],
        43: [
            function (require, module, exports) {
                (function () {
                    'use strict';
                    var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;
                    ES5Regex = {
                        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
                        NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
                    };
                    ES6Regex = {
                        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,
                        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
                    };
                    function isDecimalDigit(ch) {
                        return 48 <= ch && ch <= 57;
                    }
                    function isHexDigit(ch) {
                        return 48 <= ch && ch <= 57 || 97 <= ch && ch <= 102 || 65 <= ch && ch <= 70;
                    }
                    function isOctalDigit(ch) {
                        return ch >= 48 && ch <= 55;
                    }
                    NON_ASCII_WHITESPACES = [
                        5760,
                        6158,
                        8192,
                        8193,
                        8194,
                        8195,
                        8196,
                        8197,
                        8198,
                        8199,
                        8200,
                        8201,
                        8202,
                        8239,
                        8287,
                        12288,
                        65279
                    ];
                    function isWhiteSpace(ch) {
                        return ch === 32 || ch === 9 || ch === 11 || ch === 12 || ch === 160 || ch >= 5760 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
                    }
                    function isLineTerminator(ch) {
                        return ch === 10 || ch === 13 || ch === 8232 || ch === 8233;
                    }
                    function fromCodePoint(cp) {
                        if (cp <= 65535) {
                            return String.fromCharCode(cp);
                        }
                        var cu1 = String.fromCharCode(Math.floor((cp - 65536) / 1024) + 55296);
                        var cu2 = String.fromCharCode((cp - 65536) % 1024 + 56320);
                        return cu1 + cu2;
                    }
                    IDENTIFIER_START = new Array(128);
                    for (ch = 0; ch < 128; ++ch) {
                        IDENTIFIER_START[ch] = ch >= 97 && ch <= 122 || ch >= 65 && ch <= 90 || ch === 36 || ch === 95;
                    }
                    IDENTIFIER_PART = new Array(128);
                    for (ch = 0; ch < 128; ++ch) {
                        IDENTIFIER_PART[ch] = ch >= 97 && ch <= 122 || ch >= 65 && ch <= 90 || ch >= 48 && ch <= 57 || ch === 36 || ch === 95;
                    }
                    function isIdentifierStartES5(ch) {
                        return ch < 128 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
                    }
                    function isIdentifierPartES5(ch) {
                        return ch < 128 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
                    }
                    function isIdentifierStartES6(ch) {
                        return ch < 128 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
                    }
                    function isIdentifierPartES6(ch) {
                        return ch < 128 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
                    }
                    module.exports = {
                        isDecimalDigit: isDecimalDigit,
                        isHexDigit: isHexDigit,
                        isOctalDigit: isOctalDigit,
                        isWhiteSpace: isWhiteSpace,
                        isLineTerminator: isLineTerminator,
                        isIdentifierStartES5: isIdentifierStartES5,
                        isIdentifierPartES5: isIdentifierPartES5,
                        isIdentifierStartES6: isIdentifierStartES6,
                        isIdentifierPartES6: isIdentifierPartES6
                    };
                }());
            },
            {}
        ],
        44: [
            function (require, module, exports) {
                (function () {
                    'use strict';
                    var code = require('./code');
                    function isStrictModeReservedWordES6(id) {
                        switch (id) {
                        case 'implements':
                        case 'interface':
                        case 'package':
                        case 'private':
                        case 'protected':
                        case 'public':
                        case 'static':
                        case 'let':
                            return true;
                        default:
                            return false;
                        }
                    }
                    function isKeywordES5(id, strict) {
                        if (!strict && id === 'yield') {
                            return false;
                        }
                        return isKeywordES6(id, strict);
                    }
                    function isKeywordES6(id, strict) {
                        if (strict && isStrictModeReservedWordES6(id)) {
                            return true;
                        }
                        switch (id.length) {
                        case 2:
                            return id === 'if' || id === 'in' || id === 'do';
                        case 3:
                            return id === 'var' || id === 'for' || id === 'new' || id === 'try';
                        case 4:
                            return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';
                        case 5:
                            return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';
                        case 6:
                            return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';
                        case 7:
                            return id === 'default' || id === 'finally' || id === 'extends';
                        case 8:
                            return id === 'function' || id === 'continue' || id === 'debugger';
                        case 10:
                            return id === 'instanceof';
                        default:
                            return false;
                        }
                    }
                    function isReservedWordES5(id, strict) {
                        return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
                    }
                    function isReservedWordES6(id, strict) {
                        return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
                    }
                    function isRestrictedWord(id) {
                        return id === 'eval' || id === 'arguments';
                    }
                    function isIdentifierNameES5(id) {
                        var i, iz, ch;
                        if (id.length === 0) {
                            return false;
                        }
                        ch = id.charCodeAt(0);
                        if (!code.isIdentifierStartES5(ch)) {
                            return false;
                        }
                        for (i = 1, iz = id.length; i < iz; ++i) {
                            ch = id.charCodeAt(i);
                            if (!code.isIdentifierPartES5(ch)) {
                                return false;
                            }
                        }
                        return true;
                    }
                    function decodeUtf16(lead, trail) {
                        return (lead - 55296) * 1024 + (trail - 56320) + 65536;
                    }
                    function isIdentifierNameES6(id) {
                        var i, iz, ch, lowCh, check;
                        if (id.length === 0) {
                            return false;
                        }
                        check = code.isIdentifierStartES6;
                        for (i = 0, iz = id.length; i < iz; ++i) {
                            ch = id.charCodeAt(i);
                            if (55296 <= ch && ch <= 56319) {
                                ++i;
                                if (i >= iz) {
                                    return false;
                                }
                                lowCh = id.charCodeAt(i);
                                if (!(56320 <= lowCh && lowCh <= 57343)) {
                                    return false;
                                }
                                ch = decodeUtf16(ch, lowCh);
                            }
                            if (!check(ch)) {
                                return false;
                            }
                            check = code.isIdentifierPartES6;
                        }
                        return true;
                    }
                    function isIdentifierES5(id, strict) {
                        return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
                    }
                    function isIdentifierES6(id, strict) {
                        return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
                    }
                    module.exports = {
                        isKeywordES5: isKeywordES5,
                        isKeywordES6: isKeywordES6,
                        isReservedWordES5: isReservedWordES5,
                        isReservedWordES6: isReservedWordES6,
                        isRestrictedWord: isRestrictedWord,
                        isIdentifierNameES5: isIdentifierNameES5,
                        isIdentifierNameES6: isIdentifierNameES6,
                        isIdentifierES5: isIdentifierES5,
                        isIdentifierES6: isIdentifierES6
                    };
                }());
            },
            { './code': 43 }
        ],
        45: [
            function (require, module, exports) {
                (function () {
                    'use strict';
                    exports.ast = require('./ast');
                    exports.code = require('./code');
                    exports.keyword = require('./keyword');
                }());
            },
            {
                './ast': 42,
                './code': 43,
                './keyword': 44
            }
        ],
        46: [
            function (require, module, exports) {
                function EventEmitter() {
                    this._events = this._events || {};
                    this._maxListeners = this._maxListeners || undefined;
                }
                module.exports = EventEmitter;
                EventEmitter.EventEmitter = EventEmitter;
                EventEmitter.prototype._events = undefined;
                EventEmitter.prototype._maxListeners = undefined;
                EventEmitter.defaultMaxListeners = 10;
                EventEmitter.prototype.setMaxListeners = function (n) {
                    if (!isNumber(n) || n < 0 || isNaN(n))
                        throw TypeError('n must be a positive number');
                    this._maxListeners = n;
                    return this;
                };
                EventEmitter.prototype.emit = function (type) {
                    var er, handler, len, args, i, listeners;
                    if (!this._events)
                        this._events = {};
                    if (type === 'error') {
                        if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
                            er = arguments[1];
                            if (er instanceof Error) {
                                throw er;
                            } else {
                                var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
                                err.context = er;
                                throw err;
                            }
                        }
                    }
                    handler = this._events[type];
                    if (isUndefined(handler))
                        return false;
                    if (isFunction(handler)) {
                        switch (arguments.length) {
                        case 1:
                            handler.call(this);
                            break;
                        case 2:
                            handler.call(this, arguments[1]);
                            break;
                        case 3:
                            handler.call(this, arguments[1], arguments[2]);
                            break;
                        default:
                            args = Array.prototype.slice.call(arguments, 1);
                            handler.apply(this, args);
                        }
                    } else if (isObject(handler)) {
                        args = Array.prototype.slice.call(arguments, 1);
                        listeners = handler.slice();
                        len = listeners.length;
                        for (i = 0; i < len; i++)
                            listeners[i].apply(this, args);
                    }
                    return true;
                };
                EventEmitter.prototype.addListener = function (type, listener) {
                    var m;
                    if (!isFunction(listener))
                        throw TypeError('listener must be a function');
                    if (!this._events)
                        this._events = {};
                    if (this._events.newListener)
                        this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);
                    if (!this._events[type])
                        this._events[type] = listener;
                    else if (isObject(this._events[type]))
                        this._events[type].push(listener);
                    else
                        this._events[type] = [
                            this._events[type],
                            listener
                        ];
                    if (isObject(this._events[type]) && !this._events[type].warned) {
                        if (!isUndefined(this._maxListeners)) {
                            m = this._maxListeners;
                        } else {
                            m = EventEmitter.defaultMaxListeners;
                        }
                        if (m && m > 0 && this._events[type].length > m) {
                            this._events[type].warned = true;
                            console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
                            if (typeof console.trace === 'function') {
                                console.trace();
                            }
                        }
                    }
                    return this;
                };
                EventEmitter.prototype.on = EventEmitter.prototype.addListener;
                EventEmitter.prototype.once = function (type, listener) {
                    if (!isFunction(listener))
                        throw TypeError('listener must be a function');
                    var fired = false;
                    function g() {
                        this.removeListener(type, g);
                        if (!fired) {
                            fired = true;
                            listener.apply(this, arguments);
                        }
                    }
                    g.listener = listener;
                    this.on(type, g);
                    return this;
                };
                EventEmitter.prototype.removeListener = function (type, listener) {
                    var list, position, length, i;
                    if (!isFunction(listener))
                        throw TypeError('listener must be a function');
                    if (!this._events || !this._events[type])
                        return this;
                    list = this._events[type];
                    length = list.length;
                    position = -1;
                    if (list === listener || isFunction(list.listener) && list.listener === listener) {
                        delete this._events[type];
                        if (this._events.removeListener)
                            this.emit('removeListener', type, listener);
                    } else if (isObject(list)) {
                        for (i = length; i-- > 0;) {
                            if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                                position = i;
                                break;
                            }
                        }
                        if (position < 0)
                            return this;
                        if (list.length === 1) {
                            list.length = 0;
                            delete this._events[type];
                        } else {
                            list.splice(position, 1);
                        }
                        if (this._events.removeListener)
                            this.emit('removeListener', type, listener);
                    }
                    return this;
                };
                EventEmitter.prototype.removeAllListeners = function (type) {
                    var key, listeners;
                    if (!this._events)
                        return this;
                    if (!this._events.removeListener) {
                        if (arguments.length === 0)
                            this._events = {};
                        else if (this._events[type])
                            delete this._events[type];
                        return this;
                    }
                    if (arguments.length === 0) {
                        for (key in this._events) {
                            if (key === 'removeListener')
                                continue;
                            this.removeAllListeners(key);
                        }
                        this.removeAllListeners('removeListener');
                        this._events = {};
                        return this;
                    }
                    listeners = this._events[type];
                    if (isFunction(listeners)) {
                        this.removeListener(type, listeners);
                    } else if (listeners) {
                        while (listeners.length)
                            this.removeListener(type, listeners[listeners.length - 1]);
                    }
                    delete this._events[type];
                    return this;
                };
                EventEmitter.prototype.listeners = function (type) {
                    var ret;
                    if (!this._events || !this._events[type])
                        ret = [];
                    else if (isFunction(this._events[type]))
                        ret = [this._events[type]];
                    else
                        ret = this._events[type].slice();
                    return ret;
                };
                EventEmitter.prototype.listenerCount = function (type) {
                    if (this._events) {
                        var evlistener = this._events[type];
                        if (isFunction(evlistener))
                            return 1;
                        else if (evlistener)
                            return evlistener.length;
                    }
                    return 0;
                };
                EventEmitter.listenerCount = function (emitter, type) {
                    return emitter.listenerCount(type);
                };
                function isFunction(arg) {
                    return typeof arg === 'function';
                }
                function isNumber(arg) {
                    return typeof arg === 'number';
                }
                function isObject(arg) {
                    return typeof arg === 'object' && arg !== null;
                }
                function isUndefined(arg) {
                    return arg === void 0;
                }
            },
            {}
        ],
        47: [
            function (require, module, exports) {
                module.exports = CollectingHandler;
                function CollectingHandler(cbs) {
                    this._cbs = cbs || {};
                    this.events = [];
                }
                var EVENTS = require('./').EVENTS;
                Object.keys(EVENTS).forEach(function (name) {
                    if (EVENTS[name] === 0) {
                        name = 'on' + name;
                        CollectingHandler.prototype[name] = function () {
                            this.events.push([name]);
                            if (this._cbs[name])
                                this._cbs[name]();
                        };
                    } else if (EVENTS[name] === 1) {
                        name = 'on' + name;
                        CollectingHandler.prototype[name] = function (a) {
                            this.events.push([
                                name,
                                a
                            ]);
                            if (this._cbs[name])
                                this._cbs[name](a);
                        };
                    } else if (EVENTS[name] === 2) {
                        name = 'on' + name;
                        CollectingHandler.prototype[name] = function (a, b) {
                            this.events.push([
                                name,
                                a,
                                b
                            ]);
                            if (this._cbs[name])
                                this._cbs[name](a, b);
                        };
                    } else {
                        throw Error('wrong number of arguments');
                    }
                });
                CollectingHandler.prototype.onreset = function () {
                    this.events = [];
                    if (this._cbs.onreset)
                        this._cbs.onreset();
                };
                CollectingHandler.prototype.restart = function () {
                    if (this._cbs.onreset)
                        this._cbs.onreset();
                    for (var i = 0, len = this.events.length; i < len; i++) {
                        if (this._cbs[this.events[i][0]]) {
                            var num = this.events[i].length;
                            if (num === 1) {
                                this._cbs[this.events[i][0]]();
                            } else if (num === 2) {
                                this._cbs[this.events[i][0]](this.events[i][1]);
                            } else {
                                this._cbs[this.events[i][0]](this.events[i][1], this.events[i][2]);
                            }
                        }
                    }
                };
            },
            { './': 54 }
        ],
        48: [
            function (require, module, exports) {
                var index = require('./index.js'), DomHandler = index.DomHandler, DomUtils = index.DomUtils;
                function FeedHandler(callback, options) {
                    this.init(callback, options);
                }
                require('inherits')(FeedHandler, DomHandler);
                FeedHandler.prototype.init = DomHandler;
                function getElements(what, where) {
                    return DomUtils.getElementsByTagName(what, where, true);
                }
                function getOneElement(what, where) {
                    return DomUtils.getElementsByTagName(what, where, true, 1)[0];
                }
                function fetch(what, where, recurse) {
                    return DomUtils.getText(DomUtils.getElementsByTagName(what, where, recurse, 1)).trim();
                }
                function addConditionally(obj, prop, what, where, recurse) {
                    var tmp = fetch(what, where, recurse);
                    if (tmp)
                        obj[prop] = tmp;
                }
                var isValidFeed = function (value) {
                    return value === 'rss' || value === 'feed' || value === 'rdf:RDF';
                };
                FeedHandler.prototype.onend = function () {
                    var feed = {}, feedRoot = getOneElement(isValidFeed, this.dom), tmp, childs;
                    if (feedRoot) {
                        if (feedRoot.name === 'feed') {
                            childs = feedRoot.children;
                            feed.type = 'atom';
                            addConditionally(feed, 'id', 'id', childs);
                            addConditionally(feed, 'title', 'title', childs);
                            if ((tmp = getOneElement('link', childs)) && (tmp = tmp.attribs) && (tmp = tmp.href))
                                feed.link = tmp;
                            addConditionally(feed, 'description', 'subtitle', childs);
                            if (tmp = fetch('updated', childs))
                                feed.updated = new Date(tmp);
                            addConditionally(feed, 'author', 'email', childs, true);
                            feed.items = getElements('entry', childs).map(function (item) {
                                var entry = {}, tmp;
                                item = item.children;
                                addConditionally(entry, 'id', 'id', item);
                                addConditionally(entry, 'title', 'title', item);
                                if ((tmp = getOneElement('link', item)) && (tmp = tmp.attribs) && (tmp = tmp.href))
                                    entry.link = tmp;
                                if (tmp = fetch('summary', item) || fetch('content', item))
                                    entry.description = tmp;
                                if (tmp = fetch('updated', item))
                                    entry.pubDate = new Date(tmp);
                                return entry;
                            });
                        } else {
                            childs = getOneElement('channel', feedRoot.children).children;
                            feed.type = feedRoot.name.substr(0, 3);
                            feed.id = '';
                            addConditionally(feed, 'title', 'title', childs);
                            addConditionally(feed, 'link', 'link', childs);
                            addConditionally(feed, 'description', 'description', childs);
                            if (tmp = fetch('lastBuildDate', childs))
                                feed.updated = new Date(tmp);
                            addConditionally(feed, 'author', 'managingEditor', childs, true);
                            feed.items = getElements('item', feedRoot.children).map(function (item) {
                                var entry = {}, tmp;
                                item = item.children;
                                addConditionally(entry, 'id', 'guid', item);
                                addConditionally(entry, 'title', 'title', item);
                                addConditionally(entry, 'link', 'link', item);
                                addConditionally(entry, 'description', 'description', item);
                                if (tmp = fetch('pubDate', item))
                                    entry.pubDate = new Date(tmp);
                                return entry;
                            });
                        }
                    }
                    this.dom = feed;
                    DomHandler.prototype._handleCallback.call(this, feedRoot ? null : Error('couldn\'t find root of feed'));
                };
                module.exports = FeedHandler;
            },
            {
                './index.js': 54,
                'inherits': 56
            }
        ],
        49: [
            function (require, module, exports) {
                var Tokenizer = require('./Tokenizer.js');
                var formTags = {
                    input: true,
                    option: true,
                    optgroup: true,
                    select: true,
                    button: true,
                    datalist: true,
                    textarea: true
                };
                var openImpliesClose = {
                    tr: {
                        tr: true,
                        th: true,
                        td: true
                    },
                    th: { th: true },
                    td: {
                        thead: true,
                        th: true,
                        td: true
                    },
                    body: {
                        head: true,
                        link: true,
                        script: true
                    },
                    li: { li: true },
                    p: { p: true },
                    h1: { p: true },
                    h2: { p: true },
                    h3: { p: true },
                    h4: { p: true },
                    h5: { p: true },
                    h6: { p: true },
                    select: formTags,
                    input: formTags,
                    output: formTags,
                    button: formTags,
                    datalist: formTags,
                    textarea: formTags,
                    option: { option: true },
                    optgroup: { optgroup: true }
                };
                var voidElements = {
                    __proto__: null,
                    area: true,
                    base: true,
                    basefont: true,
                    br: true,
                    col: true,
                    command: true,
                    embed: true,
                    frame: true,
                    hr: true,
                    img: true,
                    input: true,
                    isindex: true,
                    keygen: true,
                    link: true,
                    meta: true,
                    param: true,
                    source: true,
                    track: true,
                    wbr: true,
                    path: true,
                    circle: true,
                    ellipse: true,
                    line: true,
                    rect: true,
                    use: true,
                    stop: true,
                    polyline: true,
                    polygon: true
                };
                var re_nameEnd = /\s|\//;
                function Parser(cbs, options) {
                    this._options = options || {};
                    this._cbs = cbs || {};
                    this._tagname = '';
                    this._attribname = '';
                    this._attribvalue = '';
                    this._attribs = null;
                    this._stack = [];
                    this.startIndex = 0;
                    this.endIndex = null;
                    this._lowerCaseTagNames = 'lowerCaseTags' in this._options ? !!this._options.lowerCaseTags : !this._options.xmlMode;
                    this._lowerCaseAttributeNames = 'lowerCaseAttributeNames' in this._options ? !!this._options.lowerCaseAttributeNames : !this._options.xmlMode;
                    if (this._options.Tokenizer) {
                        Tokenizer = this._options.Tokenizer;
                    }
                    this._tokenizer = new Tokenizer(this._options, this);
                    if (this._cbs.onparserinit)
                        this._cbs.onparserinit(this);
                }
                require('inherits')(Parser, require('events').EventEmitter);
                Parser.prototype._updatePosition = function (initialOffset) {
                    if (this.endIndex === null) {
                        if (this._tokenizer._sectionStart <= initialOffset) {
                            this.startIndex = 0;
                        } else {
                            this.startIndex = this._tokenizer._sectionStart - initialOffset;
                        }
                    } else
                        this.startIndex = this.endIndex + 1;
                    this.endIndex = this._tokenizer.getAbsoluteIndex();
                };
                Parser.prototype.ontext = function (data) {
                    this._updatePosition(1);
                    this.endIndex--;
                    if (this._cbs.ontext)
                        this._cbs.ontext(data);
                };
                Parser.prototype.onopentagname = function (name) {
                    if (this._lowerCaseTagNames) {
                        name = name.toLowerCase();
                    }
                    this._tagname = name;
                    if (!this._options.xmlMode && name in openImpliesClose) {
                        for (var el; (el = this._stack[this._stack.length - 1]) in openImpliesClose[name]; this.onclosetag(el));
                    }
                    if (this._options.xmlMode || !(name in voidElements)) {
                        this._stack.push(name);
                    }
                    if (this._cbs.onopentagname)
                        this._cbs.onopentagname(name);
                    if (this._cbs.onopentag)
                        this._attribs = {};
                };
                Parser.prototype.onopentagend = function () {
                    this._updatePosition(1);
                    if (this._attribs) {
                        if (this._cbs.onopentag)
                            this._cbs.onopentag(this._tagname, this._attribs);
                        this._attribs = null;
                    }
                    if (!this._options.xmlMode && this._cbs.onclosetag && this._tagname in voidElements) {
                        this._cbs.onclosetag(this._tagname);
                    }
                    this._tagname = '';
                };
                Parser.prototype.onclosetag = function (name) {
                    this._updatePosition(1);
                    if (this._lowerCaseTagNames) {
                        name = name.toLowerCase();
                    }
                    if (this._stack.length && (!(name in voidElements) || this._options.xmlMode)) {
                        var pos = this._stack.lastIndexOf(name);
                        if (pos !== -1) {
                            if (this._cbs.onclosetag) {
                                pos = this._stack.length - pos;
                                while (pos--)
                                    this._cbs.onclosetag(this._stack.pop());
                            } else
                                this._stack.length = pos;
                        } else if (name === 'p' && !this._options.xmlMode) {
                            this.onopentagname(name);
                            this._closeCurrentTag();
                        }
                    } else if (!this._options.xmlMode && (name === 'br' || name === 'p')) {
                        this.onopentagname(name);
                        this._closeCurrentTag();
                    }
                };
                Parser.prototype.onselfclosingtag = function () {
                    if (this._options.xmlMode || this._options.recognizeSelfClosing) {
                        this._closeCurrentTag();
                    } else {
                        this.onopentagend();
                    }
                };
                Parser.prototype._closeCurrentTag = function () {
                    var name = this._tagname;
                    this.onopentagend();
                    if (this._stack[this._stack.length - 1] === name) {
                        if (this._cbs.onclosetag) {
                            this._cbs.onclosetag(name);
                        }
                        this._stack.pop();
                    }
                };
                Parser.prototype.onattribname = function (name) {
                    if (this._lowerCaseAttributeNames) {
                        name = name.toLowerCase();
                    }
                    this._attribname = name;
                };
                Parser.prototype.onattribdata = function (value) {
                    this._attribvalue += value;
                };
                Parser.prototype.onattribend = function () {
                    if (this._cbs.onattribute)
                        this._cbs.onattribute(this._attribname, this._attribvalue);
                    if (this._attribs && !Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)) {
                        this._attribs[this._attribname] = this._attribvalue;
                    }
                    this._attribname = '';
                    this._attribvalue = '';
                };
                Parser.prototype._getInstructionName = function (value) {
                    var idx = value.search(re_nameEnd), name = idx < 0 ? value : value.substr(0, idx);
                    if (this._lowerCaseTagNames) {
                        name = name.toLowerCase();
                    }
                    return name;
                };
                Parser.prototype.ondeclaration = function (value) {
                    if (this._cbs.onprocessinginstruction) {
                        var name = this._getInstructionName(value);
                        this._cbs.onprocessinginstruction('!' + name, '!' + value);
                    }
                };
                Parser.prototype.onprocessinginstruction = function (value) {
                    if (this._cbs.onprocessinginstruction) {
                        var name = this._getInstructionName(value);
                        this._cbs.onprocessinginstruction('?' + name, '?' + value);
                    }
                };
                Parser.prototype.oncomment = function (value) {
                    this._updatePosition(4);
                    if (this._cbs.oncomment)
                        this._cbs.oncomment(value);
                    if (this._cbs.oncommentend)
                        this._cbs.oncommentend();
                };
                Parser.prototype.oncdata = function (value) {
                    this._updatePosition(1);
                    if (this._options.xmlMode || this._options.recognizeCDATA) {
                        if (this._cbs.oncdatastart)
                            this._cbs.oncdatastart();
                        if (this._cbs.ontext)
                            this._cbs.ontext(value);
                        if (this._cbs.oncdataend)
                            this._cbs.oncdataend();
                    } else {
                        this.oncomment('[CDATA[' + value + ']]');
                    }
                };
                Parser.prototype.onerror = function (err) {
                    if (this._cbs.onerror)
                        this._cbs.onerror(err);
                };
                Parser.prototype.onend = function () {
                    if (this._cbs.onclosetag) {
                        for (var i = this._stack.length; i > 0; this._cbs.onclosetag(this._stack[--i]));
                    }
                    if (this._cbs.onend)
                        this._cbs.onend();
                };
                Parser.prototype.reset = function () {
                    if (this._cbs.onreset)
                        this._cbs.onreset();
                    this._tokenizer.reset();
                    this._tagname = '';
                    this._attribname = '';
                    this._attribs = null;
                    this._stack = [];
                    if (this._cbs.onparserinit)
                        this._cbs.onparserinit(this);
                };
                Parser.prototype.parseComplete = function (data) {
                    this.reset();
                    this.end(data);
                };
                Parser.prototype.write = function (chunk) {
                    this._tokenizer.write(chunk);
                };
                Parser.prototype.end = function (chunk) {
                    this._tokenizer.end(chunk);
                };
                Parser.prototype.pause = function () {
                    this._tokenizer.pause();
                };
                Parser.prototype.resume = function () {
                    this._tokenizer.resume();
                };
                Parser.prototype.parseChunk = Parser.prototype.write;
                Parser.prototype.done = Parser.prototype.end;
                module.exports = Parser;
            },
            {
                './Tokenizer.js': 52,
                'events': 46,
                'inherits': 56
            }
        ],
        50: [
            function (require, module, exports) {
                module.exports = ProxyHandler;
                function ProxyHandler(cbs) {
                    this._cbs = cbs || {};
                }
                var EVENTS = require('./').EVENTS;
                Object.keys(EVENTS).forEach(function (name) {
                    if (EVENTS[name] === 0) {
                        name = 'on' + name;
                        ProxyHandler.prototype[name] = function () {
                            if (this._cbs[name])
                                this._cbs[name]();
                        };
                    } else if (EVENTS[name] === 1) {
                        name = 'on' + name;
                        ProxyHandler.prototype[name] = function (a) {
                            if (this._cbs[name])
                                this._cbs[name](a);
                        };
                    } else if (EVENTS[name] === 2) {
                        name = 'on' + name;
                        ProxyHandler.prototype[name] = function (a, b) {
                            if (this._cbs[name])
                                this._cbs[name](a, b);
                        };
                    } else {
                        throw Error('wrong number of arguments');
                    }
                });
            },
            { './': 54 }
        ],
        51: [
            function (require, module, exports) {
                module.exports = Stream;
                var Parser = require('./WritableStream.js');
                function Stream(options) {
                    Parser.call(this, new Cbs(this), options);
                }
                require('inherits')(Stream, Parser);
                Stream.prototype.readable = true;
                function Cbs(scope) {
                    this.scope = scope;
                }
                var EVENTS = require('../').EVENTS;
                Object.keys(EVENTS).forEach(function (name) {
                    if (EVENTS[name] === 0) {
                        Cbs.prototype['on' + name] = function () {
                            this.scope.emit(name);
                        };
                    } else if (EVENTS[name] === 1) {
                        Cbs.prototype['on' + name] = function (a) {
                            this.scope.emit(name, a);
                        };
                    } else if (EVENTS[name] === 2) {
                        Cbs.prototype['on' + name] = function (a, b) {
                            this.scope.emit(name, a, b);
                        };
                    } else {
                        throw Error('wrong number of arguments!');
                    }
                });
            },
            {
                '../': 54,
                './WritableStream.js': 53,
                'inherits': 56
            }
        ],
        52: [
            function (require, module, exports) {
                module.exports = Tokenizer;
                var decodeCodePoint = require('entities/lib/decode_codepoint.js'), entityMap = require('entities/maps/entities.json'), legacyMap = require('entities/maps/legacy.json'), xmlMap = require('entities/maps/xml.json'), i = 0, TEXT = i++, BEFORE_TAG_NAME = i++, IN_TAG_NAME = i++, IN_SELF_CLOSING_TAG = i++, BEFORE_CLOSING_TAG_NAME = i++, IN_CLOSING_TAG_NAME = i++, AFTER_CLOSING_TAG_NAME = i++, BEFORE_ATTRIBUTE_NAME = i++, IN_ATTRIBUTE_NAME = i++, AFTER_ATTRIBUTE_NAME = i++, BEFORE_ATTRIBUTE_VALUE = i++, IN_ATTRIBUTE_VALUE_DQ = i++, IN_ATTRIBUTE_VALUE_SQ = i++, IN_ATTRIBUTE_VALUE_NQ = i++, BEFORE_DECLARATION = i++, IN_DECLARATION = i++, IN_PROCESSING_INSTRUCTION = i++, BEFORE_COMMENT = i++, IN_COMMENT = i++, AFTER_COMMENT_1 = i++, AFTER_COMMENT_2 = i++, BEFORE_CDATA_1 = i++, BEFORE_CDATA_2 = i++, BEFORE_CDATA_3 = i++, BEFORE_CDATA_4 = i++, BEFORE_CDATA_5 = i++, BEFORE_CDATA_6 = i++, IN_CDATA = i++, AFTER_CDATA_1 = i++, AFTER_CDATA_2 = i++, BEFORE_SPECIAL = i++, BEFORE_SPECIAL_END = i++, BEFORE_SCRIPT_1 = i++, BEFORE_SCRIPT_2 = i++, BEFORE_SCRIPT_3 = i++, BEFORE_SCRIPT_4 = i++, BEFORE_SCRIPT_5 = i++, AFTER_SCRIPT_1 = i++, AFTER_SCRIPT_2 = i++, AFTER_SCRIPT_3 = i++, AFTER_SCRIPT_4 = i++, AFTER_SCRIPT_5 = i++, BEFORE_STYLE_1 = i++, BEFORE_STYLE_2 = i++, BEFORE_STYLE_3 = i++, BEFORE_STYLE_4 = i++, AFTER_STYLE_1 = i++, AFTER_STYLE_2 = i++, AFTER_STYLE_3 = i++, AFTER_STYLE_4 = i++, BEFORE_ENTITY = i++, BEFORE_NUMERIC_ENTITY = i++, IN_NAMED_ENTITY = i++, IN_NUMERIC_ENTITY = i++, IN_HEX_ENTITY = i++, j = 0, SPECIAL_NONE = j++, SPECIAL_SCRIPT = j++, SPECIAL_STYLE = j++;
                function whitespace(c) {
                    return c === ' ' || c === '\n' || c === '\t' || c === '\f' || c === '\r';
                }
                function characterState(char, SUCCESS) {
                    return function (c) {
                        if (c === char)
                            this._state = SUCCESS;
                    };
                }
                function ifElseState(upper, SUCCESS, FAILURE) {
                    var lower = upper.toLowerCase();
                    if (upper === lower) {
                        return function (c) {
                            if (c === lower) {
                                this._state = SUCCESS;
                            } else {
                                this._state = FAILURE;
                                this._index--;
                            }
                        };
                    } else {
                        return function (c) {
                            if (c === lower || c === upper) {
                                this._state = SUCCESS;
                            } else {
                                this._state = FAILURE;
                                this._index--;
                            }
                        };
                    }
                }
                function consumeSpecialNameChar(upper, NEXT_STATE) {
                    var lower = upper.toLowerCase();
                    return function (c) {
                        if (c === lower || c === upper) {
                            this._state = NEXT_STATE;
                        } else {
                            this._state = IN_TAG_NAME;
                            this._index--;
                        }
                    };
                }
                function Tokenizer(options, cbs) {
                    this._state = TEXT;
                    this._buffer = '';
                    this._sectionStart = 0;
                    this._index = 0;
                    this._bufferOffset = 0;
                    this._baseState = TEXT;
                    this._special = SPECIAL_NONE;
                    this._cbs = cbs;
                    this._running = true;
                    this._ended = false;
                    this._xmlMode = !!(options && options.xmlMode);
                    this._decodeEntities = !!(options && options.decodeEntities);
                }
                Tokenizer.prototype._stateText = function (c) {
                    if (c === '<') {
                        if (this._index > this._sectionStart) {
                            this._cbs.ontext(this._getSection());
                        }
                        this._state = BEFORE_TAG_NAME;
                        this._sectionStart = this._index;
                    } else if (this._decodeEntities && this._special === SPECIAL_NONE && c === '&') {
                        if (this._index > this._sectionStart) {
                            this._cbs.ontext(this._getSection());
                        }
                        this._baseState = TEXT;
                        this._state = BEFORE_ENTITY;
                        this._sectionStart = this._index;
                    }
                };
                Tokenizer.prototype._stateBeforeTagName = function (c) {
                    if (c === '/') {
                        this._state = BEFORE_CLOSING_TAG_NAME;
                    } else if (c === '<') {
                        this._cbs.ontext(this._getSection());
                        this._sectionStart = this._index;
                    } else if (c === '>' || this._special !== SPECIAL_NONE || whitespace(c)) {
                        this._state = TEXT;
                    } else if (c === '!') {
                        this._state = BEFORE_DECLARATION;
                        this._sectionStart = this._index + 1;
                    } else if (c === '?') {
                        this._state = IN_PROCESSING_INSTRUCTION;
                        this._sectionStart = this._index + 1;
                    } else {
                        this._state = !this._xmlMode && (c === 's' || c === 'S') ? BEFORE_SPECIAL : IN_TAG_NAME;
                        this._sectionStart = this._index;
                    }
                };
                Tokenizer.prototype._stateInTagName = function (c) {
                    if (c === '/' || c === '>' || whitespace(c)) {
                        this._emitToken('onopentagname');
                        this._state = BEFORE_ATTRIBUTE_NAME;
                        this._index--;
                    }
                };
                Tokenizer.prototype._stateBeforeCloseingTagName = function (c) {
                    if (whitespace(c));
                    else if (c === '>') {
                        this._state = TEXT;
                    } else if (this._special !== SPECIAL_NONE) {
                        if (c === 's' || c === 'S') {
                            this._state = BEFORE_SPECIAL_END;
                        } else {
                            this._state = TEXT;
                            this._index--;
                        }
                    } else {
                        this._state = IN_CLOSING_TAG_NAME;
                        this._sectionStart = this._index;
                    }
                };
                Tokenizer.prototype._stateInCloseingTagName = function (c) {
                    if (c === '>' || whitespace(c)) {
                        this._emitToken('onclosetag');
                        this._state = AFTER_CLOSING_TAG_NAME;
                        this._index--;
                    }
                };
                Tokenizer.prototype._stateAfterCloseingTagName = function (c) {
                    if (c === '>') {
                        this._state = TEXT;
                        this._sectionStart = this._index + 1;
                    }
                };
                Tokenizer.prototype._stateBeforeAttributeName = function (c) {
                    if (c === '>') {
                        this._cbs.onopentagend();
                        this._state = TEXT;
                        this._sectionStart = this._index + 1;
                    } else if (c === '/') {
                        this._state = IN_SELF_CLOSING_TAG;
                    } else if (!whitespace(c)) {
                        this._state = IN_ATTRIBUTE_NAME;
                        this._sectionStart = this._index;
                    }
                };
                Tokenizer.prototype._stateInSelfClosingTag = function (c) {
                    if (c === '>') {
                        this._cbs.onselfclosingtag();
                        this._state = TEXT;
                        this._sectionStart = this._index + 1;
                    } else if (!whitespace(c)) {
                        this._state = BEFORE_ATTRIBUTE_NAME;
                        this._index--;
                    }
                };
                Tokenizer.prototype._stateInAttributeName = function (c) {
                    if (c === '=' || c === '/' || c === '>' || whitespace(c)) {
                        this._cbs.onattribname(this._getSection());
                        this._sectionStart = -1;
                        this._state = AFTER_ATTRIBUTE_NAME;
                        this._index--;
                    }
                };
                Tokenizer.prototype._stateAfterAttributeName = function (c) {
                    if (c === '=') {
                        this._state = BEFORE_ATTRIBUTE_VALUE;
                    } else if (c === '/' || c === '>') {
                        this._cbs.onattribend();
                        this._state = BEFORE_ATTRIBUTE_NAME;
                        this._index--;
                    } else if (!whitespace(c)) {
                        this._cbs.onattribend();
                        this._state = IN_ATTRIBUTE_NAME;
                        this._sectionStart = this._index;
                    }
                };
                Tokenizer.prototype._stateBeforeAttributeValue = function (c) {
                    if (c === '"') {
                        this._state = IN_ATTRIBUTE_VALUE_DQ;
                        this._sectionStart = this._index + 1;
                    } else if (c === '\'') {
                        this._state = IN_ATTRIBUTE_VALUE_SQ;
                        this._sectionStart = this._index + 1;
                    } else if (!whitespace(c)) {
                        this._state = IN_ATTRIBUTE_VALUE_NQ;
                        this._sectionStart = this._index;
                        this._index--;
                    }
                };
                Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function (c) {
                    if (c === '"') {
                        this._emitToken('onattribdata');
                        this._cbs.onattribend();
                        this._state = BEFORE_ATTRIBUTE_NAME;
                    } else if (this._decodeEntities && c === '&') {
                        this._emitToken('onattribdata');
                        this._baseState = this._state;
                        this._state = BEFORE_ENTITY;
                        this._sectionStart = this._index;
                    }
                };
                Tokenizer.prototype._stateInAttributeValueSingleQuotes = function (c) {
                    if (c === '\'') {
                        this._emitToken('onattribdata');
                        this._cbs.onattribend();
                        this._state = BEFORE_ATTRIBUTE_NAME;
                    } else if (this._decodeEntities && c === '&') {
                        this._emitToken('onattribdata');
                        this._baseState = this._state;
                        this._state = BEFORE_ENTITY;
                        this._sectionStart = this._index;
                    }
                };
                Tokenizer.prototype._stateInAttributeValueNoQuotes = function (c) {
                    if (whitespace(c) || c === '>') {
                        this._emitToken('onattribdata');
                        this._cbs.onattribend();
                        this._state = BEFORE_ATTRIBUTE_NAME;
                        this._index--;
                    } else if (this._decodeEntities && c === '&') {
                        this._emitToken('onattribdata');
                        this._baseState = this._state;
                        this._state = BEFORE_ENTITY;
                        this._sectionStart = this._index;
                    }
                };
                Tokenizer.prototype._stateBeforeDeclaration = function (c) {
                    this._state = c === '[' ? BEFORE_CDATA_1 : c === '-' ? BEFORE_COMMENT : IN_DECLARATION;
                };
                Tokenizer.prototype._stateInDeclaration = function (c) {
                    if (c === '>') {
                        this._cbs.ondeclaration(this._getSection());
                        this._state = TEXT;
                        this._sectionStart = this._index + 1;
                    }
                };
                Tokenizer.prototype._stateInProcessingInstruction = function (c) {
                    if (c === '>') {
                        this._cbs.onprocessinginstruction(this._getSection());
                        this._state = TEXT;
                        this._sectionStart = this._index + 1;
                    }
                };
                Tokenizer.prototype._stateBeforeComment = function (c) {
                    if (c === '-') {
                        this._state = IN_COMMENT;
                        this._sectionStart = this._index + 1;
                    } else {
                        this._state = IN_DECLARATION;
                    }
                };
                Tokenizer.prototype._stateInComment = function (c) {
                    if (c === '-')
                        this._state = AFTER_COMMENT_1;
                };
                Tokenizer.prototype._stateAfterComment1 = function (c) {
                    if (c === '-') {
                        this._state = AFTER_COMMENT_2;
                    } else {
                        this._state = IN_COMMENT;
                    }
                };
                Tokenizer.prototype._stateAfterComment2 = function (c) {
                    if (c === '>') {
                        this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));
                        this._state = TEXT;
                        this._sectionStart = this._index + 1;
                    } else if (c !== '-') {
                        this._state = IN_COMMENT;
                    }
                };
                Tokenizer.prototype._stateBeforeCdata1 = ifElseState('C', BEFORE_CDATA_2, IN_DECLARATION);
                Tokenizer.prototype._stateBeforeCdata2 = ifElseState('D', BEFORE_CDATA_3, IN_DECLARATION);
                Tokenizer.prototype._stateBeforeCdata3 = ifElseState('A', BEFORE_CDATA_4, IN_DECLARATION);
                Tokenizer.prototype._stateBeforeCdata4 = ifElseState('T', BEFORE_CDATA_5, IN_DECLARATION);
                Tokenizer.prototype._stateBeforeCdata5 = ifElseState('A', BEFORE_CDATA_6, IN_DECLARATION);
                Tokenizer.prototype._stateBeforeCdata6 = function (c) {
                    if (c === '[') {
                        this._state = IN_CDATA;
                        this._sectionStart = this._index + 1;
                    } else {
                        this._state = IN_DECLARATION;
                        this._index--;
                    }
                };
                Tokenizer.prototype._stateInCdata = function (c) {
                    if (c === ']')
                        this._state = AFTER_CDATA_1;
                };
                Tokenizer.prototype._stateAfterCdata1 = characterState(']', AFTER_CDATA_2);
                Tokenizer.prototype._stateAfterCdata2 = function (c) {
                    if (c === '>') {
                        this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));
                        this._state = TEXT;
                        this._sectionStart = this._index + 1;
                    } else if (c !== ']') {
                        this._state = IN_CDATA;
                    }
                };
                Tokenizer.prototype._stateBeforeSpecial = function (c) {
                    if (c === 'c' || c === 'C') {
                        this._state = BEFORE_SCRIPT_1;
                    } else if (c === 't' || c === 'T') {
                        this._state = BEFORE_STYLE_1;
                    } else {
                        this._state = IN_TAG_NAME;
                        this._index--;
                    }
                };
                Tokenizer.prototype._stateBeforeSpecialEnd = function (c) {
                    if (this._special === SPECIAL_SCRIPT && (c === 'c' || c === 'C')) {
                        this._state = AFTER_SCRIPT_1;
                    } else if (this._special === SPECIAL_STYLE && (c === 't' || c === 'T')) {
                        this._state = AFTER_STYLE_1;
                    } else
                        this._state = TEXT;
                };
                Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar('R', BEFORE_SCRIPT_2);
                Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar('I', BEFORE_SCRIPT_3);
                Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar('P', BEFORE_SCRIPT_4);
                Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar('T', BEFORE_SCRIPT_5);
                Tokenizer.prototype._stateBeforeScript5 = function (c) {
                    if (c === '/' || c === '>' || whitespace(c)) {
                        this._special = SPECIAL_SCRIPT;
                    }
                    this._state = IN_TAG_NAME;
                    this._index--;
                };
                Tokenizer.prototype._stateAfterScript1 = ifElseState('R', AFTER_SCRIPT_2, TEXT);
                Tokenizer.prototype._stateAfterScript2 = ifElseState('I', AFTER_SCRIPT_3, TEXT);
                Tokenizer.prototype._stateAfterScript3 = ifElseState('P', AFTER_SCRIPT_4, TEXT);
                Tokenizer.prototype._stateAfterScript4 = ifElseState('T', AFTER_SCRIPT_5, TEXT);
                Tokenizer.prototype._stateAfterScript5 = function (c) {
                    if (c === '>' || whitespace(c)) {
                        this._special = SPECIAL_NONE;
                        this._state = IN_CLOSING_TAG_NAME;
                        this._sectionStart = this._index - 6;
                        this._index--;
                    } else
                        this._state = TEXT;
                };
                Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar('Y', BEFORE_STYLE_2);
                Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar('L', BEFORE_STYLE_3);
                Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar('E', BEFORE_STYLE_4);
                Tokenizer.prototype._stateBeforeStyle4 = function (c) {
                    if (c === '/' || c === '>' || whitespace(c)) {
                        this._special = SPECIAL_STYLE;
                    }
                    this._state = IN_TAG_NAME;
                    this._index--;
                };
                Tokenizer.prototype._stateAfterStyle1 = ifElseState('Y', AFTER_STYLE_2, TEXT);
                Tokenizer.prototype._stateAfterStyle2 = ifElseState('L', AFTER_STYLE_3, TEXT);
                Tokenizer.prototype._stateAfterStyle3 = ifElseState('E', AFTER_STYLE_4, TEXT);
                Tokenizer.prototype._stateAfterStyle4 = function (c) {
                    if (c === '>' || whitespace(c)) {
                        this._special = SPECIAL_NONE;
                        this._state = IN_CLOSING_TAG_NAME;
                        this._sectionStart = this._index - 5;
                        this._index--;
                    } else
                        this._state = TEXT;
                };
                Tokenizer.prototype._stateBeforeEntity = ifElseState('#', BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);
                Tokenizer.prototype._stateBeforeNumericEntity = ifElseState('X', IN_HEX_ENTITY, IN_NUMERIC_ENTITY);
                Tokenizer.prototype._parseNamedEntityStrict = function () {
                    if (this._sectionStart + 1 < this._index) {
                        var entity = this._buffer.substring(this._sectionStart + 1, this._index), map = this._xmlMode ? xmlMap : entityMap;
                        if (map.hasOwnProperty(entity)) {
                            this._emitPartial(map[entity]);
                            this._sectionStart = this._index + 1;
                        }
                    }
                };
                Tokenizer.prototype._parseLegacyEntity = function () {
                    var start = this._sectionStart + 1, limit = this._index - start;
                    if (limit > 6)
                        limit = 6;
                    while (limit >= 2) {
                        var entity = this._buffer.substr(start, limit);
                        if (legacyMap.hasOwnProperty(entity)) {
                            this._emitPartial(legacyMap[entity]);
                            this._sectionStart += limit + 1;
                            return;
                        } else {
                            limit--;
                        }
                    }
                };
                Tokenizer.prototype._stateInNamedEntity = function (c) {
                    if (c === ';') {
                        this._parseNamedEntityStrict();
                        if (this._sectionStart + 1 < this._index && !this._xmlMode) {
                            this._parseLegacyEntity();
                        }
                        this._state = this._baseState;
                    } else if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9')) {
                        if (this._xmlMode);
                        else if (this._sectionStart + 1 === this._index);
                        else if (this._baseState !== TEXT) {
                            if (c !== '=') {
                                this._parseNamedEntityStrict();
                            }
                        } else {
                            this._parseLegacyEntity();
                        }
                        this._state = this._baseState;
                        this._index--;
                    }
                };
                Tokenizer.prototype._decodeNumericEntity = function (offset, base) {
                    var sectionStart = this._sectionStart + offset;
                    if (sectionStart !== this._index) {
                        var entity = this._buffer.substring(sectionStart, this._index);
                        var parsed = parseInt(entity, base);
                        this._emitPartial(decodeCodePoint(parsed));
                        this._sectionStart = this._index;
                    } else {
                        this._sectionStart--;
                    }
                    this._state = this._baseState;
                };
                Tokenizer.prototype._stateInNumericEntity = function (c) {
                    if (c === ';') {
                        this._decodeNumericEntity(2, 10);
                        this._sectionStart++;
                    } else if (c < '0' || c > '9') {
                        if (!this._xmlMode) {
                            this._decodeNumericEntity(2, 10);
                        } else {
                            this._state = this._baseState;
                        }
                        this._index--;
                    }
                };
                Tokenizer.prototype._stateInHexEntity = function (c) {
                    if (c === ';') {
                        this._decodeNumericEntity(3, 16);
                        this._sectionStart++;
                    } else if ((c < 'a' || c > 'f') && (c < 'A' || c > 'F') && (c < '0' || c > '9')) {
                        if (!this._xmlMode) {
                            this._decodeNumericEntity(3, 16);
                        } else {
                            this._state = this._baseState;
                        }
                        this._index--;
                    }
                };
                Tokenizer.prototype._cleanup = function () {
                    if (this._sectionStart < 0) {
                        this._buffer = '';
                        this._bufferOffset += this._index;
                        this._index = 0;
                    } else if (this._running) {
                        if (this._state === TEXT) {
                            if (this._sectionStart !== this._index) {
                                this._cbs.ontext(this._buffer.substr(this._sectionStart));
                            }
                            this._buffer = '';
                            this._bufferOffset += this._index;
                            this._index = 0;
                        } else if (this._sectionStart === this._index) {
                            this._buffer = '';
                            this._bufferOffset += this._index;
                            this._index = 0;
                        } else {
                            this._buffer = this._buffer.substr(this._sectionStart);
                            this._index -= this._sectionStart;
                            this._bufferOffset += this._sectionStart;
                        }
                        this._sectionStart = 0;
                    }
                };
                Tokenizer.prototype.write = function (chunk) {
                    if (this._ended)
                        this._cbs.onerror(Error('.write() after done!'));
                    this._buffer += chunk;
                    this._parse();
                };
                Tokenizer.prototype._parse = function () {
                    while (this._index < this._buffer.length && this._running) {
                        var c = this._buffer.charAt(this._index);
                        if (this._state === TEXT) {
                            this._stateText(c);
                        } else if (this._state === BEFORE_TAG_NAME) {
                            this._stateBeforeTagName(c);
                        } else if (this._state === IN_TAG_NAME) {
                            this._stateInTagName(c);
                        } else if (this._state === BEFORE_CLOSING_TAG_NAME) {
                            this._stateBeforeCloseingTagName(c);
                        } else if (this._state === IN_CLOSING_TAG_NAME) {
                            this._stateInCloseingTagName(c);
                        } else if (this._state === AFTER_CLOSING_TAG_NAME) {
                            this._stateAfterCloseingTagName(c);
                        } else if (this._state === IN_SELF_CLOSING_TAG) {
                            this._stateInSelfClosingTag(c);
                        } else if (this._state === BEFORE_ATTRIBUTE_NAME) {
                            this._stateBeforeAttributeName(c);
                        } else if (this._state === IN_ATTRIBUTE_NAME) {
                            this._stateInAttributeName(c);
                        } else if (this._state === AFTER_ATTRIBUTE_NAME) {
                            this._stateAfterAttributeName(c);
                        } else if (this._state === BEFORE_ATTRIBUTE_VALUE) {
                            this._stateBeforeAttributeValue(c);
                        } else if (this._state === IN_ATTRIBUTE_VALUE_DQ) {
                            this._stateInAttributeValueDoubleQuotes(c);
                        } else if (this._state === IN_ATTRIBUTE_VALUE_SQ) {
                            this._stateInAttributeValueSingleQuotes(c);
                        } else if (this._state === IN_ATTRIBUTE_VALUE_NQ) {
                            this._stateInAttributeValueNoQuotes(c);
                        } else if (this._state === BEFORE_DECLARATION) {
                            this._stateBeforeDeclaration(c);
                        } else if (this._state === IN_DECLARATION) {
                            this._stateInDeclaration(c);
                        } else if (this._state === IN_PROCESSING_INSTRUCTION) {
                            this._stateInProcessingInstruction(c);
                        } else if (this._state === BEFORE_COMMENT) {
                            this._stateBeforeComment(c);
                        } else if (this._state === IN_COMMENT) {
                            this._stateInComment(c);
                        } else if (this._state === AFTER_COMMENT_1) {
                            this._stateAfterComment1(c);
                        } else if (this._state === AFTER_COMMENT_2) {
                            this._stateAfterComment2(c);
                        } else if (this._state === BEFORE_CDATA_1) {
                            this._stateBeforeCdata1(c);
                        } else if (this._state === BEFORE_CDATA_2) {
                            this._stateBeforeCdata2(c);
                        } else if (this._state === BEFORE_CDATA_3) {
                            this._stateBeforeCdata3(c);
                        } else if (this._state === BEFORE_CDATA_4) {
                            this._stateBeforeCdata4(c);
                        } else if (this._state === BEFORE_CDATA_5) {
                            this._stateBeforeCdata5(c);
                        } else if (this._state === BEFORE_CDATA_6) {
                            this._stateBeforeCdata6(c);
                        } else if (this._state === IN_CDATA) {
                            this._stateInCdata(c);
                        } else if (this._state === AFTER_CDATA_1) {
                            this._stateAfterCdata1(c);
                        } else if (this._state === AFTER_CDATA_2) {
                            this._stateAfterCdata2(c);
                        } else if (this._state === BEFORE_SPECIAL) {
                            this._stateBeforeSpecial(c);
                        } else if (this._state === BEFORE_SPECIAL_END) {
                            this._stateBeforeSpecialEnd(c);
                        } else if (this._state === BEFORE_SCRIPT_1) {
                            this._stateBeforeScript1(c);
                        } else if (this._state === BEFORE_SCRIPT_2) {
                            this._stateBeforeScript2(c);
                        } else if (this._state === BEFORE_SCRIPT_3) {
                            this._stateBeforeScript3(c);
                        } else if (this._state === BEFORE_SCRIPT_4) {
                            this._stateBeforeScript4(c);
                        } else if (this._state === BEFORE_SCRIPT_5) {
                            this._stateBeforeScript5(c);
                        } else if (this._state === AFTER_SCRIPT_1) {
                            this._stateAfterScript1(c);
                        } else if (this._state === AFTER_SCRIPT_2) {
                            this._stateAfterScript2(c);
                        } else if (this._state === AFTER_SCRIPT_3) {
                            this._stateAfterScript3(c);
                        } else if (this._state === AFTER_SCRIPT_4) {
                            this._stateAfterScript4(c);
                        } else if (this._state === AFTER_SCRIPT_5) {
                            this._stateAfterScript5(c);
                        } else if (this._state === BEFORE_STYLE_1) {
                            this._stateBeforeStyle1(c);
                        } else if (this._state === BEFORE_STYLE_2) {
                            this._stateBeforeStyle2(c);
                        } else if (this._state === BEFORE_STYLE_3) {
                            this._stateBeforeStyle3(c);
                        } else if (this._state === BEFORE_STYLE_4) {
                            this._stateBeforeStyle4(c);
                        } else if (this._state === AFTER_STYLE_1) {
                            this._stateAfterStyle1(c);
                        } else if (this._state === AFTER_STYLE_2) {
                            this._stateAfterStyle2(c);
                        } else if (this._state === AFTER_STYLE_3) {
                            this._stateAfterStyle3(c);
                        } else if (this._state === AFTER_STYLE_4) {
                            this._stateAfterStyle4(c);
                        } else if (this._state === BEFORE_ENTITY) {
                            this._stateBeforeEntity(c);
                        } else if (this._state === BEFORE_NUMERIC_ENTITY) {
                            this._stateBeforeNumericEntity(c);
                        } else if (this._state === IN_NAMED_ENTITY) {
                            this._stateInNamedEntity(c);
                        } else if (this._state === IN_NUMERIC_ENTITY) {
                            this._stateInNumericEntity(c);
                        } else if (this._state === IN_HEX_ENTITY) {
                            this._stateInHexEntity(c);
                        } else {
                            this._cbs.onerror(Error('unknown _state'), this._state);
                        }
                        this._index++;
                    }
                    this._cleanup();
                };
                Tokenizer.prototype.pause = function () {
                    this._running = false;
                };
                Tokenizer.prototype.resume = function () {
                    this._running = true;
                    if (this._index < this._buffer.length) {
                        this._parse();
                    }
                    if (this._ended) {
                        this._finish();
                    }
                };
                Tokenizer.prototype.end = function (chunk) {
                    if (this._ended)
                        this._cbs.onerror(Error('.end() after done!'));
                    if (chunk)
                        this.write(chunk);
                    this._ended = true;
                    if (this._running)
                        this._finish();
                };
                Tokenizer.prototype._finish = function () {
                    if (this._sectionStart < this._index) {
                        this._handleTrailingData();
                    }
                    this._cbs.onend();
                };
                Tokenizer.prototype._handleTrailingData = function () {
                    var data = this._buffer.substr(this._sectionStart);
                    if (this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2) {
                        this._cbs.oncdata(data);
                    } else if (this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2) {
                        this._cbs.oncomment(data);
                    } else if (this._state === IN_NAMED_ENTITY && !this._xmlMode) {
                        this._parseLegacyEntity();
                        if (this._sectionStart < this._index) {
                            this._state = this._baseState;
                            this._handleTrailingData();
                        }
                    } else if (this._state === IN_NUMERIC_ENTITY && !this._xmlMode) {
                        this._decodeNumericEntity(2, 10);
                        if (this._sectionStart < this._index) {
                            this._state = this._baseState;
                            this._handleTrailingData();
                        }
                    } else if (this._state === IN_HEX_ENTITY && !this._xmlMode) {
                        this._decodeNumericEntity(3, 16);
                        if (this._sectionStart < this._index) {
                            this._state = this._baseState;
                            this._handleTrailingData();
                        }
                    } else if (this._state !== IN_TAG_NAME && this._state !== BEFORE_ATTRIBUTE_NAME && this._state !== BEFORE_ATTRIBUTE_VALUE && this._state !== AFTER_ATTRIBUTE_NAME && this._state !== IN_ATTRIBUTE_NAME && this._state !== IN_ATTRIBUTE_VALUE_SQ && this._state !== IN_ATTRIBUTE_VALUE_DQ && this._state !== IN_ATTRIBUTE_VALUE_NQ && this._state !== IN_CLOSING_TAG_NAME) {
                        this._cbs.ontext(data);
                    }
                };
                Tokenizer.prototype.reset = function () {
                    Tokenizer.call(this, {
                        xmlMode: this._xmlMode,
                        decodeEntities: this._decodeEntities
                    }, this._cbs);
                };
                Tokenizer.prototype.getAbsoluteIndex = function () {
                    return this._bufferOffset + this._index;
                };
                Tokenizer.prototype._getSection = function () {
                    return this._buffer.substring(this._sectionStart, this._index);
                };
                Tokenizer.prototype._emitToken = function (name) {
                    this._cbs[name](this._getSection());
                    this._sectionStart = -1;
                };
                Tokenizer.prototype._emitPartial = function (value) {
                    if (this._baseState !== TEXT) {
                        this._cbs.onattribdata(value);
                    } else {
                        this._cbs.ontext(value);
                    }
                };
            },
            {
                'entities/lib/decode_codepoint.js': 26,
                'entities/maps/entities.json': 29,
                'entities/maps/legacy.json': 30,
                'entities/maps/xml.json': 31
            }
        ],
        53: [
            function (require, module, exports) {
                module.exports = Stream;
                var Parser = require('./Parser.js'), WritableStream = require('stream').Writable || require('readable-stream').Writable, StringDecoder = require('string_decoder').StringDecoder, Buffer = require('buffer').Buffer;
                function Stream(cbs, options) {
                    var parser = this._parser = new Parser(cbs, options);
                    var decoder = this._decoder = new StringDecoder();
                    WritableStream.call(this, { decodeStrings: false });
                    this.once('finish', function () {
                        parser.end(decoder.end());
                    });
                }
                require('inherits')(Stream, WritableStream);
                WritableStream.prototype._write = function (chunk, encoding, cb) {
                    if (chunk instanceof Buffer)
                        chunk = this._decoder.write(chunk);
                    this._parser.write(chunk);
                    cb();
                };
            },
            {
                './Parser.js': 49,
                'buffer': 8,
                'inherits': 56,
                'readable-stream': 6,
                'stream': 96,
                'string_decoder': 97
            }
        ],
        54: [
            function (require, module, exports) {
                var Parser = require('./Parser.js'), DomHandler = require('domhandler');
                function defineProp(name, value) {
                    delete module.exports[name];
                    module.exports[name] = value;
                    return value;
                }
                module.exports = {
                    Parser: Parser,
                    Tokenizer: require('./Tokenizer.js'),
                    ElementType: require('domelementtype'),
                    DomHandler: DomHandler,
                    get FeedHandler() {
                        return defineProp('FeedHandler', require('./FeedHandler.js'));
                    },
                    get Stream() {
                        return defineProp('Stream', require('./Stream.js'));
                    },
                    get WritableStream() {
                        return defineProp('WritableStream', require('./WritableStream.js'));
                    },
                    get ProxyHandler() {
                        return defineProp('ProxyHandler', require('./ProxyHandler.js'));
                    },
                    get DomUtils() {
                        return defineProp('DomUtils', require('domutils'));
                    },
                    get CollectingHandler() {
                        return defineProp('CollectingHandler', require('./CollectingHandler.js'));
                    },
                    DefaultHandler: DomHandler,
                    get RssHandler() {
                        return defineProp('RssHandler', this.FeedHandler);
                    },
                    parseDOM: function (data, options) {
                        var handler = new DomHandler(options);
                        new Parser(handler, options).end(data);
                        return handler.dom;
                    },
                    parseFeed: function (feed, options) {
                        var handler = new module.exports.FeedHandler(options);
                        new Parser(handler, options).end(feed);
                        return handler.dom;
                    },
                    createDomStream: function (cb, options, elementCb) {
                        var handler = new DomHandler(cb, options, elementCb);
                        return new Parser(handler, options);
                    },
                    EVENTS: {
                        attribute: 2,
                        cdatastart: 0,
                        cdataend: 0,
                        text: 1,
                        processinginstruction: 2,
                        comment: 1,
                        commentend: 0,
                        closetag: 1,
                        opentag: 2,
                        opentagname: 1,
                        error: 1,
                        end: 0
                    }
                };
            },
            {
                './CollectingHandler.js': 47,
                './FeedHandler.js': 48,
                './Parser.js': 49,
                './ProxyHandler.js': 50,
                './Stream.js': 51,
                './Tokenizer.js': 52,
                './WritableStream.js': 53,
                'domelementtype': 13,
                'domhandler': 14,
                'domutils': 17
            }
        ],
        55: [
            function (require, module, exports) {
                exports.read = function (buffer, offset, isLE, mLen, nBytes) {
                    var e, m;
                    var eLen = nBytes * 8 - mLen - 1;
                    var eMax = (1 << eLen) - 1;
                    var eBias = eMax >> 1;
                    var nBits = -7;
                    var i = isLE ? nBytes - 1 : 0;
                    var d = isLE ? -1 : 1;
                    var s = buffer[offset + i];
                    i += d;
                    e = s & (1 << -nBits) - 1;
                    s >>= -nBits;
                    nBits += eLen;
                    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
                    }
                    m = e & (1 << -nBits) - 1;
                    e >>= -nBits;
                    nBits += mLen;
                    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
                    }
                    if (e === 0) {
                        e = 1 - eBias;
                    } else if (e === eMax) {
                        return m ? NaN : (s ? -1 : 1) * Infinity;
                    } else {
                        m = m + Math.pow(2, mLen);
                        e = e - eBias;
                    }
                    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
                };
                exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
                    var e, m, c;
                    var eLen = nBytes * 8 - mLen - 1;
                    var eMax = (1 << eLen) - 1;
                    var eBias = eMax >> 1;
                    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
                    var i = isLE ? 0 : nBytes - 1;
                    var d = isLE ? 1 : -1;
                    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
                    value = Math.abs(value);
                    if (isNaN(value) || value === Infinity) {
                        m = isNaN(value) ? 1 : 0;
                        e = eMax;
                    } else {
                        e = Math.floor(Math.log(value) / Math.LN2);
                        if (value * (c = Math.pow(2, -e)) < 1) {
                            e--;
                            c *= 2;
                        }
                        if (e + eBias >= 1) {
                            value += rt / c;
                        } else {
                            value += rt * Math.pow(2, 1 - eBias);
                        }
                        if (value * c >= 2) {
                            e++;
                            c /= 2;
                        }
                        if (e + eBias >= eMax) {
                            m = 0;
                            e = eMax;
                        } else if (e + eBias >= 1) {
                            m = (value * c - 1) * Math.pow(2, mLen);
                            e = e + eBias;
                        } else {
                            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                            e = 0;
                        }
                    }
                    for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
                    }
                    e = e << mLen | m;
                    eLen += mLen;
                    for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
                    }
                    buffer[offset + i - d] |= s * 128;
                };
            },
            {}
        ],
        56: [
            function (require, module, exports) {
                if (typeof Object.create === 'function') {
                    module.exports = function inherits(ctor, superCtor) {
                        ctor.super_ = superCtor;
                        ctor.prototype = Object.create(superCtor.prototype, {
                            constructor: {
                                value: ctor,
                                enumerable: false,
                                writable: true,
                                configurable: true
                            }
                        });
                    };
                } else {
                    module.exports = function inherits(ctor, superCtor) {
                        ctor.super_ = superCtor;
                        var TempCtor = function () {
                        };
                        TempCtor.prototype = superCtor.prototype;
                        ctor.prototype = new TempCtor();
                        ctor.prototype.constructor = ctor;
                    };
                }
            },
            {}
        ],
        57: [
            function (require, module, exports) {
                module.exports = function (obj) {
                    return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
                };
                function isBuffer(obj) {
                    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
                }
                function isSlowBuffer(obj) {
                    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
                }
            },
            {}
        ],
        58: [
            function (require, module, exports) {
                var toString = {}.toString;
                module.exports = Array.isArray || function (arr) {
                    return toString.call(arr) == '[object Array]';
                };
            },
            {}
        ],
        59: [
            function (require, module, exports) {
                (function (process) {
                    function normalizeArray(parts, allowAboveRoot) {
                        var up = 0;
                        for (var i = parts.length - 1; i >= 0; i--) {
                            var last = parts[i];
                            if (last === '.') {
                                parts.splice(i, 1);
                            } else if (last === '..') {
                                parts.splice(i, 1);
                                up++;
                            } else if (up) {
                                parts.splice(i, 1);
                                up--;
                            }
                        }
                        if (allowAboveRoot) {
                            for (; up--; up) {
                                parts.unshift('..');
                            }
                        }
                        return parts;
                    }
                    var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
                    var splitPath = function (filename) {
                        return splitPathRe.exec(filename).slice(1);
                    };
                    exports.resolve = function () {
                        var resolvedPath = '', resolvedAbsolute = false;
                        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                            var path = i >= 0 ? arguments[i] : process.cwd();
                            if (typeof path !== 'string') {
                                throw new TypeError('Arguments to path.resolve must be strings');
                            } else if (!path) {
                                continue;
                            }
                            resolvedPath = path + '/' + resolvedPath;
                            resolvedAbsolute = path.charAt(0) === '/';
                        }
                        resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
                            return !!p;
                        }), !resolvedAbsolute).join('/');
                        return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
                    };
                    exports.normalize = function (path) {
                        var isAbsolute = exports.isAbsolute(path), trailingSlash = substr(path, -1) === '/';
                        path = normalizeArray(filter(path.split('/'), function (p) {
                            return !!p;
                        }), !isAbsolute).join('/');
                        if (!path && !isAbsolute) {
                            path = '.';
                        }
                        if (path && trailingSlash) {
                            path += '/';
                        }
                        return (isAbsolute ? '/' : '') + path;
                    };
                    exports.isAbsolute = function (path) {
                        return path.charAt(0) === '/';
                    };
                    exports.join = function () {
                        var paths = Array.prototype.slice.call(arguments, 0);
                        return exports.normalize(filter(paths, function (p, index) {
                            if (typeof p !== 'string') {
                                throw new TypeError('Arguments to path.join must be strings');
                            }
                            return p;
                        }).join('/'));
                    };
                    exports.relative = function (from, to) {
                        from = exports.resolve(from).substr(1);
                        to = exports.resolve(to).substr(1);
                        function trim(arr) {
                            var start = 0;
                            for (; start < arr.length; start++) {
                                if (arr[start] !== '')
                                    break;
                            }
                            var end = arr.length - 1;
                            for (; end >= 0; end--) {
                                if (arr[end] !== '')
                                    break;
                            }
                            if (start > end)
                                return [];
                            return arr.slice(start, end - start + 1);
                        }
                        var fromParts = trim(from.split('/'));
                        var toParts = trim(to.split('/'));
                        var length = Math.min(fromParts.length, toParts.length);
                        var samePartsLength = length;
                        for (var i = 0; i < length; i++) {
                            if (fromParts[i] !== toParts[i]) {
                                samePartsLength = i;
                                break;
                            }
                        }
                        var outputParts = [];
                        for (var i = samePartsLength; i < fromParts.length; i++) {
                            outputParts.push('..');
                        }
                        outputParts = outputParts.concat(toParts.slice(samePartsLength));
                        return outputParts.join('/');
                    };
                    exports.sep = '/';
                    exports.delimiter = ':';
                    exports.dirname = function (path) {
                        var result = splitPath(path), root = result[0], dir = result[1];
                        if (!root && !dir) {
                            return '.';
                        }
                        if (dir) {
                            dir = dir.substr(0, dir.length - 1);
                        }
                        return root + dir;
                    };
                    exports.basename = function (path, ext) {
                        var f = splitPath(path)[2];
                        if (ext && f.substr(-1 * ext.length) === ext) {
                            f = f.substr(0, f.length - ext.length);
                        }
                        return f;
                    };
                    exports.extname = function (path) {
                        return splitPath(path)[3];
                    };
                    function filter(xs, f) {
                        if (xs.filter)
                            return xs.filter(f);
                        var res = [];
                        for (var i = 0; i < xs.length; i++) {
                            if (f(xs[i], i, xs))
                                res.push(xs[i]);
                        }
                        return res;
                    }
                    var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
                        return str.substr(start, len);
                    } : function (str, start, len) {
                        if (start < 0)
                            start = str.length + start;
                        return str.substr(start, len);
                    };
                }.call(this, require('_process')));
            },
            { '_process': 61 }
        ],
        60: [
            function (require, module, exports) {
                (function (process) {
                    'use strict';
                    if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
                        module.exports = nextTick;
                    } else {
                        module.exports = process.nextTick;
                    }
                    function nextTick(fn, arg1, arg2, arg3) {
                        if (typeof fn !== 'function') {
                            throw new TypeError('"callback" argument must be a function');
                        }
                        var len = arguments.length;
                        var args, i;
                        switch (len) {
                        case 0:
                        case 1:
                            return process.nextTick(fn);
                        case 2:
                            return process.nextTick(function afterTickOne() {
                                fn.call(null, arg1);
                            });
                        case 3:
                            return process.nextTick(function afterTickTwo() {
                                fn.call(null, arg1, arg2);
                            });
                        case 4:
                            return process.nextTick(function afterTickThree() {
                                fn.call(null, arg1, arg2, arg3);
                            });
                        default:
                            args = new Array(len - 1);
                            i = 0;
                            while (i < args.length) {
                                args[i++] = arguments[i];
                            }
                            return process.nextTick(function afterTick() {
                                fn.apply(null, args);
                            });
                        }
                    }
                }.call(this, require('_process')));
            },
            { '_process': 61 }
        ],
        61: [
            function (require, module, exports) {
                var process = module.exports = {};
                var cachedSetTimeout;
                var cachedClearTimeout;
                function defaultSetTimout() {
                    throw new Error('setTimeout has not been defined');
                }
                function defaultClearTimeout() {
                    throw new Error('clearTimeout has not been defined');
                }
                (function () {
                    try {
                        if (typeof setTimeout === 'function') {
                            cachedSetTimeout = setTimeout;
                        } else {
                            cachedSetTimeout = defaultSetTimout;
                        }
                    } catch (e) {
                        cachedSetTimeout = defaultSetTimout;
                    }
                    try {
                        if (typeof clearTimeout === 'function') {
                            cachedClearTimeout = clearTimeout;
                        } else {
                            cachedClearTimeout = defaultClearTimeout;
                        }
                    } catch (e) {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                }());
                function runTimeout(fun) {
                    if (cachedSetTimeout === setTimeout) {
                        return setTimeout(fun, 0);
                    }
                    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                        cachedSetTimeout = setTimeout;
                        return setTimeout(fun, 0);
                    }
                    try {
                        return cachedSetTimeout(fun, 0);
                    } catch (e) {
                        try {
                            return cachedSetTimeout.call(null, fun, 0);
                        } catch (e) {
                            return cachedSetTimeout.call(this, fun, 0);
                        }
                    }
                }
                function runClearTimeout(marker) {
                    if (cachedClearTimeout === clearTimeout) {
                        return clearTimeout(marker);
                    }
                    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                        cachedClearTimeout = clearTimeout;
                        return clearTimeout(marker);
                    }
                    try {
                        return cachedClearTimeout(marker);
                    } catch (e) {
                        try {
                            return cachedClearTimeout.call(null, marker);
                        } catch (e) {
                            return cachedClearTimeout.call(this, marker);
                        }
                    }
                }
                var queue = [];
                var draining = false;
                var currentQueue;
                var queueIndex = -1;
                function cleanUpNextTick() {
                    if (!draining || !currentQueue) {
                        return;
                    }
                    draining = false;
                    if (currentQueue.length) {
                        queue = currentQueue.concat(queue);
                    } else {
                        queueIndex = -1;
                    }
                    if (queue.length) {
                        drainQueue();
                    }
                }
                function drainQueue() {
                    if (draining) {
                        return;
                    }
                    var timeout = runTimeout(cleanUpNextTick);
                    draining = true;
                    var len = queue.length;
                    while (len) {
                        currentQueue = queue;
                        queue = [];
                        while (++queueIndex < len) {
                            if (currentQueue) {
                                currentQueue[queueIndex].run();
                            }
                        }
                        queueIndex = -1;
                        len = queue.length;
                    }
                    currentQueue = null;
                    draining = false;
                    runClearTimeout(timeout);
                }
                process.nextTick = function (fun) {
                    var args = new Array(arguments.length - 1);
                    if (arguments.length > 1) {
                        for (var i = 1; i < arguments.length; i++) {
                            args[i - 1] = arguments[i];
                        }
                    }
                    queue.push(new Item(fun, args));
                    if (queue.length === 1 && !draining) {
                        runTimeout(drainQueue);
                    }
                };
                function Item(fun, array) {
                    this.fun = fun;
                    this.array = array;
                }
                Item.prototype.run = function () {
                    this.fun.apply(null, this.array);
                };
                process.title = 'browser';
                process.browser = true;
                process.env = {};
                process.argv = [];
                process.version = '';
                process.versions = {};
                function noop() {
                }
                process.on = noop;
                process.addListener = noop;
                process.once = noop;
                process.off = noop;
                process.removeListener = noop;
                process.removeAllListeners = noop;
                process.emit = noop;
                process.prependListener = noop;
                process.prependOnceListener = noop;
                process.listeners = function (name) {
                    return [];
                };
                process.binding = function (name) {
                    throw new Error('process.binding is not supported');
                };
                process.cwd = function () {
                    return '/';
                };
                process.chdir = function (dir) {
                    throw new Error('process.chdir is not supported');
                };
                process.umask = function () {
                    return 0;
                };
            },
            {}
        ],
        62: [
            function (require, module, exports) {
                module.exports = require('./lib/_stream_duplex.js');
            },
            { './lib/_stream_duplex.js': 63 }
        ],
        63: [
            function (require, module, exports) {
                'use strict';
                var processNextTick = require('process-nextick-args');
                var objectKeys = Object.keys || function (obj) {
                    var keys = [];
                    for (var key in obj) {
                        keys.push(key);
                    }
                    return keys;
                };
                module.exports = Duplex;
                var util = require('core-util-is');
                util.inherits = require('inherits');
                var Readable = require('./_stream_readable');
                var Writable = require('./_stream_writable');
                util.inherits(Duplex, Readable);
                var keys = objectKeys(Writable.prototype);
                for (var v = 0; v < keys.length; v++) {
                    var method = keys[v];
                    if (!Duplex.prototype[method])
                        Duplex.prototype[method] = Writable.prototype[method];
                }
                function Duplex(options) {
                    if (!(this instanceof Duplex))
                        return new Duplex(options);
                    Readable.call(this, options);
                    Writable.call(this, options);
                    if (options && options.readable === false)
                        this.readable = false;
                    if (options && options.writable === false)
                        this.writable = false;
                    this.allowHalfOpen = true;
                    if (options && options.allowHalfOpen === false)
                        this.allowHalfOpen = false;
                    this.once('end', onend);
                }
                function onend() {
                    if (this.allowHalfOpen || this._writableState.ended)
                        return;
                    processNextTick(onEndNT, this);
                }
                function onEndNT(self) {
                    self.end();
                }
                Object.defineProperty(Duplex.prototype, 'destroyed', {
                    get: function () {
                        if (this._readableState === undefined || this._writableState === undefined) {
                            return false;
                        }
                        return this._readableState.destroyed && this._writableState.destroyed;
                    },
                    set: function (value) {
                        if (this._readableState === undefined || this._writableState === undefined) {
                            return;
                        }
                        this._readableState.destroyed = value;
                        this._writableState.destroyed = value;
                    }
                });
                Duplex.prototype._destroy = function (err, cb) {
                    this.push(null);
                    this.end();
                    processNextTick(cb, err);
                };
                function forEach(xs, f) {
                    for (var i = 0, l = xs.length; i < l; i++) {
                        f(xs[i], i);
                    }
                }
            },
            {
                './_stream_readable': 65,
                './_stream_writable': 67,
                'core-util-is': 10,
                'inherits': 56,
                'process-nextick-args': 60
            }
        ],
        64: [
            function (require, module, exports) {
                'use strict';
                module.exports = PassThrough;
                var Transform = require('./_stream_transform');
                var util = require('core-util-is');
                util.inherits = require('inherits');
                util.inherits(PassThrough, Transform);
                function PassThrough(options) {
                    if (!(this instanceof PassThrough))
                        return new PassThrough(options);
                    Transform.call(this, options);
                }
                PassThrough.prototype._transform = function (chunk, encoding, cb) {
                    cb(null, chunk);
                };
            },
            {
                './_stream_transform': 66,
                'core-util-is': 10,
                'inherits': 56
            }
        ],
        65: [
            function (require, module, exports) {
                (function (process, global) {
                    'use strict';
                    var processNextTick = require('process-nextick-args');
                    module.exports = Readable;
                    var isArray = require('isarray');
                    var Duplex;
                    Readable.ReadableState = ReadableState;
                    var EE = require('events').EventEmitter;
                    var EElistenerCount = function (emitter, type) {
                        return emitter.listeners(type).length;
                    };
                    var Stream = require('./internal/streams/stream');
                    var Buffer = require('safe-buffer').Buffer;
                    var OurUint8Array = global.Uint8Array || function () {
                    };
                    function _uint8ArrayToBuffer(chunk) {
                        return Buffer.from(chunk);
                    }
                    function _isUint8Array(obj) {
                        return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                    }
                    var util = require('core-util-is');
                    util.inherits = require('inherits');
                    var debugUtil = require('util');
                    var debug = void 0;
                    if (debugUtil && debugUtil.debuglog) {
                        debug = debugUtil.debuglog('stream');
                    } else {
                        debug = function () {
                        };
                    }
                    var BufferList = require('./internal/streams/BufferList');
                    var destroyImpl = require('./internal/streams/destroy');
                    var StringDecoder;
                    util.inherits(Readable, Stream);
                    var kProxyEvents = [
                        'error',
                        'close',
                        'destroy',
                        'pause',
                        'resume'
                    ];
                    function prependListener(emitter, event, fn) {
                        if (typeof emitter.prependListener === 'function') {
                            return emitter.prependListener(event, fn);
                        } else {
                            if (!emitter._events || !emitter._events[event])
                                emitter.on(event, fn);
                            else if (isArray(emitter._events[event]))
                                emitter._events[event].unshift(fn);
                            else
                                emitter._events[event] = [
                                    fn,
                                    emitter._events[event]
                                ];
                        }
                    }
                    function ReadableState(options, stream) {
                        Duplex = Duplex || require('./_stream_duplex');
                        options = options || {};
                        this.objectMode = !!options.objectMode;
                        if (stream instanceof Duplex)
                            this.objectMode = this.objectMode || !!options.readableObjectMode;
                        var hwm = options.highWaterMark;
                        var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                        this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
                        this.highWaterMark = Math.floor(this.highWaterMark);
                        this.buffer = new BufferList();
                        this.length = 0;
                        this.pipes = null;
                        this.pipesCount = 0;
                        this.flowing = null;
                        this.ended = false;
                        this.endEmitted = false;
                        this.reading = false;
                        this.sync = true;
                        this.needReadable = false;
                        this.emittedReadable = false;
                        this.readableListening = false;
                        this.resumeScheduled = false;
                        this.destroyed = false;
                        this.defaultEncoding = options.defaultEncoding || 'utf8';
                        this.awaitDrain = 0;
                        this.readingMore = false;
                        this.decoder = null;
                        this.encoding = null;
                        if (options.encoding) {
                            if (!StringDecoder)
                                StringDecoder = require('string_decoder/').StringDecoder;
                            this.decoder = new StringDecoder(options.encoding);
                            this.encoding = options.encoding;
                        }
                    }
                    function Readable(options) {
                        Duplex = Duplex || require('./_stream_duplex');
                        if (!(this instanceof Readable))
                            return new Readable(options);
                        this._readableState = new ReadableState(options, this);
                        this.readable = true;
                        if (options) {
                            if (typeof options.read === 'function')
                                this._read = options.read;
                            if (typeof options.destroy === 'function')
                                this._destroy = options.destroy;
                        }
                        Stream.call(this);
                    }
                    Object.defineProperty(Readable.prototype, 'destroyed', {
                        get: function () {
                            if (this._readableState === undefined) {
                                return false;
                            }
                            return this._readableState.destroyed;
                        },
                        set: function (value) {
                            if (!this._readableState) {
                                return;
                            }
                            this._readableState.destroyed = value;
                        }
                    });
                    Readable.prototype.destroy = destroyImpl.destroy;
                    Readable.prototype._undestroy = destroyImpl.undestroy;
                    Readable.prototype._destroy = function (err, cb) {
                        this.push(null);
                        cb(err);
                    };
                    Readable.prototype.push = function (chunk, encoding) {
                        var state = this._readableState;
                        var skipChunkCheck;
                        if (!state.objectMode) {
                            if (typeof chunk === 'string') {
                                encoding = encoding || state.defaultEncoding;
                                if (encoding !== state.encoding) {
                                    chunk = Buffer.from(chunk, encoding);
                                    encoding = '';
                                }
                                skipChunkCheck = true;
                            }
                        } else {
                            skipChunkCheck = true;
                        }
                        return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
                    };
                    Readable.prototype.unshift = function (chunk) {
                        return readableAddChunk(this, chunk, null, true, false);
                    };
                    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                        var state = stream._readableState;
                        if (chunk === null) {
                            state.reading = false;
                            onEofChunk(stream, state);
                        } else {
                            var er;
                            if (!skipChunkCheck)
                                er = chunkInvalid(state, chunk);
                            if (er) {
                                stream.emit('error', er);
                            } else if (state.objectMode || chunk && chunk.length > 0) {
                                if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                                    chunk = _uint8ArrayToBuffer(chunk);
                                }
                                if (addToFront) {
                                    if (state.endEmitted)
                                        stream.emit('error', new Error('stream.unshift() after end event'));
                                    else
                                        addChunk(stream, state, chunk, true);
                                } else if (state.ended) {
                                    stream.emit('error', new Error('stream.push() after EOF'));
                                } else {
                                    state.reading = false;
                                    if (state.decoder && !encoding) {
                                        chunk = state.decoder.write(chunk);
                                        if (state.objectMode || chunk.length !== 0)
                                            addChunk(stream, state, chunk, false);
                                        else
                                            maybeReadMore(stream, state);
                                    } else {
                                        addChunk(stream, state, chunk, false);
                                    }
                                }
                            } else if (!addToFront) {
                                state.reading = false;
                            }
                        }
                        return needMoreData(state);
                    }
                    function addChunk(stream, state, chunk, addToFront) {
                        if (state.flowing && state.length === 0 && !state.sync) {
                            stream.emit('data', chunk);
                            stream.read(0);
                        } else {
                            state.length += state.objectMode ? 1 : chunk.length;
                            if (addToFront)
                                state.buffer.unshift(chunk);
                            else
                                state.buffer.push(chunk);
                            if (state.needReadable)
                                emitReadable(stream);
                        }
                        maybeReadMore(stream, state);
                    }
                    function chunkInvalid(state, chunk) {
                        var er;
                        if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                            er = new TypeError('Invalid non-string/buffer chunk');
                        }
                        return er;
                    }
                    function needMoreData(state) {
                        return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
                    }
                    Readable.prototype.isPaused = function () {
                        return this._readableState.flowing === false;
                    };
                    Readable.prototype.setEncoding = function (enc) {
                        if (!StringDecoder)
                            StringDecoder = require('string_decoder/').StringDecoder;
                        this._readableState.decoder = new StringDecoder(enc);
                        this._readableState.encoding = enc;
                        return this;
                    };
                    var MAX_HWM = 8388608;
                    function computeNewHighWaterMark(n) {
                        if (n >= MAX_HWM) {
                            n = MAX_HWM;
                        } else {
                            n--;
                            n |= n >>> 1;
                            n |= n >>> 2;
                            n |= n >>> 4;
                            n |= n >>> 8;
                            n |= n >>> 16;
                            n++;
                        }
                        return n;
                    }
                    function howMuchToRead(n, state) {
                        if (n <= 0 || state.length === 0 && state.ended)
                            return 0;
                        if (state.objectMode)
                            return 1;
                        if (n !== n) {
                            if (state.flowing && state.length)
                                return state.buffer.head.data.length;
                            else
                                return state.length;
                        }
                        if (n > state.highWaterMark)
                            state.highWaterMark = computeNewHighWaterMark(n);
                        if (n <= state.length)
                            return n;
                        if (!state.ended) {
                            state.needReadable = true;
                            return 0;
                        }
                        return state.length;
                    }
                    Readable.prototype.read = function (n) {
                        debug('read', n);
                        n = parseInt(n, 10);
                        var state = this._readableState;
                        var nOrig = n;
                        if (n !== 0)
                            state.emittedReadable = false;
                        if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                            debug('read: emitReadable', state.length, state.ended);
                            if (state.length === 0 && state.ended)
                                endReadable(this);
                            else
                                emitReadable(this);
                            return null;
                        }
                        n = howMuchToRead(n, state);
                        if (n === 0 && state.ended) {
                            if (state.length === 0)
                                endReadable(this);
                            return null;
                        }
                        var doRead = state.needReadable;
                        debug('need readable', doRead);
                        if (state.length === 0 || state.length - n < state.highWaterMark) {
                            doRead = true;
                            debug('length less than watermark', doRead);
                        }
                        if (state.ended || state.reading) {
                            doRead = false;
                            debug('reading or ended', doRead);
                        } else if (doRead) {
                            debug('do read');
                            state.reading = true;
                            state.sync = true;
                            if (state.length === 0)
                                state.needReadable = true;
                            this._read(state.highWaterMark);
                            state.sync = false;
                            if (!state.reading)
                                n = howMuchToRead(nOrig, state);
                        }
                        var ret;
                        if (n > 0)
                            ret = fromList(n, state);
                        else
                            ret = null;
                        if (ret === null) {
                            state.needReadable = true;
                            n = 0;
                        } else {
                            state.length -= n;
                        }
                        if (state.length === 0) {
                            if (!state.ended)
                                state.needReadable = true;
                            if (nOrig !== n && state.ended)
                                endReadable(this);
                        }
                        if (ret !== null)
                            this.emit('data', ret);
                        return ret;
                    };
                    function onEofChunk(stream, state) {
                        if (state.ended)
                            return;
                        if (state.decoder) {
                            var chunk = state.decoder.end();
                            if (chunk && chunk.length) {
                                state.buffer.push(chunk);
                                state.length += state.objectMode ? 1 : chunk.length;
                            }
                        }
                        state.ended = true;
                        emitReadable(stream);
                    }
                    function emitReadable(stream) {
                        var state = stream._readableState;
                        state.needReadable = false;
                        if (!state.emittedReadable) {
                            debug('emitReadable', state.flowing);
                            state.emittedReadable = true;
                            if (state.sync)
                                processNextTick(emitReadable_, stream);
                            else
                                emitReadable_(stream);
                        }
                    }
                    function emitReadable_(stream) {
                        debug('emit readable');
                        stream.emit('readable');
                        flow(stream);
                    }
                    function maybeReadMore(stream, state) {
                        if (!state.readingMore) {
                            state.readingMore = true;
                            processNextTick(maybeReadMore_, stream, state);
                        }
                    }
                    function maybeReadMore_(stream, state) {
                        var len = state.length;
                        while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                            debug('maybeReadMore read 0');
                            stream.read(0);
                            if (len === state.length)
                                break;
                            else
                                len = state.length;
                        }
                        state.readingMore = false;
                    }
                    Readable.prototype._read = function (n) {
                        this.emit('error', new Error('_read() is not implemented'));
                    };
                    Readable.prototype.pipe = function (dest, pipeOpts) {
                        var src = this;
                        var state = this._readableState;
                        switch (state.pipesCount) {
                        case 0:
                            state.pipes = dest;
                            break;
                        case 1:
                            state.pipes = [
                                state.pipes,
                                dest
                            ];
                            break;
                        default:
                            state.pipes.push(dest);
                            break;
                        }
                        state.pipesCount += 1;
                        debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
                        var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
                        var endFn = doEnd ? onend : unpipe;
                        if (state.endEmitted)
                            processNextTick(endFn);
                        else
                            src.once('end', endFn);
                        dest.on('unpipe', onunpipe);
                        function onunpipe(readable, unpipeInfo) {
                            debug('onunpipe');
                            if (readable === src) {
                                if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                                    unpipeInfo.hasUnpiped = true;
                                    cleanup();
                                }
                            }
                        }
                        function onend() {
                            debug('onend');
                            dest.end();
                        }
                        var ondrain = pipeOnDrain(src);
                        dest.on('drain', ondrain);
                        var cleanedUp = false;
                        function cleanup() {
                            debug('cleanup');
                            dest.removeListener('close', onclose);
                            dest.removeListener('finish', onfinish);
                            dest.removeListener('drain', ondrain);
                            dest.removeListener('error', onerror);
                            dest.removeListener('unpipe', onunpipe);
                            src.removeListener('end', onend);
                            src.removeListener('end', unpipe);
                            src.removeListener('data', ondata);
                            cleanedUp = true;
                            if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
                                ondrain();
                        }
                        var increasedAwaitDrain = false;
                        src.on('data', ondata);
                        function ondata(chunk) {
                            debug('ondata');
                            increasedAwaitDrain = false;
                            var ret = dest.write(chunk);
                            if (false === ret && !increasedAwaitDrain) {
                                if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                                    debug('false write response, pause', src._readableState.awaitDrain);
                                    src._readableState.awaitDrain++;
                                    increasedAwaitDrain = true;
                                }
                                src.pause();
                            }
                        }
                        function onerror(er) {
                            debug('onerror', er);
                            unpipe();
                            dest.removeListener('error', onerror);
                            if (EElistenerCount(dest, 'error') === 0)
                                dest.emit('error', er);
                        }
                        prependListener(dest, 'error', onerror);
                        function onclose() {
                            dest.removeListener('finish', onfinish);
                            unpipe();
                        }
                        dest.once('close', onclose);
                        function onfinish() {
                            debug('onfinish');
                            dest.removeListener('close', onclose);
                            unpipe();
                        }
                        dest.once('finish', onfinish);
                        function unpipe() {
                            debug('unpipe');
                            src.unpipe(dest);
                        }
                        dest.emit('pipe', src);
                        if (!state.flowing) {
                            debug('pipe resume');
                            src.resume();
                        }
                        return dest;
                    };
                    function pipeOnDrain(src) {
                        return function () {
                            var state = src._readableState;
                            debug('pipeOnDrain', state.awaitDrain);
                            if (state.awaitDrain)
                                state.awaitDrain--;
                            if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                                state.flowing = true;
                                flow(src);
                            }
                        };
                    }
                    Readable.prototype.unpipe = function (dest) {
                        var state = this._readableState;
                        var unpipeInfo = { hasUnpiped: false };
                        if (state.pipesCount === 0)
                            return this;
                        if (state.pipesCount === 1) {
                            if (dest && dest !== state.pipes)
                                return this;
                            if (!dest)
                                dest = state.pipes;
                            state.pipes = null;
                            state.pipesCount = 0;
                            state.flowing = false;
                            if (dest)
                                dest.emit('unpipe', this, unpipeInfo);
                            return this;
                        }
                        if (!dest) {
                            var dests = state.pipes;
                            var len = state.pipesCount;
                            state.pipes = null;
                            state.pipesCount = 0;
                            state.flowing = false;
                            for (var i = 0; i < len; i++) {
                                dests[i].emit('unpipe', this, unpipeInfo);
                            }
                            return this;
                        }
                        var index = indexOf(state.pipes, dest);
                        if (index === -1)
                            return this;
                        state.pipes.splice(index, 1);
                        state.pipesCount -= 1;
                        if (state.pipesCount === 1)
                            state.pipes = state.pipes[0];
                        dest.emit('unpipe', this, unpipeInfo);
                        return this;
                    };
                    Readable.prototype.on = function (ev, fn) {
                        var res = Stream.prototype.on.call(this, ev, fn);
                        if (ev === 'data') {
                            if (this._readableState.flowing !== false)
                                this.resume();
                        } else if (ev === 'readable') {
                            var state = this._readableState;
                            if (!state.endEmitted && !state.readableListening) {
                                state.readableListening = state.needReadable = true;
                                state.emittedReadable = false;
                                if (!state.reading) {
                                    processNextTick(nReadingNextTick, this);
                                } else if (state.length) {
                                    emitReadable(this);
                                }
                            }
                        }
                        return res;
                    };
                    Readable.prototype.addListener = Readable.prototype.on;
                    function nReadingNextTick(self) {
                        debug('readable nexttick read 0');
                        self.read(0);
                    }
                    Readable.prototype.resume = function () {
                        var state = this._readableState;
                        if (!state.flowing) {
                            debug('resume');
                            state.flowing = true;
                            resume(this, state);
                        }
                        return this;
                    };
                    function resume(stream, state) {
                        if (!state.resumeScheduled) {
                            state.resumeScheduled = true;
                            processNextTick(resume_, stream, state);
                        }
                    }
                    function resume_(stream, state) {
                        if (!state.reading) {
                            debug('resume read 0');
                            stream.read(0);
                        }
                        state.resumeScheduled = false;
                        state.awaitDrain = 0;
                        stream.emit('resume');
                        flow(stream);
                        if (state.flowing && !state.reading)
                            stream.read(0);
                    }
                    Readable.prototype.pause = function () {
                        debug('call pause flowing=%j', this._readableState.flowing);
                        if (false !== this._readableState.flowing) {
                            debug('pause');
                            this._readableState.flowing = false;
                            this.emit('pause');
                        }
                        return this;
                    };
                    function flow(stream) {
                        var state = stream._readableState;
                        debug('flow', state.flowing);
                        while (state.flowing && stream.read() !== null) {
                        }
                    }
                    Readable.prototype.wrap = function (stream) {
                        var state = this._readableState;
                        var paused = false;
                        var self = this;
                        stream.on('end', function () {
                            debug('wrapped end');
                            if (state.decoder && !state.ended) {
                                var chunk = state.decoder.end();
                                if (chunk && chunk.length)
                                    self.push(chunk);
                            }
                            self.push(null);
                        });
                        stream.on('data', function (chunk) {
                            debug('wrapped data');
                            if (state.decoder)
                                chunk = state.decoder.write(chunk);
                            if (state.objectMode && (chunk === null || chunk === undefined))
                                return;
                            else if (!state.objectMode && (!chunk || !chunk.length))
                                return;
                            var ret = self.push(chunk);
                            if (!ret) {
                                paused = true;
                                stream.pause();
                            }
                        });
                        for (var i in stream) {
                            if (this[i] === undefined && typeof stream[i] === 'function') {
                                this[i] = function (method) {
                                    return function () {
                                        return stream[method].apply(stream, arguments);
                                    };
                                }(i);
                            }
                        }
                        for (var n = 0; n < kProxyEvents.length; n++) {
                            stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
                        }
                        self._read = function (n) {
                            debug('wrapped _read', n);
                            if (paused) {
                                paused = false;
                                stream.resume();
                            }
                        };
                        return self;
                    };
                    Readable._fromList = fromList;
                    function fromList(n, state) {
                        if (state.length === 0)
                            return null;
                        var ret;
                        if (state.objectMode)
                            ret = state.buffer.shift();
                        else if (!n || n >= state.length) {
                            if (state.decoder)
                                ret = state.buffer.join('');
                            else if (state.buffer.length === 1)
                                ret = state.buffer.head.data;
                            else
                                ret = state.buffer.concat(state.length);
                            state.buffer.clear();
                        } else {
                            ret = fromListPartial(n, state.buffer, state.decoder);
                        }
                        return ret;
                    }
                    function fromListPartial(n, list, hasStrings) {
                        var ret;
                        if (n < list.head.data.length) {
                            ret = list.head.data.slice(0, n);
                            list.head.data = list.head.data.slice(n);
                        } else if (n === list.head.data.length) {
                            ret = list.shift();
                        } else {
                            ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
                        }
                        return ret;
                    }
                    function copyFromBufferString(n, list) {
                        var p = list.head;
                        var c = 1;
                        var ret = p.data;
                        n -= ret.length;
                        while (p = p.next) {
                            var str = p.data;
                            var nb = n > str.length ? str.length : n;
                            if (nb === str.length)
                                ret += str;
                            else
                                ret += str.slice(0, n);
                            n -= nb;
                            if (n === 0) {
                                if (nb === str.length) {
                                    ++c;
                                    if (p.next)
                                        list.head = p.next;
                                    else
                                        list.head = list.tail = null;
                                } else {
                                    list.head = p;
                                    p.data = str.slice(nb);
                                }
                                break;
                            }
                            ++c;
                        }
                        list.length -= c;
                        return ret;
                    }
                    function copyFromBuffer(n, list) {
                        var ret = Buffer.allocUnsafe(n);
                        var p = list.head;
                        var c = 1;
                        p.data.copy(ret);
                        n -= p.data.length;
                        while (p = p.next) {
                            var buf = p.data;
                            var nb = n > buf.length ? buf.length : n;
                            buf.copy(ret, ret.length - n, 0, nb);
                            n -= nb;
                            if (n === 0) {
                                if (nb === buf.length) {
                                    ++c;
                                    if (p.next)
                                        list.head = p.next;
                                    else
                                        list.head = list.tail = null;
                                } else {
                                    list.head = p;
                                    p.data = buf.slice(nb);
                                }
                                break;
                            }
                            ++c;
                        }
                        list.length -= c;
                        return ret;
                    }
                    function endReadable(stream) {
                        var state = stream._readableState;
                        if (state.length > 0)
                            throw new Error('"endReadable()" called on non-empty stream');
                        if (!state.endEmitted) {
                            state.ended = true;
                            processNextTick(endReadableNT, state, stream);
                        }
                    }
                    function endReadableNT(state, stream) {
                        if (!state.endEmitted && state.length === 0) {
                            state.endEmitted = true;
                            stream.readable = false;
                            stream.emit('end');
                        }
                    }
                    function forEach(xs, f) {
                        for (var i = 0, l = xs.length; i < l; i++) {
                            f(xs[i], i);
                        }
                    }
                    function indexOf(xs, x) {
                        for (var i = 0, l = xs.length; i < l; i++) {
                            if (xs[i] === x)
                                return i;
                        }
                        return -1;
                    }
                }.call(this, require('_process'), typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}));
            },
            {
                './_stream_duplex': 63,
                './internal/streams/BufferList': 68,
                './internal/streams/destroy': 69,
                './internal/streams/stream': 70,
                '_process': 61,
                'core-util-is': 10,
                'events': 46,
                'inherits': 56,
                'isarray': 58,
                'process-nextick-args': 60,
                'safe-buffer': 75,
                'string_decoder/': 97,
                'util': 6
            }
        ],
        66: [
            function (require, module, exports) {
                'use strict';
                module.exports = Transform;
                var Duplex = require('./_stream_duplex');
                var util = require('core-util-is');
                util.inherits = require('inherits');
                util.inherits(Transform, Duplex);
                function TransformState(stream) {
                    this.afterTransform = function (er, data) {
                        return afterTransform(stream, er, data);
                    };
                    this.needTransform = false;
                    this.transforming = false;
                    this.writecb = null;
                    this.writechunk = null;
                    this.writeencoding = null;
                }
                function afterTransform(stream, er, data) {
                    var ts = stream._transformState;
                    ts.transforming = false;
                    var cb = ts.writecb;
                    if (!cb) {
                        return stream.emit('error', new Error('write callback called multiple times'));
                    }
                    ts.writechunk = null;
                    ts.writecb = null;
                    if (data !== null && data !== undefined)
                        stream.push(data);
                    cb(er);
                    var rs = stream._readableState;
                    rs.reading = false;
                    if (rs.needReadable || rs.length < rs.highWaterMark) {
                        stream._read(rs.highWaterMark);
                    }
                }
                function Transform(options) {
                    if (!(this instanceof Transform))
                        return new Transform(options);
                    Duplex.call(this, options);
                    this._transformState = new TransformState(this);
                    var stream = this;
                    this._readableState.needReadable = true;
                    this._readableState.sync = false;
                    if (options) {
                        if (typeof options.transform === 'function')
                            this._transform = options.transform;
                        if (typeof options.flush === 'function')
                            this._flush = options.flush;
                    }
                    this.once('prefinish', function () {
                        if (typeof this._flush === 'function')
                            this._flush(function (er, data) {
                                done(stream, er, data);
                            });
                        else
                            done(stream);
                    });
                }
                Transform.prototype.push = function (chunk, encoding) {
                    this._transformState.needTransform = false;
                    return Duplex.prototype.push.call(this, chunk, encoding);
                };
                Transform.prototype._transform = function (chunk, encoding, cb) {
                    throw new Error('_transform() is not implemented');
                };
                Transform.prototype._write = function (chunk, encoding, cb) {
                    var ts = this._transformState;
                    ts.writecb = cb;
                    ts.writechunk = chunk;
                    ts.writeencoding = encoding;
                    if (!ts.transforming) {
                        var rs = this._readableState;
                        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
                            this._read(rs.highWaterMark);
                    }
                };
                Transform.prototype._read = function (n) {
                    var ts = this._transformState;
                    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                        ts.transforming = true;
                        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
                    } else {
                        ts.needTransform = true;
                    }
                };
                Transform.prototype._destroy = function (err, cb) {
                    var _this = this;
                    Duplex.prototype._destroy.call(this, err, function (err2) {
                        cb(err2);
                        _this.emit('close');
                    });
                };
                function done(stream, er, data) {
                    if (er)
                        return stream.emit('error', er);
                    if (data !== null && data !== undefined)
                        stream.push(data);
                    var ws = stream._writableState;
                    var ts = stream._transformState;
                    if (ws.length)
                        throw new Error('Calling transform done when ws.length != 0');
                    if (ts.transforming)
                        throw new Error('Calling transform done when still transforming');
                    return stream.push(null);
                }
            },
            {
                './_stream_duplex': 63,
                'core-util-is': 10,
                'inherits': 56
            }
        ],
        67: [
            function (require, module, exports) {
                (function (process, global) {
                    'use strict';
                    var processNextTick = require('process-nextick-args');
                    module.exports = Writable;
                    function WriteReq(chunk, encoding, cb) {
                        this.chunk = chunk;
                        this.encoding = encoding;
                        this.callback = cb;
                        this.next = null;
                    }
                    function CorkedRequest(state) {
                        var _this = this;
                        this.next = null;
                        this.entry = null;
                        this.finish = function () {
                            onCorkedFinish(_this, state);
                        };
                    }
                    var asyncWrite = !process.browser && [
                        'v0.10',
                        'v0.9.'
                    ].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
                    var Duplex;
                    Writable.WritableState = WritableState;
                    var util = require('core-util-is');
                    util.inherits = require('inherits');
                    var internalUtil = { deprecate: require('util-deprecate') };
                    var Stream = require('./internal/streams/stream');
                    var Buffer = require('safe-buffer').Buffer;
                    var OurUint8Array = global.Uint8Array || function () {
                    };
                    function _uint8ArrayToBuffer(chunk) {
                        return Buffer.from(chunk);
                    }
                    function _isUint8Array(obj) {
                        return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                    }
                    var destroyImpl = require('./internal/streams/destroy');
                    util.inherits(Writable, Stream);
                    function nop() {
                    }
                    function WritableState(options, stream) {
                        Duplex = Duplex || require('./_stream_duplex');
                        options = options || {};
                        this.objectMode = !!options.objectMode;
                        if (stream instanceof Duplex)
                            this.objectMode = this.objectMode || !!options.writableObjectMode;
                        var hwm = options.highWaterMark;
                        var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                        this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
                        this.highWaterMark = Math.floor(this.highWaterMark);
                        this.finalCalled = false;
                        this.needDrain = false;
                        this.ending = false;
                        this.ended = false;
                        this.finished = false;
                        this.destroyed = false;
                        var noDecode = options.decodeStrings === false;
                        this.decodeStrings = !noDecode;
                        this.defaultEncoding = options.defaultEncoding || 'utf8';
                        this.length = 0;
                        this.writing = false;
                        this.corked = 0;
                        this.sync = true;
                        this.bufferProcessing = false;
                        this.onwrite = function (er) {
                            onwrite(stream, er);
                        };
                        this.writecb = null;
                        this.writelen = 0;
                        this.bufferedRequest = null;
                        this.lastBufferedRequest = null;
                        this.pendingcb = 0;
                        this.prefinished = false;
                        this.errorEmitted = false;
                        this.bufferedRequestCount = 0;
                        this.corkedRequestsFree = new CorkedRequest(this);
                    }
                    WritableState.prototype.getBuffer = function getBuffer() {
                        var current = this.bufferedRequest;
                        var out = [];
                        while (current) {
                            out.push(current);
                            current = current.next;
                        }
                        return out;
                    };
                    (function () {
                        try {
                            Object.defineProperty(WritableState.prototype, 'buffer', {
                                get: internalUtil.deprecate(function () {
                                    return this.getBuffer();
                                }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
                            });
                        } catch (_) {
                        }
                    }());
                    var realHasInstance;
                    if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
                        realHasInstance = Function.prototype[Symbol.hasInstance];
                        Object.defineProperty(Writable, Symbol.hasInstance, {
                            value: function (object) {
                                if (realHasInstance.call(this, object))
                                    return true;
                                return object && object._writableState instanceof WritableState;
                            }
                        });
                    } else {
                        realHasInstance = function (object) {
                            return object instanceof this;
                        };
                    }
                    function Writable(options) {
                        Duplex = Duplex || require('./_stream_duplex');
                        if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                            return new Writable(options);
                        }
                        this._writableState = new WritableState(options, this);
                        this.writable = true;
                        if (options) {
                            if (typeof options.write === 'function')
                                this._write = options.write;
                            if (typeof options.writev === 'function')
                                this._writev = options.writev;
                            if (typeof options.destroy === 'function')
                                this._destroy = options.destroy;
                            if (typeof options.final === 'function')
                                this._final = options.final;
                        }
                        Stream.call(this);
                    }
                    Writable.prototype.pipe = function () {
                        this.emit('error', new Error('Cannot pipe, not readable'));
                    };
                    function writeAfterEnd(stream, cb) {
                        var er = new Error('write after end');
                        stream.emit('error', er);
                        processNextTick(cb, er);
                    }
                    function validChunk(stream, state, chunk, cb) {
                        var valid = true;
                        var er = false;
                        if (chunk === null) {
                            er = new TypeError('May not write null values to stream');
                        } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                            er = new TypeError('Invalid non-string/buffer chunk');
                        }
                        if (er) {
                            stream.emit('error', er);
                            processNextTick(cb, er);
                            valid = false;
                        }
                        return valid;
                    }
                    Writable.prototype.write = function (chunk, encoding, cb) {
                        var state = this._writableState;
                        var ret = false;
                        var isBuf = _isUint8Array(chunk) && !state.objectMode;
                        if (isBuf && !Buffer.isBuffer(chunk)) {
                            chunk = _uint8ArrayToBuffer(chunk);
                        }
                        if (typeof encoding === 'function') {
                            cb = encoding;
                            encoding = null;
                        }
                        if (isBuf)
                            encoding = 'buffer';
                        else if (!encoding)
                            encoding = state.defaultEncoding;
                        if (typeof cb !== 'function')
                            cb = nop;
                        if (state.ended)
                            writeAfterEnd(this, cb);
                        else if (isBuf || validChunk(this, state, chunk, cb)) {
                            state.pendingcb++;
                            ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                        }
                        return ret;
                    };
                    Writable.prototype.cork = function () {
                        var state = this._writableState;
                        state.corked++;
                    };
                    Writable.prototype.uncork = function () {
                        var state = this._writableState;
                        if (state.corked) {
                            state.corked--;
                            if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest)
                                clearBuffer(this, state);
                        }
                    };
                    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                        if (typeof encoding === 'string')
                            encoding = encoding.toLowerCase();
                        if (!([
                                'hex',
                                'utf8',
                                'utf-8',
                                'ascii',
                                'binary',
                                'base64',
                                'ucs2',
                                'ucs-2',
                                'utf16le',
                                'utf-16le',
                                'raw'
                            ].indexOf((encoding + '').toLowerCase()) > -1))
                            throw new TypeError('Unknown encoding: ' + encoding);
                        this._writableState.defaultEncoding = encoding;
                        return this;
                    };
                    function decodeChunk(state, chunk, encoding) {
                        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                            chunk = Buffer.from(chunk, encoding);
                        }
                        return chunk;
                    }
                    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                        if (!isBuf) {
                            var newChunk = decodeChunk(state, chunk, encoding);
                            if (chunk !== newChunk) {
                                isBuf = true;
                                encoding = 'buffer';
                                chunk = newChunk;
                            }
                        }
                        var len = state.objectMode ? 1 : chunk.length;
                        state.length += len;
                        var ret = state.length < state.highWaterMark;
                        if (!ret)
                            state.needDrain = true;
                        if (state.writing || state.corked) {
                            var last = state.lastBufferedRequest;
                            state.lastBufferedRequest = {
                                chunk: chunk,
                                encoding: encoding,
                                isBuf: isBuf,
                                callback: cb,
                                next: null
                            };
                            if (last) {
                                last.next = state.lastBufferedRequest;
                            } else {
                                state.bufferedRequest = state.lastBufferedRequest;
                            }
                            state.bufferedRequestCount += 1;
                        } else {
                            doWrite(stream, state, false, len, chunk, encoding, cb);
                        }
                        return ret;
                    }
                    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                        state.writelen = len;
                        state.writecb = cb;
                        state.writing = true;
                        state.sync = true;
                        if (writev)
                            stream._writev(chunk, state.onwrite);
                        else
                            stream._write(chunk, encoding, state.onwrite);
                        state.sync = false;
                    }
                    function onwriteError(stream, state, sync, er, cb) {
                        --state.pendingcb;
                        if (sync) {
                            processNextTick(cb, er);
                            processNextTick(finishMaybe, stream, state);
                            stream._writableState.errorEmitted = true;
                            stream.emit('error', er);
                        } else {
                            cb(er);
                            stream._writableState.errorEmitted = true;
                            stream.emit('error', er);
                            finishMaybe(stream, state);
                        }
                    }
                    function onwriteStateUpdate(state) {
                        state.writing = false;
                        state.writecb = null;
                        state.length -= state.writelen;
                        state.writelen = 0;
                    }
                    function onwrite(stream, er) {
                        var state = stream._writableState;
                        var sync = state.sync;
                        var cb = state.writecb;
                        onwriteStateUpdate(state);
                        if (er)
                            onwriteError(stream, state, sync, er, cb);
                        else {
                            var finished = needFinish(state);
                            if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                                clearBuffer(stream, state);
                            }
                            if (sync) {
                                asyncWrite(afterWrite, stream, state, finished, cb);
                            } else {
                                afterWrite(stream, state, finished, cb);
                            }
                        }
                    }
                    function afterWrite(stream, state, finished, cb) {
                        if (!finished)
                            onwriteDrain(stream, state);
                        state.pendingcb--;
                        cb();
                        finishMaybe(stream, state);
                    }
                    function onwriteDrain(stream, state) {
                        if (state.length === 0 && state.needDrain) {
                            state.needDrain = false;
                            stream.emit('drain');
                        }
                    }
                    function clearBuffer(stream, state) {
                        state.bufferProcessing = true;
                        var entry = state.bufferedRequest;
                        if (stream._writev && entry && entry.next) {
                            var l = state.bufferedRequestCount;
                            var buffer = new Array(l);
                            var holder = state.corkedRequestsFree;
                            holder.entry = entry;
                            var count = 0;
                            var allBuffers = true;
                            while (entry) {
                                buffer[count] = entry;
                                if (!entry.isBuf)
                                    allBuffers = false;
                                entry = entry.next;
                                count += 1;
                            }
                            buffer.allBuffers = allBuffers;
                            doWrite(stream, state, true, state.length, buffer, '', holder.finish);
                            state.pendingcb++;
                            state.lastBufferedRequest = null;
                            if (holder.next) {
                                state.corkedRequestsFree = holder.next;
                                holder.next = null;
                            } else {
                                state.corkedRequestsFree = new CorkedRequest(state);
                            }
                        } else {
                            while (entry) {
                                var chunk = entry.chunk;
                                var encoding = entry.encoding;
                                var cb = entry.callback;
                                var len = state.objectMode ? 1 : chunk.length;
                                doWrite(stream, state, false, len, chunk, encoding, cb);
                                entry = entry.next;
                                if (state.writing) {
                                    break;
                                }
                            }
                            if (entry === null)
                                state.lastBufferedRequest = null;
                        }
                        state.bufferedRequestCount = 0;
                        state.bufferedRequest = entry;
                        state.bufferProcessing = false;
                    }
                    Writable.prototype._write = function (chunk, encoding, cb) {
                        cb(new Error('_write() is not implemented'));
                    };
                    Writable.prototype._writev = null;
                    Writable.prototype.end = function (chunk, encoding, cb) {
                        var state = this._writableState;
                        if (typeof chunk === 'function') {
                            cb = chunk;
                            chunk = null;
                            encoding = null;
                        } else if (typeof encoding === 'function') {
                            cb = encoding;
                            encoding = null;
                        }
                        if (chunk !== null && chunk !== undefined)
                            this.write(chunk, encoding);
                        if (state.corked) {
                            state.corked = 1;
                            this.uncork();
                        }
                        if (!state.ending && !state.finished)
                            endWritable(this, state, cb);
                    };
                    function needFinish(state) {
                        return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
                    }
                    function callFinal(stream, state) {
                        stream._final(function (err) {
                            state.pendingcb--;
                            if (err) {
                                stream.emit('error', err);
                            }
                            state.prefinished = true;
                            stream.emit('prefinish');
                            finishMaybe(stream, state);
                        });
                    }
                    function prefinish(stream, state) {
                        if (!state.prefinished && !state.finalCalled) {
                            if (typeof stream._final === 'function') {
                                state.pendingcb++;
                                state.finalCalled = true;
                                processNextTick(callFinal, stream, state);
                            } else {
                                state.prefinished = true;
                                stream.emit('prefinish');
                            }
                        }
                    }
                    function finishMaybe(stream, state) {
                        var need = needFinish(state);
                        if (need) {
                            prefinish(stream, state);
                            if (state.pendingcb === 0) {
                                state.finished = true;
                                stream.emit('finish');
                            }
                        }
                        return need;
                    }
                    function endWritable(stream, state, cb) {
                        state.ending = true;
                        finishMaybe(stream, state);
                        if (cb) {
                            if (state.finished)
                                processNextTick(cb);
                            else
                                stream.once('finish', cb);
                        }
                        state.ended = true;
                        stream.writable = false;
                    }
                    function onCorkedFinish(corkReq, state, err) {
                        var entry = corkReq.entry;
                        corkReq.entry = null;
                        while (entry) {
                            var cb = entry.callback;
                            state.pendingcb--;
                            cb(err);
                            entry = entry.next;
                        }
                        if (state.corkedRequestsFree) {
                            state.corkedRequestsFree.next = corkReq;
                        } else {
                            state.corkedRequestsFree = corkReq;
                        }
                    }
                    Object.defineProperty(Writable.prototype, 'destroyed', {
                        get: function () {
                            if (this._writableState === undefined) {
                                return false;
                            }
                            return this._writableState.destroyed;
                        },
                        set: function (value) {
                            if (!this._writableState) {
                                return;
                            }
                            this._writableState.destroyed = value;
                        }
                    });
                    Writable.prototype.destroy = destroyImpl.destroy;
                    Writable.prototype._undestroy = destroyImpl.undestroy;
                    Writable.prototype._destroy = function (err, cb) {
                        this.end();
                        cb(err);
                    };
                }.call(this, require('_process'), typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}));
            },
            {
                './_stream_duplex': 63,
                './internal/streams/destroy': 69,
                './internal/streams/stream': 70,
                '_process': 61,
                'core-util-is': 10,
                'inherits': 56,
                'process-nextick-args': 60,
                'safe-buffer': 75,
                'util-deprecate': 98
            }
        ],
        68: [
            function (require, module, exports) {
                'use strict';
                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError('Cannot call a class as a function');
                    }
                }
                var Buffer = require('safe-buffer').Buffer;
                function copyBuffer(src, target, offset) {
                    src.copy(target, offset);
                }
                module.exports = function () {
                    function BufferList() {
                        _classCallCheck(this, BufferList);
                        this.head = null;
                        this.tail = null;
                        this.length = 0;
                    }
                    BufferList.prototype.push = function push(v) {
                        var entry = {
                            data: v,
                            next: null
                        };
                        if (this.length > 0)
                            this.tail.next = entry;
                        else
                            this.head = entry;
                        this.tail = entry;
                        ++this.length;
                    };
                    BufferList.prototype.unshift = function unshift(v) {
                        var entry = {
                            data: v,
                            next: this.head
                        };
                        if (this.length === 0)
                            this.tail = entry;
                        this.head = entry;
                        ++this.length;
                    };
                    BufferList.prototype.shift = function shift() {
                        if (this.length === 0)
                            return;
                        var ret = this.head.data;
                        if (this.length === 1)
                            this.head = this.tail = null;
                        else
                            this.head = this.head.next;
                        --this.length;
                        return ret;
                    };
                    BufferList.prototype.clear = function clear() {
                        this.head = this.tail = null;
                        this.length = 0;
                    };
                    BufferList.prototype.join = function join(s) {
                        if (this.length === 0)
                            return '';
                        var p = this.head;
                        var ret = '' + p.data;
                        while (p = p.next) {
                            ret += s + p.data;
                        }
                        return ret;
                    };
                    BufferList.prototype.concat = function concat(n) {
                        if (this.length === 0)
                            return Buffer.alloc(0);
                        if (this.length === 1)
                            return this.head.data;
                        var ret = Buffer.allocUnsafe(n >>> 0);
                        var p = this.head;
                        var i = 0;
                        while (p) {
                            copyBuffer(p.data, ret, i);
                            i += p.data.length;
                            p = p.next;
                        }
                        return ret;
                    };
                    return BufferList;
                }();
            },
            { 'safe-buffer': 75 }
        ],
        69: [
            function (require, module, exports) {
                'use strict';
                var processNextTick = require('process-nextick-args');
                function destroy(err, cb) {
                    var _this = this;
                    var readableDestroyed = this._readableState && this._readableState.destroyed;
                    var writableDestroyed = this._writableState && this._writableState.destroyed;
                    if (readableDestroyed || writableDestroyed) {
                        if (cb) {
                            cb(err);
                        } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
                            processNextTick(emitErrorNT, this, err);
                        }
                        return;
                    }
                    if (this._readableState) {
                        this._readableState.destroyed = true;
                    }
                    if (this._writableState) {
                        this._writableState.destroyed = true;
                    }
                    this._destroy(err || null, function (err) {
                        if (!cb && err) {
                            processNextTick(emitErrorNT, _this, err);
                            if (_this._writableState) {
                                _this._writableState.errorEmitted = true;
                            }
                        } else if (cb) {
                            cb(err);
                        }
                    });
                }
                function undestroy() {
                    if (this._readableState) {
                        this._readableState.destroyed = false;
                        this._readableState.reading = false;
                        this._readableState.ended = false;
                        this._readableState.endEmitted = false;
                    }
                    if (this._writableState) {
                        this._writableState.destroyed = false;
                        this._writableState.ended = false;
                        this._writableState.ending = false;
                        this._writableState.finished = false;
                        this._writableState.errorEmitted = false;
                    }
                }
                function emitErrorNT(self, err) {
                    self.emit('error', err);
                }
                module.exports = {
                    destroy: destroy,
                    undestroy: undestroy
                };
            },
            { 'process-nextick-args': 60 }
        ],
        70: [
            function (require, module, exports) {
                module.exports = require('events').EventEmitter;
            },
            { 'events': 46 }
        ],
        71: [
            function (require, module, exports) {
                module.exports = require('./readable').PassThrough;
            },
            { './readable': 72 }
        ],
        72: [
            function (require, module, exports) {
                exports = module.exports = require('./lib/_stream_readable.js');
                exports.Stream = exports;
                exports.Readable = exports;
                exports.Writable = require('./lib/_stream_writable.js');
                exports.Duplex = require('./lib/_stream_duplex.js');
                exports.Transform = require('./lib/_stream_transform.js');
                exports.PassThrough = require('./lib/_stream_passthrough.js');
            },
            {
                './lib/_stream_duplex.js': 63,
                './lib/_stream_passthrough.js': 64,
                './lib/_stream_readable.js': 65,
                './lib/_stream_transform.js': 66,
                './lib/_stream_writable.js': 67
            }
        ],
        73: [
            function (require, module, exports) {
                module.exports = require('./readable').Transform;
            },
            { './readable': 72 }
        ],
        74: [
            function (require, module, exports) {
                module.exports = require('./lib/_stream_writable.js');
            },
            { './lib/_stream_writable.js': 67 }
        ],
        75: [
            function (require, module, exports) {
                var buffer = require('buffer');
                var Buffer = buffer.Buffer;
                function copyProps(src, dst) {
                    for (var key in src) {
                        dst[key] = src[key];
                    }
                }
                if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
                    module.exports = buffer;
                } else {
                    copyProps(buffer, exports);
                    exports.Buffer = SafeBuffer;
                }
                function SafeBuffer(arg, encodingOrOffset, length) {
                    return Buffer(arg, encodingOrOffset, length);
                }
                copyProps(Buffer, SafeBuffer);
                SafeBuffer.from = function (arg, encodingOrOffset, length) {
                    if (typeof arg === 'number') {
                        throw new TypeError('Argument must not be a number');
                    }
                    return Buffer(arg, encodingOrOffset, length);
                };
                SafeBuffer.alloc = function (size, fill, encoding) {
                    if (typeof size !== 'number') {
                        throw new TypeError('Argument must be a number');
                    }
                    var buf = Buffer(size);
                    if (fill !== undefined) {
                        if (typeof encoding === 'string') {
                            buf.fill(fill, encoding);
                        } else {
                            buf.fill(fill);
                        }
                    } else {
                        buf.fill(0);
                    }
                    return buf;
                };
                SafeBuffer.allocUnsafe = function (size) {
                    if (typeof size !== 'number') {
                        throw new TypeError('Argument must be a number');
                    }
                    return Buffer(size);
                };
                SafeBuffer.allocUnsafeSlow = function (size) {
                    if (typeof size !== 'number') {
                        throw new TypeError('Argument must be a number');
                    }
                    return buffer.SlowBuffer(size);
                };
            },
            { 'buffer': 8 }
        ],
        76: [
            function (require, module, exports) {
                (function (Buffer) {
                    function Hash(blockSize, finalSize) {
                        this._block = new Buffer(blockSize);
                        this._finalSize = finalSize;
                        this._blockSize = blockSize;
                        this._len = 0;
                        this._s = 0;
                    }
                    Hash.prototype.update = function (data, enc) {
                        if (typeof data === 'string') {
                            enc = enc || 'utf8';
                            data = new Buffer(data, enc);
                        }
                        var l = this._len += data.length;
                        var s = this._s || 0;
                        var f = 0;
                        var buffer = this._block;
                        while (s < l) {
                            var t = Math.min(data.length, f + this._blockSize - s % this._blockSize);
                            var ch = t - f;
                            for (var i = 0; i < ch; i++) {
                                buffer[s % this._blockSize + i] = data[i + f];
                            }
                            s += ch;
                            f += ch;
                            if (s % this._blockSize === 0) {
                                this._update(buffer);
                            }
                        }
                        this._s = s;
                        return this;
                    };
                    Hash.prototype.digest = function (enc) {
                        var l = this._len * 8;
                        this._block[this._len % this._blockSize] = 128;
                        this._block.fill(0, this._len % this._blockSize + 1);
                        if (l % (this._blockSize * 8) >= this._finalSize * 8) {
                            this._update(this._block);
                            this._block.fill(0);
                        }
                        this._block.writeInt32BE(l, this._blockSize - 4);
                        var hash = this._update(this._block) || this._hash();
                        return enc ? hash.toString(enc) : hash;
                    };
                    Hash.prototype._update = function () {
                        throw new Error('_update must be implemented by subclass');
                    };
                    module.exports = Hash;
                }.call(this, require('buffer').Buffer));
            },
            { 'buffer': 8 }
        ],
        77: [
            function (require, module, exports) {
                var exports = module.exports = function SHA(algorithm) {
                    algorithm = algorithm.toLowerCase();
                    var Algorithm = exports[algorithm];
                    if (!Algorithm)
                        throw new Error(algorithm + ' is not supported (we accept pull requests)');
                    return new Algorithm();
                };
                exports.sha = require('./sha');
                exports.sha1 = require('./sha1');
                exports.sha224 = require('./sha224');
                exports.sha256 = require('./sha256');
                exports.sha384 = require('./sha384');
                exports.sha512 = require('./sha512');
            },
            {
                './sha': 78,
                './sha1': 79,
                './sha224': 80,
                './sha256': 81,
                './sha384': 82,
                './sha512': 83
            }
        ],
        78: [
            function (require, module, exports) {
                (function (Buffer) {
                    var inherits = require('inherits');
                    var Hash = require('./hash');
                    var K = [
                        1518500249,
                        1859775393,
                        2400959708 | 0,
                        3395469782 | 0
                    ];
                    var W = new Array(80);
                    function Sha() {
                        this.init();
                        this._w = W;
                        Hash.call(this, 64, 56);
                    }
                    inherits(Sha, Hash);
                    Sha.prototype.init = function () {
                        this._a = 1732584193;
                        this._b = 4023233417;
                        this._c = 2562383102;
                        this._d = 271733878;
                        this._e = 3285377520;
                        return this;
                    };
                    function rotl5(num) {
                        return num << 5 | num >>> 27;
                    }
                    function rotl30(num) {
                        return num << 30 | num >>> 2;
                    }
                    function ft(s, b, c, d) {
                        if (s === 0)
                            return b & c | ~b & d;
                        if (s === 2)
                            return b & c | b & d | c & d;
                        return b ^ c ^ d;
                    }
                    Sha.prototype._update = function (M) {
                        var W = this._w;
                        var a = this._a | 0;
                        var b = this._b | 0;
                        var c = this._c | 0;
                        var d = this._d | 0;
                        var e = this._e | 0;
                        for (var i = 0; i < 16; ++i)
                            W[i] = M.readInt32BE(i * 4);
                        for (; i < 80; ++i)
                            W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                        for (var j = 0; j < 80; ++j) {
                            var s = ~~(j / 20);
                            var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
                            e = d;
                            d = c;
                            c = rotl30(b);
                            b = a;
                            a = t;
                        }
                        this._a = a + this._a | 0;
                        this._b = b + this._b | 0;
                        this._c = c + this._c | 0;
                        this._d = d + this._d | 0;
                        this._e = e + this._e | 0;
                    };
                    Sha.prototype._hash = function () {
                        var H = new Buffer(20);
                        H.writeInt32BE(this._a | 0, 0);
                        H.writeInt32BE(this._b | 0, 4);
                        H.writeInt32BE(this._c | 0, 8);
                        H.writeInt32BE(this._d | 0, 12);
                        H.writeInt32BE(this._e | 0, 16);
                        return H;
                    };
                    module.exports = Sha;
                }.call(this, require('buffer').Buffer));
            },
            {
                './hash': 76,
                'buffer': 8,
                'inherits': 56
            }
        ],
        79: [
            function (require, module, exports) {
                (function (Buffer) {
                    var inherits = require('inherits');
                    var Hash = require('./hash');
                    var K = [
                        1518500249,
                        1859775393,
                        2400959708 | 0,
                        3395469782 | 0
                    ];
                    var W = new Array(80);
                    function Sha1() {
                        this.init();
                        this._w = W;
                        Hash.call(this, 64, 56);
                    }
                    inherits(Sha1, Hash);
                    Sha1.prototype.init = function () {
                        this._a = 1732584193;
                        this._b = 4023233417;
                        this._c = 2562383102;
                        this._d = 271733878;
                        this._e = 3285377520;
                        return this;
                    };
                    function rotl1(num) {
                        return num << 1 | num >>> 31;
                    }
                    function rotl5(num) {
                        return num << 5 | num >>> 27;
                    }
                    function rotl30(num) {
                        return num << 30 | num >>> 2;
                    }
                    function ft(s, b, c, d) {
                        if (s === 0)
                            return b & c | ~b & d;
                        if (s === 2)
                            return b & c | b & d | c & d;
                        return b ^ c ^ d;
                    }
                    Sha1.prototype._update = function (M) {
                        var W = this._w;
                        var a = this._a | 0;
                        var b = this._b | 0;
                        var c = this._c | 0;
                        var d = this._d | 0;
                        var e = this._e | 0;
                        for (var i = 0; i < 16; ++i)
                            W[i] = M.readInt32BE(i * 4);
                        for (; i < 80; ++i)
                            W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
                        for (var j = 0; j < 80; ++j) {
                            var s = ~~(j / 20);
                            var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
                            e = d;
                            d = c;
                            c = rotl30(b);
                            b = a;
                            a = t;
                        }
                        this._a = a + this._a | 0;
                        this._b = b + this._b | 0;
                        this._c = c + this._c | 0;
                        this._d = d + this._d | 0;
                        this._e = e + this._e | 0;
                    };
                    Sha1.prototype._hash = function () {
                        var H = new Buffer(20);
                        H.writeInt32BE(this._a | 0, 0);
                        H.writeInt32BE(this._b | 0, 4);
                        H.writeInt32BE(this._c | 0, 8);
                        H.writeInt32BE(this._d | 0, 12);
                        H.writeInt32BE(this._e | 0, 16);
                        return H;
                    };
                    module.exports = Sha1;
                }.call(this, require('buffer').Buffer));
            },
            {
                './hash': 76,
                'buffer': 8,
                'inherits': 56
            }
        ],
        80: [
            function (require, module, exports) {
                (function (Buffer) {
                    var inherits = require('inherits');
                    var Sha256 = require('./sha256');
                    var Hash = require('./hash');
                    var W = new Array(64);
                    function Sha224() {
                        this.init();
                        this._w = W;
                        Hash.call(this, 64, 56);
                    }
                    inherits(Sha224, Sha256);
                    Sha224.prototype.init = function () {
                        this._a = 3238371032;
                        this._b = 914150663;
                        this._c = 812702999;
                        this._d = 4144912697;
                        this._e = 4290775857;
                        this._f = 1750603025;
                        this._g = 1694076839;
                        this._h = 3204075428;
                        return this;
                    };
                    Sha224.prototype._hash = function () {
                        var H = new Buffer(28);
                        H.writeInt32BE(this._a, 0);
                        H.writeInt32BE(this._b, 4);
                        H.writeInt32BE(this._c, 8);
                        H.writeInt32BE(this._d, 12);
                        H.writeInt32BE(this._e, 16);
                        H.writeInt32BE(this._f, 20);
                        H.writeInt32BE(this._g, 24);
                        return H;
                    };
                    module.exports = Sha224;
                }.call(this, require('buffer').Buffer));
            },
            {
                './hash': 76,
                './sha256': 81,
                'buffer': 8,
                'inherits': 56
            }
        ],
        81: [
            function (require, module, exports) {
                (function (Buffer) {
                    var inherits = require('inherits');
                    var Hash = require('./hash');
                    var K = [
                        1116352408,
                        1899447441,
                        3049323471,
                        3921009573,
                        961987163,
                        1508970993,
                        2453635748,
                        2870763221,
                        3624381080,
                        310598401,
                        607225278,
                        1426881987,
                        1925078388,
                        2162078206,
                        2614888103,
                        3248222580,
                        3835390401,
                        4022224774,
                        264347078,
                        604807628,
                        770255983,
                        1249150122,
                        1555081692,
                        1996064986,
                        2554220882,
                        2821834349,
                        2952996808,
                        3210313671,
                        3336571891,
                        3584528711,
                        113926993,
                        338241895,
                        666307205,
                        773529912,
                        1294757372,
                        1396182291,
                        1695183700,
                        1986661051,
                        2177026350,
                        2456956037,
                        2730485921,
                        2820302411,
                        3259730800,
                        3345764771,
                        3516065817,
                        3600352804,
                        4094571909,
                        275423344,
                        430227734,
                        506948616,
                        659060556,
                        883997877,
                        958139571,
                        1322822218,
                        1537002063,
                        1747873779,
                        1955562222,
                        2024104815,
                        2227730452,
                        2361852424,
                        2428436474,
                        2756734187,
                        3204031479,
                        3329325298
                    ];
                    var W = new Array(64);
                    function Sha256() {
                        this.init();
                        this._w = W;
                        Hash.call(this, 64, 56);
                    }
                    inherits(Sha256, Hash);
                    Sha256.prototype.init = function () {
                        this._a = 1779033703;
                        this._b = 3144134277;
                        this._c = 1013904242;
                        this._d = 2773480762;
                        this._e = 1359893119;
                        this._f = 2600822924;
                        this._g = 528734635;
                        this._h = 1541459225;
                        return this;
                    };
                    function ch(x, y, z) {
                        return z ^ x & (y ^ z);
                    }
                    function maj(x, y, z) {
                        return x & y | z & (x | y);
                    }
                    function sigma0(x) {
                        return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
                    }
                    function sigma1(x) {
                        return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
                    }
                    function gamma0(x) {
                        return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
                    }
                    function gamma1(x) {
                        return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
                    }
                    Sha256.prototype._update = function (M) {
                        var W = this._w;
                        var a = this._a | 0;
                        var b = this._b | 0;
                        var c = this._c | 0;
                        var d = this._d | 0;
                        var e = this._e | 0;
                        var f = this._f | 0;
                        var g = this._g | 0;
                        var h = this._h | 0;
                        for (var i = 0; i < 16; ++i)
                            W[i] = M.readInt32BE(i * 4);
                        for (; i < 64; ++i)
                            W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
                        for (var j = 0; j < 64; ++j) {
                            var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
                            var T2 = sigma0(a) + maj(a, b, c) | 0;
                            h = g;
                            g = f;
                            f = e;
                            e = d + T1 | 0;
                            d = c;
                            c = b;
                            b = a;
                            a = T1 + T2 | 0;
                        }
                        this._a = a + this._a | 0;
                        this._b = b + this._b | 0;
                        this._c = c + this._c | 0;
                        this._d = d + this._d | 0;
                        this._e = e + this._e | 0;
                        this._f = f + this._f | 0;
                        this._g = g + this._g | 0;
                        this._h = h + this._h | 0;
                    };
                    Sha256.prototype._hash = function () {
                        var H = new Buffer(32);
                        H.writeInt32BE(this._a, 0);
                        H.writeInt32BE(this._b, 4);
                        H.writeInt32BE(this._c, 8);
                        H.writeInt32BE(this._d, 12);
                        H.writeInt32BE(this._e, 16);
                        H.writeInt32BE(this._f, 20);
                        H.writeInt32BE(this._g, 24);
                        H.writeInt32BE(this._h, 28);
                        return H;
                    };
                    module.exports = Sha256;
                }.call(this, require('buffer').Buffer));
            },
            {
                './hash': 76,
                'buffer': 8,
                'inherits': 56
            }
        ],
        82: [
            function (require, module, exports) {
                (function (Buffer) {
                    var inherits = require('inherits');
                    var SHA512 = require('./sha512');
                    var Hash = require('./hash');
                    var W = new Array(160);
                    function Sha384() {
                        this.init();
                        this._w = W;
                        Hash.call(this, 128, 112);
                    }
                    inherits(Sha384, SHA512);
                    Sha384.prototype.init = function () {
                        this._ah = 3418070365;
                        this._bh = 1654270250;
                        this._ch = 2438529370;
                        this._dh = 355462360;
                        this._eh = 1731405415;
                        this._fh = 2394180231;
                        this._gh = 3675008525;
                        this._hh = 1203062813;
                        this._al = 3238371032;
                        this._bl = 914150663;
                        this._cl = 812702999;
                        this._dl = 4144912697;
                        this._el = 4290775857;
                        this._fl = 1750603025;
                        this._gl = 1694076839;
                        this._hl = 3204075428;
                        return this;
                    };
                    Sha384.prototype._hash = function () {
                        var H = new Buffer(48);
                        function writeInt64BE(h, l, offset) {
                            H.writeInt32BE(h, offset);
                            H.writeInt32BE(l, offset + 4);
                        }
                        writeInt64BE(this._ah, this._al, 0);
                        writeInt64BE(this._bh, this._bl, 8);
                        writeInt64BE(this._ch, this._cl, 16);
                        writeInt64BE(this._dh, this._dl, 24);
                        writeInt64BE(this._eh, this._el, 32);
                        writeInt64BE(this._fh, this._fl, 40);
                        return H;
                    };
                    module.exports = Sha384;
                }.call(this, require('buffer').Buffer));
            },
            {
                './hash': 76,
                './sha512': 83,
                'buffer': 8,
                'inherits': 56
            }
        ],
        83: [
            function (require, module, exports) {
                (function (Buffer) {
                    var inherits = require('inherits');
                    var Hash = require('./hash');
                    var K = [
                        1116352408,
                        3609767458,
                        1899447441,
                        602891725,
                        3049323471,
                        3964484399,
                        3921009573,
                        2173295548,
                        961987163,
                        4081628472,
                        1508970993,
                        3053834265,
                        2453635748,
                        2937671579,
                        2870763221,
                        3664609560,
                        3624381080,
                        2734883394,
                        310598401,
                        1164996542,
                        607225278,
                        1323610764,
                        1426881987,
                        3590304994,
                        1925078388,
                        4068182383,
                        2162078206,
                        991336113,
                        2614888103,
                        633803317,
                        3248222580,
                        3479774868,
                        3835390401,
                        2666613458,
                        4022224774,
                        944711139,
                        264347078,
                        2341262773,
                        604807628,
                        2007800933,
                        770255983,
                        1495990901,
                        1249150122,
                        1856431235,
                        1555081692,
                        3175218132,
                        1996064986,
                        2198950837,
                        2554220882,
                        3999719339,
                        2821834349,
                        766784016,
                        2952996808,
                        2566594879,
                        3210313671,
                        3203337956,
                        3336571891,
                        1034457026,
                        3584528711,
                        2466948901,
                        113926993,
                        3758326383,
                        338241895,
                        168717936,
                        666307205,
                        1188179964,
                        773529912,
                        1546045734,
                        1294757372,
                        1522805485,
                        1396182291,
                        2643833823,
                        1695183700,
                        2343527390,
                        1986661051,
                        1014477480,
                        2177026350,
                        1206759142,
                        2456956037,
                        344077627,
                        2730485921,
                        1290863460,
                        2820302411,
                        3158454273,
                        3259730800,
                        3505952657,
                        3345764771,
                        106217008,
                        3516065817,
                        3606008344,
                        3600352804,
                        1432725776,
                        4094571909,
                        1467031594,
                        275423344,
                        851169720,
                        430227734,
                        3100823752,
                        506948616,
                        1363258195,
                        659060556,
                        3750685593,
                        883997877,
                        3785050280,
                        958139571,
                        3318307427,
                        1322822218,
                        3812723403,
                        1537002063,
                        2003034995,
                        1747873779,
                        3602036899,
                        1955562222,
                        1575990012,
                        2024104815,
                        1125592928,
                        2227730452,
                        2716904306,
                        2361852424,
                        442776044,
                        2428436474,
                        593698344,
                        2756734187,
                        3733110249,
                        3204031479,
                        2999351573,
                        3329325298,
                        3815920427,
                        3391569614,
                        3928383900,
                        3515267271,
                        566280711,
                        3940187606,
                        3454069534,
                        4118630271,
                        4000239992,
                        116418474,
                        1914138554,
                        174292421,
                        2731055270,
                        289380356,
                        3203993006,
                        460393269,
                        320620315,
                        685471733,
                        587496836,
                        852142971,
                        1086792851,
                        1017036298,
                        365543100,
                        1126000580,
                        2618297676,
                        1288033470,
                        3409855158,
                        1501505948,
                        4234509866,
                        1607167915,
                        987167468,
                        1816402316,
                        1246189591
                    ];
                    var W = new Array(160);
                    function Sha512() {
                        this.init();
                        this._w = W;
                        Hash.call(this, 128, 112);
                    }
                    inherits(Sha512, Hash);
                    Sha512.prototype.init = function () {
                        this._ah = 1779033703;
                        this._bh = 3144134277;
                        this._ch = 1013904242;
                        this._dh = 2773480762;
                        this._eh = 1359893119;
                        this._fh = 2600822924;
                        this._gh = 528734635;
                        this._hh = 1541459225;
                        this._al = 4089235720;
                        this._bl = 2227873595;
                        this._cl = 4271175723;
                        this._dl = 1595750129;
                        this._el = 2917565137;
                        this._fl = 725511199;
                        this._gl = 4215389547;
                        this._hl = 327033209;
                        return this;
                    };
                    function Ch(x, y, z) {
                        return z ^ x & (y ^ z);
                    }
                    function maj(x, y, z) {
                        return x & y | z & (x | y);
                    }
                    function sigma0(x, xl) {
                        return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
                    }
                    function sigma1(x, xl) {
                        return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
                    }
                    function Gamma0(x, xl) {
                        return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
                    }
                    function Gamma0l(x, xl) {
                        return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
                    }
                    function Gamma1(x, xl) {
                        return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
                    }
                    function Gamma1l(x, xl) {
                        return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
                    }
                    function getCarry(a, b) {
                        return a >>> 0 < b >>> 0 ? 1 : 0;
                    }
                    Sha512.prototype._update = function (M) {
                        var W = this._w;
                        var ah = this._ah | 0;
                        var bh = this._bh | 0;
                        var ch = this._ch | 0;
                        var dh = this._dh | 0;
                        var eh = this._eh | 0;
                        var fh = this._fh | 0;
                        var gh = this._gh | 0;
                        var hh = this._hh | 0;
                        var al = this._al | 0;
                        var bl = this._bl | 0;
                        var cl = this._cl | 0;
                        var dl = this._dl | 0;
                        var el = this._el | 0;
                        var fl = this._fl | 0;
                        var gl = this._gl | 0;
                        var hl = this._hl | 0;
                        for (var i = 0; i < 32; i += 2) {
                            W[i] = M.readInt32BE(i * 4);
                            W[i + 1] = M.readInt32BE(i * 4 + 4);
                        }
                        for (; i < 160; i += 2) {
                            var xh = W[i - 15 * 2];
                            var xl = W[i - 15 * 2 + 1];
                            var gamma0 = Gamma0(xh, xl);
                            var gamma0l = Gamma0l(xl, xh);
                            xh = W[i - 2 * 2];
                            xl = W[i - 2 * 2 + 1];
                            var gamma1 = Gamma1(xh, xl);
                            var gamma1l = Gamma1l(xl, xh);
                            var Wi7h = W[i - 7 * 2];
                            var Wi7l = W[i - 7 * 2 + 1];
                            var Wi16h = W[i - 16 * 2];
                            var Wi16l = W[i - 16 * 2 + 1];
                            var Wil = gamma0l + Wi7l | 0;
                            var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
                            Wil = Wil + gamma1l | 0;
                            Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
                            Wil = Wil + Wi16l | 0;
                            Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
                            W[i] = Wih;
                            W[i + 1] = Wil;
                        }
                        for (var j = 0; j < 160; j += 2) {
                            Wih = W[j];
                            Wil = W[j + 1];
                            var majh = maj(ah, bh, ch);
                            var majl = maj(al, bl, cl);
                            var sigma0h = sigma0(ah, al);
                            var sigma0l = sigma0(al, ah);
                            var sigma1h = sigma1(eh, el);
                            var sigma1l = sigma1(el, eh);
                            var Kih = K[j];
                            var Kil = K[j + 1];
                            var chh = Ch(eh, fh, gh);
                            var chl = Ch(el, fl, gl);
                            var t1l = hl + sigma1l | 0;
                            var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
                            t1l = t1l + chl | 0;
                            t1h = t1h + chh + getCarry(t1l, chl) | 0;
                            t1l = t1l + Kil | 0;
                            t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
                            t1l = t1l + Wil | 0;
                            t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
                            var t2l = sigma0l + majl | 0;
                            var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
                            hh = gh;
                            hl = gl;
                            gh = fh;
                            gl = fl;
                            fh = eh;
                            fl = el;
                            el = dl + t1l | 0;
                            eh = dh + t1h + getCarry(el, dl) | 0;
                            dh = ch;
                            dl = cl;
                            ch = bh;
                            cl = bl;
                            bh = ah;
                            bl = al;
                            al = t1l + t2l | 0;
                            ah = t1h + t2h + getCarry(al, t1l) | 0;
                        }
                        this._al = this._al + al | 0;
                        this._bl = this._bl + bl | 0;
                        this._cl = this._cl + cl | 0;
                        this._dl = this._dl + dl | 0;
                        this._el = this._el + el | 0;
                        this._fl = this._fl + fl | 0;
                        this._gl = this._gl + gl | 0;
                        this._hl = this._hl + hl | 0;
                        this._ah = this._ah + ah + getCarry(this._al, al) | 0;
                        this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
                        this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
                        this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
                        this._eh = this._eh + eh + getCarry(this._el, el) | 0;
                        this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
                        this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
                        this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
                    };
                    Sha512.prototype._hash = function () {
                        var H = new Buffer(64);
                        function writeInt64BE(h, l, offset) {
                            H.writeInt32BE(h, offset);
                            H.writeInt32BE(l, offset + 4);
                        }
                        writeInt64BE(this._ah, this._al, 0);
                        writeInt64BE(this._bh, this._bl, 8);
                        writeInt64BE(this._ch, this._cl, 16);
                        writeInt64BE(this._dh, this._dl, 24);
                        writeInt64BE(this._eh, this._el, 32);
                        writeInt64BE(this._fh, this._fl, 40);
                        writeInt64BE(this._gh, this._gl, 48);
                        writeInt64BE(this._hh, this._hl, 56);
                        return H;
                    };
                    module.exports = Sha512;
                }.call(this, require('buffer').Buffer));
            },
            {
                './hash': 76,
                'buffer': 8,
                'inherits': 56
            }
        ],
        84: [
            function (require, module, exports) {
                exports.SourceMapGenerator = require('./source-map/source-map-generator').SourceMapGenerator;
                exports.SourceMapConsumer = require('./source-map/source-map-consumer').SourceMapConsumer;
                exports.SourceNode = require('./source-map/source-node').SourceNode;
            },
            {
                './source-map/source-map-consumer': 92,
                './source-map/source-map-generator': 93,
                './source-map/source-node': 94
            }
        ],
        85: [
            function (require, module, exports) {
                if (typeof define !== 'function') {
                    var define = require('amdefine')(module, require);
                }
                define(function (require, exports, module) {
                    var util = require('./util');
                    function ArraySet() {
                        this._array = [];
                        this._set = {};
                    }
                    ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
                        var set = new ArraySet();
                        for (var i = 0, len = aArray.length; i < len; i++) {
                            set.add(aArray[i], aAllowDuplicates);
                        }
                        return set;
                    };
                    ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
                        var isDuplicate = this.has(aStr);
                        var idx = this._array.length;
                        if (!isDuplicate || aAllowDuplicates) {
                            this._array.push(aStr);
                        }
                        if (!isDuplicate) {
                            this._set[util.toSetString(aStr)] = idx;
                        }
                    };
                    ArraySet.prototype.has = function ArraySet_has(aStr) {
                        return Object.prototype.hasOwnProperty.call(this._set, util.toSetString(aStr));
                    };
                    ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
                        if (this.has(aStr)) {
                            return this._set[util.toSetString(aStr)];
                        }
                        throw new Error('"' + aStr + '" is not in the set.');
                    };
                    ArraySet.prototype.at = function ArraySet_at(aIdx) {
                        if (aIdx >= 0 && aIdx < this._array.length) {
                            return this._array[aIdx];
                        }
                        throw new Error('No element indexed by ' + aIdx);
                    };
                    ArraySet.prototype.toArray = function ArraySet_toArray() {
                        return this._array.slice();
                    };
                    exports.ArraySet = ArraySet;
                });
            },
            {
                './util': 95,
                'amdefine': 4
            }
        ],
        86: [
            function (require, module, exports) {
                if (typeof define !== 'function') {
                    var define = require('amdefine')(module, require);
                }
                define(function (require, exports, module) {
                    var base64 = require('./base64');
                    var VLQ_BASE_SHIFT = 5;
                    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
                    var VLQ_BASE_MASK = VLQ_BASE - 1;
                    var VLQ_CONTINUATION_BIT = VLQ_BASE;
                    function toVLQSigned(aValue) {
                        return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
                    }
                    function fromVLQSigned(aValue) {
                        var isNegative = (aValue & 1) === 1;
                        var shifted = aValue >> 1;
                        return isNegative ? -shifted : shifted;
                    }
                    exports.encode = function base64VLQ_encode(aValue) {
                        var encoded = '';
                        var digit;
                        var vlq = toVLQSigned(aValue);
                        do {
                            digit = vlq & VLQ_BASE_MASK;
                            vlq >>>= VLQ_BASE_SHIFT;
                            if (vlq > 0) {
                                digit |= VLQ_CONTINUATION_BIT;
                            }
                            encoded += base64.encode(digit);
                        } while (vlq > 0);
                        return encoded;
                    };
                    exports.decode = function base64VLQ_decode(aStr, aOutParam) {
                        var i = 0;
                        var strLen = aStr.length;
                        var result = 0;
                        var shift = 0;
                        var continuation, digit;
                        do {
                            if (i >= strLen) {
                                throw new Error('Expected more digits in base 64 VLQ value.');
                            }
                            digit = base64.decode(aStr.charAt(i++));
                            continuation = !!(digit & VLQ_CONTINUATION_BIT);
                            digit &= VLQ_BASE_MASK;
                            result = result + (digit << shift);
                            shift += VLQ_BASE_SHIFT;
                        } while (continuation);
                        aOutParam.value = fromVLQSigned(result);
                        aOutParam.rest = aStr.slice(i);
                    };
                });
            },
            {
                './base64': 87,
                'amdefine': 4
            }
        ],
        87: [
            function (require, module, exports) {
                if (typeof define !== 'function') {
                    var define = require('amdefine')(module, require);
                }
                define(function (require, exports, module) {
                    var charToIntMap = {};
                    var intToCharMap = {};
                    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('').forEach(function (ch, index) {
                        charToIntMap[ch] = index;
                        intToCharMap[index] = ch;
                    });
                    exports.encode = function base64_encode(aNumber) {
                        if (aNumber in intToCharMap) {
                            return intToCharMap[aNumber];
                        }
                        throw new TypeError('Must be between 0 and 63: ' + aNumber);
                    };
                    exports.decode = function base64_decode(aChar) {
                        if (aChar in charToIntMap) {
                            return charToIntMap[aChar];
                        }
                        throw new TypeError('Not a valid base 64 digit: ' + aChar);
                    };
                });
            },
            { 'amdefine': 4 }
        ],
        88: [
            function (require, module, exports) {
                if (typeof define !== 'function') {
                    var define = require('amdefine')(module, require);
                }
                define(function (require, exports, module) {
                    var util = require('./util');
                    var binarySearch = require('./binary-search');
                    var ArraySet = require('./array-set').ArraySet;
                    var base64VLQ = require('./base64-vlq');
                    var SourceMapConsumer = require('./source-map-consumer').SourceMapConsumer;
                    function BasicSourceMapConsumer(aSourceMap) {
                        var sourceMap = aSourceMap;
                        if (typeof aSourceMap === 'string') {
                            sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
                        }
                        var version = util.getArg(sourceMap, 'version');
                        var sources = util.getArg(sourceMap, 'sources');
                        var names = util.getArg(sourceMap, 'names', []);
                        var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
                        var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
                        var mappings = util.getArg(sourceMap, 'mappings');
                        var file = util.getArg(sourceMap, 'file', null);
                        if (version != this._version) {
                            throw new Error('Unsupported version: ' + version);
                        }
                        sources = sources.map(util.normalize);
                        this._names = ArraySet.fromArray(names, true);
                        this._sources = ArraySet.fromArray(sources, true);
                        this.sourceRoot = sourceRoot;
                        this.sourcesContent = sourcesContent;
                        this._mappings = mappings;
                        this.file = file;
                    }
                    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
                    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
                    BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap) {
                        var smc = Object.create(BasicSourceMapConsumer.prototype);
                        smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
                        smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
                        smc.sourceRoot = aSourceMap._sourceRoot;
                        smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
                        smc.file = aSourceMap._file;
                        smc.__generatedMappings = aSourceMap._mappings.toArray().slice();
                        smc.__originalMappings = aSourceMap._mappings.toArray().slice().sort(util.compareByOriginalPositions);
                        return smc;
                    };
                    BasicSourceMapConsumer.prototype._version = 3;
                    Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
                        get: function () {
                            return this._sources.toArray().map(function (s) {
                                return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
                            }, this);
                        }
                    });
                    BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
                        var generatedLine = 1;
                        var previousGeneratedColumn = 0;
                        var previousOriginalLine = 0;
                        var previousOriginalColumn = 0;
                        var previousSource = 0;
                        var previousName = 0;
                        var str = aStr;
                        var temp = {};
                        var mapping;
                        while (str.length > 0) {
                            if (str.charAt(0) === ';') {
                                generatedLine++;
                                str = str.slice(1);
                                previousGeneratedColumn = 0;
                            } else if (str.charAt(0) === ',') {
                                str = str.slice(1);
                            } else {
                                mapping = {};
                                mapping.generatedLine = generatedLine;
                                base64VLQ.decode(str, temp);
                                mapping.generatedColumn = previousGeneratedColumn + temp.value;
                                previousGeneratedColumn = mapping.generatedColumn;
                                str = temp.rest;
                                if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
                                    base64VLQ.decode(str, temp);
                                    mapping.source = this._sources.at(previousSource + temp.value);
                                    previousSource += temp.value;
                                    str = temp.rest;
                                    if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
                                        throw new Error('Found a source, but no line and column');
                                    }
                                    base64VLQ.decode(str, temp);
                                    mapping.originalLine = previousOriginalLine + temp.value;
                                    previousOriginalLine = mapping.originalLine;
                                    mapping.originalLine += 1;
                                    str = temp.rest;
                                    if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
                                        throw new Error('Found a source and line, but no column');
                                    }
                                    base64VLQ.decode(str, temp);
                                    mapping.originalColumn = previousOriginalColumn + temp.value;
                                    previousOriginalColumn = mapping.originalColumn;
                                    str = temp.rest;
                                    if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
                                        base64VLQ.decode(str, temp);
                                        mapping.name = this._names.at(previousName + temp.value);
                                        previousName += temp.value;
                                        str = temp.rest;
                                    }
                                }
                                this.__generatedMappings.push(mapping);
                                if (typeof mapping.originalLine === 'number') {
                                    this.__originalMappings.push(mapping);
                                }
                            }
                        }
                        this.__generatedMappings.sort(util.compareByGeneratedPositions);
                        this.__originalMappings.sort(util.compareByOriginalPositions);
                    };
                    BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator) {
                        if (aNeedle[aLineName] <= 0) {
                            throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);
                        }
                        if (aNeedle[aColumnName] < 0) {
                            throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);
                        }
                        return binarySearch.search(aNeedle, aMappings, aComparator);
                    };
                    BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
                        for (var index = 0; index < this._generatedMappings.length; ++index) {
                            var mapping = this._generatedMappings[index];
                            if (index + 1 < this._generatedMappings.length) {
                                var nextMapping = this._generatedMappings[index + 1];
                                if (mapping.generatedLine === nextMapping.generatedLine) {
                                    mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
                                    continue;
                                }
                            }
                            mapping.lastGeneratedColumn = Infinity;
                        }
                    };
                    BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
                        var needle = {
                            generatedLine: util.getArg(aArgs, 'line'),
                            generatedColumn: util.getArg(aArgs, 'column')
                        };
                        var index = this._findMapping(needle, this._generatedMappings, 'generatedLine', 'generatedColumn', util.compareByGeneratedPositions);
                        if (index >= 0) {
                            var mapping = this._generatedMappings[index];
                            if (mapping.generatedLine === needle.generatedLine) {
                                var source = util.getArg(mapping, 'source', null);
                                if (source != null && this.sourceRoot != null) {
                                    source = util.join(this.sourceRoot, source);
                                }
                                return {
                                    source: source,
                                    line: util.getArg(mapping, 'originalLine', null),
                                    column: util.getArg(mapping, 'originalColumn', null),
                                    name: util.getArg(mapping, 'name', null)
                                };
                            }
                        }
                        return {
                            source: null,
                            line: null,
                            column: null,
                            name: null
                        };
                    };
                    BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
                        if (!this.sourcesContent) {
                            return null;
                        }
                        if (this.sourceRoot != null) {
                            aSource = util.relative(this.sourceRoot, aSource);
                        }
                        if (this._sources.has(aSource)) {
                            return this.sourcesContent[this._sources.indexOf(aSource)];
                        }
                        var url;
                        if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
                            var fileUriAbsPath = aSource.replace(/^file:\/\//, '');
                            if (url.scheme == 'file' && this._sources.has(fileUriAbsPath)) {
                                return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
                            }
                            if ((!url.path || url.path == '/') && this._sources.has('/' + aSource)) {
                                return this.sourcesContent[this._sources.indexOf('/' + aSource)];
                            }
                        }
                        if (nullOnMissing) {
                            return null;
                        } else {
                            throw new Error('"' + aSource + '" is not in the SourceMap.');
                        }
                    };
                    BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
                        var needle = {
                            source: util.getArg(aArgs, 'source'),
                            originalLine: util.getArg(aArgs, 'line'),
                            originalColumn: util.getArg(aArgs, 'column')
                        };
                        if (this.sourceRoot != null) {
                            needle.source = util.relative(this.sourceRoot, needle.source);
                        }
                        var index = this._findMapping(needle, this._originalMappings, 'originalLine', 'originalColumn', util.compareByOriginalPositions);
                        if (index >= 0) {
                            var mapping = this._originalMappings[index];
                            return {
                                line: util.getArg(mapping, 'generatedLine', null),
                                column: util.getArg(mapping, 'generatedColumn', null),
                                lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                            };
                        }
                        return {
                            line: null,
                            column: null,
                            lastColumn: null
                        };
                    };
                    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
                });
            },
            {
                './array-set': 85,
                './base64-vlq': 86,
                './binary-search': 89,
                './source-map-consumer': 92,
                './util': 95,
                'amdefine': 4
            }
        ],
        89: [
            function (require, module, exports) {
                if (typeof define !== 'function') {
                    var define = require('amdefine')(module, require);
                }
                define(function (require, exports, module) {
                    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare) {
                        var mid = Math.floor((aHigh - aLow) / 2) + aLow;
                        var cmp = aCompare(aNeedle, aHaystack[mid], true);
                        if (cmp === 0) {
                            return mid;
                        } else if (cmp > 0) {
                            if (aHigh - mid > 1) {
                                return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare);
                            }
                            return mid;
                        } else {
                            if (mid - aLow > 1) {
                                return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare);
                            }
                            return aLow < 0 ? -1 : aLow;
                        }
                    }
                    exports.search = function search(aNeedle, aHaystack, aCompare) {
                        if (aHaystack.length === 0) {
                            return -1;
                        }
                        return recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare);
                    };
                });
            },
            { 'amdefine': 4 }
        ],
        90: [
            function (require, module, exports) {
                if (typeof define !== 'function') {
                    var define = require('amdefine')(module, require);
                }
                define(function (require, exports, module) {
                    var util = require('./util');
                    var binarySearch = require('./binary-search');
                    var SourceMapConsumer = require('./source-map-consumer').SourceMapConsumer;
                    var BasicSourceMapConsumer = require('./basic-source-map-consumer').BasicSourceMapConsumer;
                    function IndexedSourceMapConsumer(aSourceMap) {
                        var sourceMap = aSourceMap;
                        if (typeof aSourceMap === 'string') {
                            sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
                        }
                        var version = util.getArg(sourceMap, 'version');
                        var sections = util.getArg(sourceMap, 'sections');
                        if (version != this._version) {
                            throw new Error('Unsupported version: ' + version);
                        }
                        var lastOffset = {
                            line: -1,
                            column: 0
                        };
                        this._sections = sections.map(function (s) {
                            if (s.url) {
                                throw new Error('Support for url field in sections not implemented.');
                            }
                            var offset = util.getArg(s, 'offset');
                            var offsetLine = util.getArg(offset, 'line');
                            var offsetColumn = util.getArg(offset, 'column');
                            if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
                                throw new Error('Section offsets must be ordered and non-overlapping.');
                            }
                            lastOffset = offset;
                            return {
                                generatedOffset: {
                                    generatedLine: offsetLine + 1,
                                    generatedColumn: offsetColumn + 1
                                },
                                consumer: new SourceMapConsumer(util.getArg(s, 'map'))
                            };
                        });
                    }
                    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
                    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
                    IndexedSourceMapConsumer.prototype._version = 3;
                    Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
                        get: function () {
                            var sources = [];
                            for (var i = 0; i < this._sections.length; i++) {
                                for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
                                    sources.push(this._sections[i].consumer.sources[j]);
                                }
                            }
                            ;
                            return sources;
                        }
                    });
                    IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
                        var needle = {
                            generatedLine: util.getArg(aArgs, 'line'),
                            generatedColumn: util.getArg(aArgs, 'column')
                        };
                        var sectionIndex = binarySearch.search(needle, this._sections, function (needle, section) {
                            var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
                            if (cmp) {
                                return cmp;
                            }
                            return needle.generatedColumn - section.generatedOffset.generatedColumn;
                        });
                        var section = this._sections[sectionIndex];
                        if (!section) {
                            return {
                                source: null,
                                line: null,
                                column: null,
                                name: null
                            };
                        }
                        return section.consumer.originalPositionFor({
                            line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
                            column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0)
                        });
                    };
                    IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
                        for (var i = 0; i < this._sections.length; i++) {
                            var section = this._sections[i];
                            var content = section.consumer.sourceContentFor(aSource, true);
                            if (content) {
                                return content;
                            }
                        }
                        if (nullOnMissing) {
                            return null;
                        } else {
                            throw new Error('"' + aSource + '" is not in the SourceMap.');
                        }
                    };
                    IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
                        for (var i = 0; i < this._sections.length; i++) {
                            var section = this._sections[i];
                            if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
                                continue;
                            }
                            var generatedPosition = section.consumer.generatedPositionFor(aArgs);
                            if (generatedPosition) {
                                var ret = {
                                    line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
                                    column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
                                };
                                return ret;
                            }
                        }
                        return {
                            line: null,
                            column: null
                        };
                    };
                    IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
                        this.__generatedMappings = [];
                        this.__originalMappings = [];
                        for (var i = 0; i < this._sections.length; i++) {
                            var section = this._sections[i];
                            var sectionMappings = section.consumer._generatedMappings;
                            for (var j = 0; j < sectionMappings.length; j++) {
                                var mapping = sectionMappings[i];
                                var source = mapping.source;
                                var sourceRoot = section.consumer.sourceRoot;
                                if (source != null && sourceRoot != null) {
                                    source = util.join(sourceRoot, source);
                                }
                                var adjustedMapping = {
                                    source: source,
                                    generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
                                    generatedColumn: mapping.column + (section.generatedOffset.generatedLine === mapping.generatedLine) ? section.generatedOffset.generatedColumn - 1 : 0,
                                    originalLine: mapping.originalLine,
                                    originalColumn: mapping.originalColumn,
                                    name: mapping.name
                                };
                                this.__generatedMappings.push(adjustedMapping);
                                if (typeof adjustedMapping.originalLine === 'number') {
                                    this.__originalMappings.push(adjustedMapping);
                                }
                            }
                            ;
                        }
                        ;
                        this.__generatedMappings.sort(util.compareByGeneratedPositions);
                        this.__originalMappings.sort(util.compareByOriginalPositions);
                    };
                    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
                });
            },
            {
                './basic-source-map-consumer': 88,
                './binary-search': 89,
                './source-map-consumer': 92,
                './util': 95,
                'amdefine': 4
            }
        ],
        91: [
            function (require, module, exports) {
                if (typeof define !== 'function') {
                    var define = require('amdefine')(module, require);
                }
                define(function (require, exports, module) {
                    var util = require('./util');
                    function generatedPositionAfter(mappingA, mappingB) {
                        var lineA = mappingA.generatedLine;
                        var lineB = mappingB.generatedLine;
                        var columnA = mappingA.generatedColumn;
                        var columnB = mappingB.generatedColumn;
                        return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositions(mappingA, mappingB) <= 0;
                    }
                    function MappingList() {
                        this._array = [];
                        this._sorted = true;
                        this._last = {
                            generatedLine: -1,
                            generatedColumn: 0
                        };
                    }
                    MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
                        this._array.forEach(aCallback, aThisArg);
                    };
                    MappingList.prototype.add = function MappingList_add(aMapping) {
                        var mapping;
                        if (generatedPositionAfter(this._last, aMapping)) {
                            this._last = aMapping;
                            this._array.push(aMapping);
                        } else {
                            this._sorted = false;
                            this._array.push(aMapping);
                        }
                    };
                    MappingList.prototype.toArray = function MappingList_toArray() {
                        if (!this._sorted) {
                            this._array.sort(util.compareByGeneratedPositions);
                            this._sorted = true;
                        }
                        return this._array;
                    };
                    exports.MappingList = MappingList;
                });
            },
            {
                './util': 95,
                'amdefine': 4
            }
        ],
        92: [
            function (require, module, exports) {
                if (typeof define !== 'function') {
                    var define = require('amdefine')(module, require);
                }
                define(function (require, exports, module) {
                    var util = require('./util');
                    function SourceMapConsumer(aSourceMap) {
                        var sourceMap = aSourceMap;
                        if (typeof aSourceMap === 'string') {
                            sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
                        }
                        if (sourceMap.sections != null) {
                            var indexedSourceMapConsumer = require('./indexed-source-map-consumer');
                            return new indexedSourceMapConsumer.IndexedSourceMapConsumer(sourceMap);
                        } else {
                            var basicSourceMapConsumer = require('./basic-source-map-consumer');
                            return new basicSourceMapConsumer.BasicSourceMapConsumer(sourceMap);
                        }
                    }
                    SourceMapConsumer.fromSourceMap = function (aSourceMap) {
                        var basicSourceMapConsumer = require('./basic-source-map-consumer');
                        return basicSourceMapConsumer.BasicSourceMapConsumer.fromSourceMap(aSourceMap);
                    };
                    SourceMapConsumer.prototype._version = 3;
                    SourceMapConsumer.prototype.__generatedMappings = null;
                    Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
                        get: function () {
                            if (!this.__generatedMappings) {
                                this.__generatedMappings = [];
                                this.__originalMappings = [];
                                this._parseMappings(this._mappings, this.sourceRoot);
                            }
                            return this.__generatedMappings;
                        }
                    });
                    SourceMapConsumer.prototype.__originalMappings = null;
                    Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
                        get: function () {
                            if (!this.__originalMappings) {
                                this.__generatedMappings = [];
                                this.__originalMappings = [];
                                this._parseMappings(this._mappings, this.sourceRoot);
                            }
                            return this.__originalMappings;
                        }
                    });
                    SourceMapConsumer.prototype._nextCharIsMappingSeparator = function SourceMapConsumer_nextCharIsMappingSeparator(aStr) {
                        var c = aStr.charAt(0);
                        return c === ';' || c === ',';
                    };
                    SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
                        throw new Error('Subclasses must implement _parseMappings');
                    };
                    SourceMapConsumer.GENERATED_ORDER = 1;
                    SourceMapConsumer.ORIGINAL_ORDER = 2;
                    SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
                        var context = aContext || null;
                        var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
                        var mappings;
                        switch (order) {
                        case SourceMapConsumer.GENERATED_ORDER:
                            mappings = this._generatedMappings;
                            break;
                        case SourceMapConsumer.ORIGINAL_ORDER:
                            mappings = this._originalMappings;
                            break;
                        default:
                            throw new Error('Unknown order of iteration.');
                        }
                        var sourceRoot = this.sourceRoot;
                        mappings.map(function (mapping) {
                            var source = mapping.source;
                            if (source != null && sourceRoot != null) {
                                source = util.join(sourceRoot, source);
                            }
                            return {
                                source: source,
                                generatedLine: mapping.generatedLine,
                                generatedColumn: mapping.generatedColumn,
                                originalLine: mapping.originalLine,
                                originalColumn: mapping.originalColumn,
                                name: mapping.name
                            };
                        }).forEach(aCallback, context);
                    };
                    SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
                        var needle = {
                            source: util.getArg(aArgs, 'source'),
                            originalLine: util.getArg(aArgs, 'line'),
                            originalColumn: Infinity
                        };
                        if (this.sourceRoot != null) {
                            needle.source = util.relative(this.sourceRoot, needle.source);
                        }
                        var mappings = [];
                        var index = this._findMapping(needle, this._originalMappings, 'originalLine', 'originalColumn', util.compareByOriginalPositions);
                        if (index >= 0) {
                            var mapping = this._originalMappings[index];
                            while (mapping && mapping.originalLine === needle.originalLine) {
                                mappings.push({
                                    line: util.getArg(mapping, 'generatedLine', null),
                                    column: util.getArg(mapping, 'generatedColumn', null),
                                    lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                                });
                                mapping = this._originalMappings[--index];
                            }
                        }
                        return mappings.reverse();
                    };
                    exports.SourceMapConsumer = SourceMapConsumer;
                });
            },
            {
                './basic-source-map-consumer': 88,
                './indexed-source-map-consumer': 90,
                './util': 95,
                'amdefine': 4
            }
        ],
        93: [
            function (require, module, exports) {
                if (typeof define !== 'function') {
                    var define = require('amdefine')(module, require);
                }
                define(function (require, exports, module) {
                    var base64VLQ = require('./base64-vlq');
                    var util = require('./util');
                    var ArraySet = require('./array-set').ArraySet;
                    var MappingList = require('./mapping-list').MappingList;
                    function SourceMapGenerator(aArgs) {
                        if (!aArgs) {
                            aArgs = {};
                        }
                        this._file = util.getArg(aArgs, 'file', null);
                        this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
                        this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
                        this._sources = new ArraySet();
                        this._names = new ArraySet();
                        this._mappings = new MappingList();
                        this._sourcesContents = null;
                    }
                    SourceMapGenerator.prototype._version = 3;
                    SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
                        var sourceRoot = aSourceMapConsumer.sourceRoot;
                        var generator = new SourceMapGenerator({
                            file: aSourceMapConsumer.file,
                            sourceRoot: sourceRoot
                        });
                        aSourceMapConsumer.eachMapping(function (mapping) {
                            var newMapping = {
                                generated: {
                                    line: mapping.generatedLine,
                                    column: mapping.generatedColumn
                                }
                            };
                            if (mapping.source != null) {
                                newMapping.source = mapping.source;
                                if (sourceRoot != null) {
                                    newMapping.source = util.relative(sourceRoot, newMapping.source);
                                }
                                newMapping.original = {
                                    line: mapping.originalLine,
                                    column: mapping.originalColumn
                                };
                                if (mapping.name != null) {
                                    newMapping.name = mapping.name;
                                }
                            }
                            generator.addMapping(newMapping);
                        });
                        aSourceMapConsumer.sources.forEach(function (sourceFile) {
                            var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                            if (content != null) {
                                generator.setSourceContent(sourceFile, content);
                            }
                        });
                        return generator;
                    };
                    SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
                        var generated = util.getArg(aArgs, 'generated');
                        var original = util.getArg(aArgs, 'original', null);
                        var source = util.getArg(aArgs, 'source', null);
                        var name = util.getArg(aArgs, 'name', null);
                        if (!this._skipValidation) {
                            this._validateMapping(generated, original, source, name);
                        }
                        if (source != null && !this._sources.has(source)) {
                            this._sources.add(source);
                        }
                        if (name != null && !this._names.has(name)) {
                            this._names.add(name);
                        }
                        this._mappings.add({
                            generatedLine: generated.line,
                            generatedColumn: generated.column,
                            originalLine: original != null && original.line,
                            originalColumn: original != null && original.column,
                            source: source,
                            name: name
                        });
                    };
                    SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
                        var source = aSourceFile;
                        if (this._sourceRoot != null) {
                            source = util.relative(this._sourceRoot, source);
                        }
                        if (aSourceContent != null) {
                            if (!this._sourcesContents) {
                                this._sourcesContents = {};
                            }
                            this._sourcesContents[util.toSetString(source)] = aSourceContent;
                        } else if (this._sourcesContents) {
                            delete this._sourcesContents[util.toSetString(source)];
                            if (Object.keys(this._sourcesContents).length === 0) {
                                this._sourcesContents = null;
                            }
                        }
                    };
                    SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
                        var sourceFile = aSourceFile;
                        if (aSourceFile == null) {
                            if (aSourceMapConsumer.file == null) {
                                throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' + 'or the source map\'s "file" property. Both were omitted.');
                            }
                            sourceFile = aSourceMapConsumer.file;
                        }
                        var sourceRoot = this._sourceRoot;
                        if (sourceRoot != null) {
                            sourceFile = util.relative(sourceRoot, sourceFile);
                        }
                        var newSources = new ArraySet();
                        var newNames = new ArraySet();
                        this._mappings.unsortedForEach(function (mapping) {
                            if (mapping.source === sourceFile && mapping.originalLine != null) {
                                var original = aSourceMapConsumer.originalPositionFor({
                                    line: mapping.originalLine,
                                    column: mapping.originalColumn
                                });
                                if (original.source != null) {
                                    mapping.source = original.source;
                                    if (aSourceMapPath != null) {
                                        mapping.source = util.join(aSourceMapPath, mapping.source);
                                    }
                                    if (sourceRoot != null) {
                                        mapping.source = util.relative(sourceRoot, mapping.source);
                                    }
                                    mapping.originalLine = original.line;
                                    mapping.originalColumn = original.column;
                                    if (original.name != null) {
                                        mapping.name = original.name;
                                    }
                                }
                            }
                            var source = mapping.source;
                            if (source != null && !newSources.has(source)) {
                                newSources.add(source);
                            }
                            var name = mapping.name;
                            if (name != null && !newNames.has(name)) {
                                newNames.add(name);
                            }
                        }, this);
                        this._sources = newSources;
                        this._names = newNames;
                        aSourceMapConsumer.sources.forEach(function (sourceFile) {
                            var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                            if (content != null) {
                                if (aSourceMapPath != null) {
                                    sourceFile = util.join(aSourceMapPath, sourceFile);
                                }
                                if (sourceRoot != null) {
                                    sourceFile = util.relative(sourceRoot, sourceFile);
                                }
                                this.setSourceContent(sourceFile, content);
                            }
                        }, this);
                    };
                    SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
                        if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
                            return;
                        } else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aOriginal && 'line' in aOriginal && 'column' in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
                            return;
                        } else {
                            throw new Error('Invalid mapping: ' + JSON.stringify({
                                generated: aGenerated,
                                source: aSource,
                                original: aOriginal,
                                name: aName
                            }));
                        }
                    };
                    SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
                        var previousGeneratedColumn = 0;
                        var previousGeneratedLine = 1;
                        var previousOriginalColumn = 0;
                        var previousOriginalLine = 0;
                        var previousName = 0;
                        var previousSource = 0;
                        var result = '';
                        var mapping;
                        var mappings = this._mappings.toArray();
                        for (var i = 0, len = mappings.length; i < len; i++) {
                            mapping = mappings[i];
                            if (mapping.generatedLine !== previousGeneratedLine) {
                                previousGeneratedColumn = 0;
                                while (mapping.generatedLine !== previousGeneratedLine) {
                                    result += ';';
                                    previousGeneratedLine++;
                                }
                            } else {
                                if (i > 0) {
                                    if (!util.compareByGeneratedPositions(mapping, mappings[i - 1])) {
                                        continue;
                                    }
                                    result += ',';
                                }
                            }
                            result += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
                            previousGeneratedColumn = mapping.generatedColumn;
                            if (mapping.source != null) {
                                result += base64VLQ.encode(this._sources.indexOf(mapping.source) - previousSource);
                                previousSource = this._sources.indexOf(mapping.source);
                                result += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
                                previousOriginalLine = mapping.originalLine - 1;
                                result += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
                                previousOriginalColumn = mapping.originalColumn;
                                if (mapping.name != null) {
                                    result += base64VLQ.encode(this._names.indexOf(mapping.name) - previousName);
                                    previousName = this._names.indexOf(mapping.name);
                                }
                            }
                        }
                        return result;
                    };
                    SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
                        return aSources.map(function (source) {
                            if (!this._sourcesContents) {
                                return null;
                            }
                            if (aSourceRoot != null) {
                                source = util.relative(aSourceRoot, source);
                            }
                            var key = util.toSetString(source);
                            return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
                        }, this);
                    };
                    SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
                        var map = {
                            version: this._version,
                            sources: this._sources.toArray(),
                            names: this._names.toArray(),
                            mappings: this._serializeMappings()
                        };
                        if (this._file != null) {
                            map.file = this._file;
                        }
                        if (this._sourceRoot != null) {
                            map.sourceRoot = this._sourceRoot;
                        }
                        if (this._sourcesContents) {
                            map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
                        }
                        return map;
                    };
                    SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
                        return JSON.stringify(this);
                    };
                    exports.SourceMapGenerator = SourceMapGenerator;
                });
            },
            {
                './array-set': 85,
                './base64-vlq': 86,
                './mapping-list': 91,
                './util': 95,
                'amdefine': 4
            }
        ],
        94: [
            function (require, module, exports) {
                if (typeof define !== 'function') {
                    var define = require('amdefine')(module, require);
                }
                define(function (require, exports, module) {
                    var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
                    var util = require('./util');
                    var REGEX_NEWLINE = /(\r?\n)/;
                    var NEWLINE_CODE = 10;
                    var isSourceNode = '$$$isSourceNode$$$';
                    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
                        this.children = [];
                        this.sourceContents = {};
                        this.line = aLine == null ? null : aLine;
                        this.column = aColumn == null ? null : aColumn;
                        this.source = aSource == null ? null : aSource;
                        this.name = aName == null ? null : aName;
                        this[isSourceNode] = true;
                        if (aChunks != null)
                            this.add(aChunks);
                    }
                    SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
                        var node = new SourceNode();
                        var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
                        var shiftNextLine = function () {
                            var lineContents = remainingLines.shift();
                            var newLine = remainingLines.shift() || '';
                            return lineContents + newLine;
                        };
                        var lastGeneratedLine = 1, lastGeneratedColumn = 0;
                        var lastMapping = null;
                        aSourceMapConsumer.eachMapping(function (mapping) {
                            if (lastMapping !== null) {
                                if (lastGeneratedLine < mapping.generatedLine) {
                                    var code = '';
                                    addMappingWithCode(lastMapping, shiftNextLine());
                                    lastGeneratedLine++;
                                    lastGeneratedColumn = 0;
                                } else {
                                    var nextLine = remainingLines[0];
                                    var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
                                    remainingLines[0] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
                                    lastGeneratedColumn = mapping.generatedColumn;
                                    addMappingWithCode(lastMapping, code);
                                    lastMapping = mapping;
                                    return;
                                }
                            }
                            while (lastGeneratedLine < mapping.generatedLine) {
                                node.add(shiftNextLine());
                                lastGeneratedLine++;
                            }
                            if (lastGeneratedColumn < mapping.generatedColumn) {
                                var nextLine = remainingLines[0];
                                node.add(nextLine.substr(0, mapping.generatedColumn));
                                remainingLines[0] = nextLine.substr(mapping.generatedColumn);
                                lastGeneratedColumn = mapping.generatedColumn;
                            }
                            lastMapping = mapping;
                        }, this);
                        if (remainingLines.length > 0) {
                            if (lastMapping) {
                                addMappingWithCode(lastMapping, shiftNextLine());
                            }
                            node.add(remainingLines.join(''));
                        }
                        aSourceMapConsumer.sources.forEach(function (sourceFile) {
                            var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                            if (content != null) {
                                if (aRelativePath != null) {
                                    sourceFile = util.join(aRelativePath, sourceFile);
                                }
                                node.setSourceContent(sourceFile, content);
                            }
                        });
                        return node;
                        function addMappingWithCode(mapping, code) {
                            if (mapping === null || mapping.source === undefined) {
                                node.add(code);
                            } else {
                                var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
                                node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
                            }
                        }
                    };
                    SourceNode.prototype.add = function SourceNode_add(aChunk) {
                        if (Array.isArray(aChunk)) {
                            aChunk.forEach(function (chunk) {
                                this.add(chunk);
                            }, this);
                        } else if (aChunk[isSourceNode] || typeof aChunk === 'string') {
                            if (aChunk) {
                                this.children.push(aChunk);
                            }
                        } else {
                            throw new TypeError('Expected a SourceNode, string, or an array of SourceNodes and strings. Got ' + aChunk);
                        }
                        return this;
                    };
                    SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
                        if (Array.isArray(aChunk)) {
                            for (var i = aChunk.length - 1; i >= 0; i--) {
                                this.prepend(aChunk[i]);
                            }
                        } else if (aChunk[isSourceNode] || typeof aChunk === 'string') {
                            this.children.unshift(aChunk);
                        } else {
                            throw new TypeError('Expected a SourceNode, string, or an array of SourceNodes and strings. Got ' + aChunk);
                        }
                        return this;
                    };
                    SourceNode.prototype.walk = function SourceNode_walk(aFn) {
                        var chunk;
                        for (var i = 0, len = this.children.length; i < len; i++) {
                            chunk = this.children[i];
                            if (chunk[isSourceNode]) {
                                chunk.walk(aFn);
                            } else {
                                if (chunk !== '') {
                                    aFn(chunk, {
                                        source: this.source,
                                        line: this.line,
                                        column: this.column,
                                        name: this.name
                                    });
                                }
                            }
                        }
                    };
                    SourceNode.prototype.join = function SourceNode_join(aSep) {
                        var newChildren;
                        var i;
                        var len = this.children.length;
                        if (len > 0) {
                            newChildren = [];
                            for (i = 0; i < len - 1; i++) {
                                newChildren.push(this.children[i]);
                                newChildren.push(aSep);
                            }
                            newChildren.push(this.children[i]);
                            this.children = newChildren;
                        }
                        return this;
                    };
                    SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
                        var lastChild = this.children[this.children.length - 1];
                        if (lastChild[isSourceNode]) {
                            lastChild.replaceRight(aPattern, aReplacement);
                        } else if (typeof lastChild === 'string') {
                            this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
                        } else {
                            this.children.push(''.replace(aPattern, aReplacement));
                        }
                        return this;
                    };
                    SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
                        this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
                    };
                    SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
                        for (var i = 0, len = this.children.length; i < len; i++) {
                            if (this.children[i][isSourceNode]) {
                                this.children[i].walkSourceContents(aFn);
                            }
                        }
                        var sources = Object.keys(this.sourceContents);
                        for (var i = 0, len = sources.length; i < len; i++) {
                            aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
                        }
                    };
                    SourceNode.prototype.toString = function SourceNode_toString() {
                        var str = '';
                        this.walk(function (chunk) {
                            str += chunk;
                        });
                        return str;
                    };
                    SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
                        var generated = {
                            code: '',
                            line: 1,
                            column: 0
                        };
                        var map = new SourceMapGenerator(aArgs);
                        var sourceMappingActive = false;
                        var lastOriginalSource = null;
                        var lastOriginalLine = null;
                        var lastOriginalColumn = null;
                        var lastOriginalName = null;
                        this.walk(function (chunk, original) {
                            generated.code += chunk;
                            if (original.source !== null && original.line !== null && original.column !== null) {
                                if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
                                    map.addMapping({
                                        source: original.source,
                                        original: {
                                            line: original.line,
                                            column: original.column
                                        },
                                        generated: {
                                            line: generated.line,
                                            column: generated.column
                                        },
                                        name: original.name
                                    });
                                }
                                lastOriginalSource = original.source;
                                lastOriginalLine = original.line;
                                lastOriginalColumn = original.column;
                                lastOriginalName = original.name;
                                sourceMappingActive = true;
                            } else if (sourceMappingActive) {
                                map.addMapping({
                                    generated: {
                                        line: generated.line,
                                        column: generated.column
                                    }
                                });
                                lastOriginalSource = null;
                                sourceMappingActive = false;
                            }
                            for (var idx = 0, length = chunk.length; idx < length; idx++) {
                                if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
                                    generated.line++;
                                    generated.column = 0;
                                    if (idx + 1 === length) {
                                        lastOriginalSource = null;
                                        sourceMappingActive = false;
                                    } else if (sourceMappingActive) {
                                        map.addMapping({
                                            source: original.source,
                                            original: {
                                                line: original.line,
                                                column: original.column
                                            },
                                            generated: {
                                                line: generated.line,
                                                column: generated.column
                                            },
                                            name: original.name
                                        });
                                    }
                                } else {
                                    generated.column++;
                                }
                            }
                        });
                        this.walkSourceContents(function (sourceFile, sourceContent) {
                            map.setSourceContent(sourceFile, sourceContent);
                        });
                        return {
                            code: generated.code,
                            map: map
                        };
                    };
                    exports.SourceNode = SourceNode;
                });
            },
            {
                './source-map-generator': 93,
                './util': 95,
                'amdefine': 4
            }
        ],
        95: [
            function (require, module, exports) {
                if (typeof define !== 'function') {
                    var define = require('amdefine')(module, require);
                }
                define(function (require, exports, module) {
                    function getArg(aArgs, aName, aDefaultValue) {
                        if (aName in aArgs) {
                            return aArgs[aName];
                        } else if (arguments.length === 3) {
                            return aDefaultValue;
                        } else {
                            throw new Error('"' + aName + '" is a required argument.');
                        }
                    }
                    exports.getArg = getArg;
                    var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
                    var dataUrlRegexp = /^data:.+\,.+$/;
                    function urlParse(aUrl) {
                        var match = aUrl.match(urlRegexp);
                        if (!match) {
                            return null;
                        }
                        return {
                            scheme: match[1],
                            auth: match[2],
                            host: match[3],
                            port: match[4],
                            path: match[5]
                        };
                    }
                    exports.urlParse = urlParse;
                    function urlGenerate(aParsedUrl) {
                        var url = '';
                        if (aParsedUrl.scheme) {
                            url += aParsedUrl.scheme + ':';
                        }
                        url += '//';
                        if (aParsedUrl.auth) {
                            url += aParsedUrl.auth + '@';
                        }
                        if (aParsedUrl.host) {
                            url += aParsedUrl.host;
                        }
                        if (aParsedUrl.port) {
                            url += ':' + aParsedUrl.port;
                        }
                        if (aParsedUrl.path) {
                            url += aParsedUrl.path;
                        }
                        return url;
                    }
                    exports.urlGenerate = urlGenerate;
                    function normalize(aPath) {
                        var path = aPath;
                        var url = urlParse(aPath);
                        if (url) {
                            if (!url.path) {
                                return aPath;
                            }
                            path = url.path;
                        }
                        var isAbsolute = path.charAt(0) === '/';
                        var parts = path.split(/\/+/);
                        for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
                            part = parts[i];
                            if (part === '.') {
                                parts.splice(i, 1);
                            } else if (part === '..') {
                                up++;
                            } else if (up > 0) {
                                if (part === '') {
                                    parts.splice(i + 1, up);
                                    up = 0;
                                } else {
                                    parts.splice(i, 2);
                                    up--;
                                }
                            }
                        }
                        path = parts.join('/');
                        if (path === '') {
                            path = isAbsolute ? '/' : '.';
                        }
                        if (url) {
                            url.path = path;
                            return urlGenerate(url);
                        }
                        return path;
                    }
                    exports.normalize = normalize;
                    function join(aRoot, aPath) {
                        if (aRoot === '') {
                            aRoot = '.';
                        }
                        if (aPath === '') {
                            aPath = '.';
                        }
                        var aPathUrl = urlParse(aPath);
                        var aRootUrl = urlParse(aRoot);
                        if (aRootUrl) {
                            aRoot = aRootUrl.path || '/';
                        }
                        if (aPathUrl && !aPathUrl.scheme) {
                            if (aRootUrl) {
                                aPathUrl.scheme = aRootUrl.scheme;
                            }
                            return urlGenerate(aPathUrl);
                        }
                        if (aPathUrl || aPath.match(dataUrlRegexp)) {
                            return aPath;
                        }
                        if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
                            aRootUrl.host = aPath;
                            return urlGenerate(aRootUrl);
                        }
                        var joined = aPath.charAt(0) === '/' ? aPath : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
                        if (aRootUrl) {
                            aRootUrl.path = joined;
                            return urlGenerate(aRootUrl);
                        }
                        return joined;
                    }
                    exports.join = join;
                    function relative(aRoot, aPath) {
                        if (aRoot === '') {
                            aRoot = '.';
                        }
                        aRoot = aRoot.replace(/\/$/, '');
                        var url = urlParse(aRoot);
                        if (aPath.charAt(0) == '/' && url && url.path == '/') {
                            return aPath.slice(1);
                        }
                        return aPath.indexOf(aRoot + '/') === 0 ? aPath.substr(aRoot.length + 1) : aPath;
                    }
                    exports.relative = relative;
                    function toSetString(aStr) {
                        return '$' + aStr;
                    }
                    exports.toSetString = toSetString;
                    function fromSetString(aStr) {
                        return aStr.substr(1);
                    }
                    exports.fromSetString = fromSetString;
                    function strcmp(aStr1, aStr2) {
                        var s1 = aStr1 || '';
                        var s2 = aStr2 || '';
                        return (s1 > s2) - (s1 < s2);
                    }
                    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
                        var cmp;
                        cmp = strcmp(mappingA.source, mappingB.source);
                        if (cmp) {
                            return cmp;
                        }
                        cmp = mappingA.originalLine - mappingB.originalLine;
                        if (cmp) {
                            return cmp;
                        }
                        cmp = mappingA.originalColumn - mappingB.originalColumn;
                        if (cmp || onlyCompareOriginal) {
                            return cmp;
                        }
                        cmp = strcmp(mappingA.name, mappingB.name);
                        if (cmp) {
                            return cmp;
                        }
                        cmp = mappingA.generatedLine - mappingB.generatedLine;
                        if (cmp) {
                            return cmp;
                        }
                        return mappingA.generatedColumn - mappingB.generatedColumn;
                    }
                    ;
                    exports.compareByOriginalPositions = compareByOriginalPositions;
                    function compareByGeneratedPositions(mappingA, mappingB, onlyCompareGenerated) {
                        var cmp;
                        cmp = mappingA.generatedLine - mappingB.generatedLine;
                        if (cmp) {
                            return cmp;
                        }
                        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
                        if (cmp || onlyCompareGenerated) {
                            return cmp;
                        }
                        cmp = strcmp(mappingA.source, mappingB.source);
                        if (cmp) {
                            return cmp;
                        }
                        cmp = mappingA.originalLine - mappingB.originalLine;
                        if (cmp) {
                            return cmp;
                        }
                        cmp = mappingA.originalColumn - mappingB.originalColumn;
                        if (cmp) {
                            return cmp;
                        }
                        return strcmp(mappingA.name, mappingB.name);
                    }
                    ;
                    exports.compareByGeneratedPositions = compareByGeneratedPositions;
                });
            },
            { 'amdefine': 4 }
        ],
        96: [
            function (require, module, exports) {
                module.exports = Stream;
                var EE = require('events').EventEmitter;
                var inherits = require('inherits');
                inherits(Stream, EE);
                Stream.Readable = require('readable-stream/readable.js');
                Stream.Writable = require('readable-stream/writable.js');
                Stream.Duplex = require('readable-stream/duplex.js');
                Stream.Transform = require('readable-stream/transform.js');
                Stream.PassThrough = require('readable-stream/passthrough.js');
                Stream.Stream = Stream;
                function Stream() {
                    EE.call(this);
                }
                Stream.prototype.pipe = function (dest, options) {
                    var source = this;
                    function ondata(chunk) {
                        if (dest.writable) {
                            if (false === dest.write(chunk) && source.pause) {
                                source.pause();
                            }
                        }
                    }
                    source.on('data', ondata);
                    function ondrain() {
                        if (source.readable && source.resume) {
                            source.resume();
                        }
                    }
                    dest.on('drain', ondrain);
                    if (!dest._isStdio && (!options || options.end !== false)) {
                        source.on('end', onend);
                        source.on('close', onclose);
                    }
                    var didOnEnd = false;
                    function onend() {
                        if (didOnEnd)
                            return;
                        didOnEnd = true;
                        dest.end();
                    }
                    function onclose() {
                        if (didOnEnd)
                            return;
                        didOnEnd = true;
                        if (typeof dest.destroy === 'function')
                            dest.destroy();
                    }
                    function onerror(er) {
                        cleanup();
                        if (EE.listenerCount(this, 'error') === 0) {
                            throw er;
                        }
                    }
                    source.on('error', onerror);
                    dest.on('error', onerror);
                    function cleanup() {
                        source.removeListener('data', ondata);
                        dest.removeListener('drain', ondrain);
                        source.removeListener('end', onend);
                        source.removeListener('close', onclose);
                        source.removeListener('error', onerror);
                        dest.removeListener('error', onerror);
                        source.removeListener('end', cleanup);
                        source.removeListener('close', cleanup);
                        dest.removeListener('close', cleanup);
                    }
                    source.on('end', cleanup);
                    source.on('close', cleanup);
                    dest.on('close', cleanup);
                    dest.emit('pipe', source);
                    return dest;
                };
            },
            {
                'events': 46,
                'inherits': 56,
                'readable-stream/duplex.js': 62,
                'readable-stream/passthrough.js': 71,
                'readable-stream/readable.js': 72,
                'readable-stream/transform.js': 73,
                'readable-stream/writable.js': 74
            }
        ],
        97: [
            function (require, module, exports) {
                'use strict';
                var Buffer = require('safe-buffer').Buffer;
                var isEncoding = Buffer.isEncoding || function (encoding) {
                    encoding = '' + encoding;
                    switch (encoding && encoding.toLowerCase()) {
                    case 'hex':
                    case 'utf8':
                    case 'utf-8':
                    case 'ascii':
                    case 'binary':
                    case 'base64':
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                    case 'raw':
                        return true;
                    default:
                        return false;
                    }
                };
                function _normalizeEncoding(enc) {
                    if (!enc)
                        return 'utf8';
                    var retried;
                    while (true) {
                        switch (enc) {
                        case 'utf8':
                        case 'utf-8':
                            return 'utf8';
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return 'utf16le';
                        case 'latin1':
                        case 'binary':
                            return 'latin1';
                        case 'base64':
                        case 'ascii':
                        case 'hex':
                            return enc;
                        default:
                            if (retried)
                                return;
                            enc = ('' + enc).toLowerCase();
                            retried = true;
                        }
                    }
                }
                ;
                function normalizeEncoding(enc) {
                    var nenc = _normalizeEncoding(enc);
                    if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc)))
                        throw new Error('Unknown encoding: ' + enc);
                    return nenc || enc;
                }
                exports.StringDecoder = StringDecoder;
                function StringDecoder(encoding) {
                    this.encoding = normalizeEncoding(encoding);
                    var nb;
                    switch (this.encoding) {
                    case 'utf16le':
                        this.text = utf16Text;
                        this.end = utf16End;
                        nb = 4;
                        break;
                    case 'utf8':
                        this.fillLast = utf8FillLast;
                        nb = 4;
                        break;
                    case 'base64':
                        this.text = base64Text;
                        this.end = base64End;
                        nb = 3;
                        break;
                    default:
                        this.write = simpleWrite;
                        this.end = simpleEnd;
                        return;
                    }
                    this.lastNeed = 0;
                    this.lastTotal = 0;
                    this.lastChar = Buffer.allocUnsafe(nb);
                }
                StringDecoder.prototype.write = function (buf) {
                    if (buf.length === 0)
                        return '';
                    var r;
                    var i;
                    if (this.lastNeed) {
                        r = this.fillLast(buf);
                        if (r === undefined)
                            return '';
                        i = this.lastNeed;
                        this.lastNeed = 0;
                    } else {
                        i = 0;
                    }
                    if (i < buf.length)
                        return r ? r + this.text(buf, i) : this.text(buf, i);
                    return r || '';
                };
                StringDecoder.prototype.end = utf8End;
                StringDecoder.prototype.text = utf8Text;
                StringDecoder.prototype.fillLast = function (buf) {
                    if (this.lastNeed <= buf.length) {
                        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                    }
                    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
                    this.lastNeed -= buf.length;
                };
                function utf8CheckByte(byte) {
                    if (byte <= 127)
                        return 0;
                    else if (byte >> 5 === 6)
                        return 2;
                    else if (byte >> 4 === 14)
                        return 3;
                    else if (byte >> 3 === 30)
                        return 4;
                    return -1;
                }
                function utf8CheckIncomplete(self, buf, i) {
                    var j = buf.length - 1;
                    if (j < i)
                        return 0;
                    var nb = utf8CheckByte(buf[j]);
                    if (nb >= 0) {
                        if (nb > 0)
                            self.lastNeed = nb - 1;
                        return nb;
                    }
                    if (--j < i)
                        return 0;
                    nb = utf8CheckByte(buf[j]);
                    if (nb >= 0) {
                        if (nb > 0)
                            self.lastNeed = nb - 2;
                        return nb;
                    }
                    if (--j < i)
                        return 0;
                    nb = utf8CheckByte(buf[j]);
                    if (nb >= 0) {
                        if (nb > 0) {
                            if (nb === 2)
                                nb = 0;
                            else
                                self.lastNeed = nb - 3;
                        }
                        return nb;
                    }
                    return 0;
                }
                function utf8CheckExtraBytes(self, buf, p) {
                    if ((buf[0] & 192) !== 128) {
                        self.lastNeed = 0;
                        return '\uFFFD'.repeat(p);
                    }
                    if (self.lastNeed > 1 && buf.length > 1) {
                        if ((buf[1] & 192) !== 128) {
                            self.lastNeed = 1;
                            return '\uFFFD'.repeat(p + 1);
                        }
                        if (self.lastNeed > 2 && buf.length > 2) {
                            if ((buf[2] & 192) !== 128) {
                                self.lastNeed = 2;
                                return '\uFFFD'.repeat(p + 2);
                            }
                        }
                    }
                }
                function utf8FillLast(buf) {
                    var p = this.lastTotal - this.lastNeed;
                    var r = utf8CheckExtraBytes(this, buf, p);
                    if (r !== undefined)
                        return r;
                    if (this.lastNeed <= buf.length) {
                        buf.copy(this.lastChar, p, 0, this.lastNeed);
                        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                    }
                    buf.copy(this.lastChar, p, 0, buf.length);
                    this.lastNeed -= buf.length;
                }
                function utf8Text(buf, i) {
                    var total = utf8CheckIncomplete(this, buf, i);
                    if (!this.lastNeed)
                        return buf.toString('utf8', i);
                    this.lastTotal = total;
                    var end = buf.length - (total - this.lastNeed);
                    buf.copy(this.lastChar, 0, end);
                    return buf.toString('utf8', i, end);
                }
                function utf8End(buf) {
                    var r = buf && buf.length ? this.write(buf) : '';
                    if (this.lastNeed)
                        return r + '\uFFFD'.repeat(this.lastTotal - this.lastNeed);
                    return r;
                }
                function utf16Text(buf, i) {
                    if ((buf.length - i) % 2 === 0) {
                        var r = buf.toString('utf16le', i);
                        if (r) {
                            var c = r.charCodeAt(r.length - 1);
                            if (c >= 55296 && c <= 56319) {
                                this.lastNeed = 2;
                                this.lastTotal = 4;
                                this.lastChar[0] = buf[buf.length - 2];
                                this.lastChar[1] = buf[buf.length - 1];
                                return r.slice(0, -1);
                            }
                        }
                        return r;
                    }
                    this.lastNeed = 1;
                    this.lastTotal = 2;
                    this.lastChar[0] = buf[buf.length - 1];
                    return buf.toString('utf16le', i, buf.length - 1);
                }
                function utf16End(buf) {
                    var r = buf && buf.length ? this.write(buf) : '';
                    if (this.lastNeed) {
                        var end = this.lastTotal - this.lastNeed;
                        return r + this.lastChar.toString('utf16le', 0, end);
                    }
                    return r;
                }
                function base64Text(buf, i) {
                    var n = (buf.length - i) % 3;
                    if (n === 0)
                        return buf.toString('base64', i);
                    this.lastNeed = 3 - n;
                    this.lastTotal = 3;
                    if (n === 1) {
                        this.lastChar[0] = buf[buf.length - 1];
                    } else {
                        this.lastChar[0] = buf[buf.length - 2];
                        this.lastChar[1] = buf[buf.length - 1];
                    }
                    return buf.toString('base64', i, buf.length - n);
                }
                function base64End(buf) {
                    var r = buf && buf.length ? this.write(buf) : '';
                    if (this.lastNeed)
                        return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
                    return r;
                }
                function simpleWrite(buf) {
                    return buf.toString(this.encoding);
                }
                function simpleEnd(buf) {
                    return buf && buf.length ? this.write(buf) : '';
                }
            },
            { 'safe-buffer': 75 }
        ],
        98: [
            function (require, module, exports) {
                (function (global) {
                    module.exports = deprecate;
                    function deprecate(fn, msg) {
                        if (config('noDeprecation')) {
                            return fn;
                        }
                        var warned = false;
                        function deprecated() {
                            if (!warned) {
                                if (config('throwDeprecation')) {
                                    throw new Error(msg);
                                } else if (config('traceDeprecation')) {
                                    console.trace(msg);
                                } else {
                                    console.warn(msg);
                                }
                                warned = true;
                            }
                            return fn.apply(this, arguments);
                        }
                        return deprecated;
                    }
                    function config(name) {
                        try {
                            if (!global.localStorage)
                                return false;
                        } catch (_) {
                            return false;
                        }
                        var val = global.localStorage[name];
                        if (null == val)
                            return false;
                        return String(val).toLowerCase() === 'true';
                    }
                }.call(this, typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}));
            },
            {}
        ],
        99: [
            function (require, module, exports) {
                var cov_z0eq9ranh = function () {
                    var path = '/home/fedora/WebComponents/components/thin-hook/hook.js', hash = '600da6ef7b392c77f77d7ecd8228eeb7103b18a1', global = new Function('return this')(), gcv = '__coverage__', coverageData = {
                            path: '/home/fedora/WebComponents/components/thin-hook/hook.js',
                            statementMap: {
                                '0': {
                                    start: {
                                        line: 6,
                                        column: 15
                                    },
                                    end: {
                                        line: 6,
                                        column: 32
                                    }
                                },
                                '1': {
                                    start: {
                                        line: 7,
                                        column: 18
                                    },
                                    end: {
                                        line: 7,
                                        column: 38
                                    }
                                },
                                '2': {
                                    start: {
                                        line: 8,
                                        column: 19
                                    },
                                    end: {
                                        line: 8,
                                        column: 41
                                    }
                                },
                                '3': {
                                    start: {
                                        line: 9,
                                        column: 19
                                    },
                                    end: {
                                        line: 9,
                                        column: 36
                                    }
                                },
                                '4': {
                                    start: {
                                        line: 10,
                                        column: 16
                                    },
                                    end: {
                                        line: 10,
                                        column: 45
                                    }
                                },
                                '5': {
                                    start: {
                                        line: 11,
                                        column: 19
                                    },
                                    end: {
                                        line: 11,
                                        column: 101
                                    }
                                },
                                '6': {
                                    start: {
                                        line: 12,
                                        column: 13
                                    },
                                    end: {
                                        line: 12,
                                        column: 28
                                    }
                                },
                                '7': {
                                    start: {
                                        line: 13,
                                        column: 22
                                    },
                                    end: {
                                        line: 13,
                                        column: 74
                                    }
                                },
                                '8': {
                                    start: {
                                        line: 14,
                                        column: 26
                                    },
                                    end: {
                                        line: 14,
                                        column: 69
                                    }
                                },
                                '9': {
                                    start: {
                                        line: 15,
                                        column: 22
                                    },
                                    end: {
                                        line: 15,
                                        column: 61
                                    }
                                },
                                '10': {
                                    start: {
                                        line: 16,
                                        column: 23
                                    },
                                    end: {
                                        line: 16,
                                        column: 75
                                    }
                                },
                                '11': {
                                    start: {
                                        line: 18,
                                        column: 0
                                    },
                                    end: {
                                        line: 30,
                                        column: 3
                                    }
                                }
                            },
                            fnMap: {},
                            branchMap: {},
                            s: {
                                '0': 0,
                                '1': 0,
                                '2': 0,
                                '3': 0,
                                '4': 0,
                                '5': 0,
                                '6': 0,
                                '7': 0,
                                '8': 0,
                                '9': 0,
                                '10': 0,
                                '11': 0
                            },
                            f: {},
                            b: {},
                            _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
                        }, coverage = global[gcv] || (global[gcv] = {});
                    if (coverage[path] && coverage[path].hash === hash) {
                        return coverage[path];
                    }
                    coverageData.hash = hash;
                    return coverage[path] = coverageData;
                }();
                const espree = (cov_z0eq9ranh.s[0]++, require('espree'));
                const escodegen = (cov_z0eq9ranh.s[1]++, require('escodegen'));
                const htmlparser = (cov_z0eq9ranh.s[2]++, require('htmlparser2'));
                const createHash = (cov_z0eq9ranh.s[3]++, require('sha.js'));
                const convert = (cov_z0eq9ranh.s[4]++, require('convert-source-map'));
                const preprocess = (cov_z0eq9ranh.s[5]++, require('./lib/preprocess.js')(espree, escodegen, htmlparser, createHash, convert));
                const hook = (cov_z0eq9ranh.s[6]++, preprocess.hook);
                const serviceWorker = (cov_z0eq9ranh.s[7]++, require('./lib/service-worker.js')(hook, preprocess));
                const contextGenerators = (cov_z0eq9ranh.s[8]++, require('./lib/context-generator.js')(hook));
                const hookCallbacks = (cov_z0eq9ranh.s[9]++, require('./lib/hook-callback.js')(hook));
                const nativeWrappers = (cov_z0eq9ranh.s[10]++, require('./lib/native-wrapper.js')(hook, preprocess));
                cov_z0eq9ranh.s[11]++;
                module.exports = Object.freeze(Object.assign(hook, preprocess.public, hookCallbacks, contextGenerators, serviceWorker, nativeWrappers, {
                    utils: { createHash: createHash },
                    parameters: {}
                }));
            },
            {
                './lib/context-generator.js': 100,
                './lib/hook-callback.js': 101,
                './lib/native-wrapper.js': 102,
                './lib/preprocess.js': 103,
                './lib/service-worker.js': 104,
                'convert-source-map': 9,
                'escodegen': 32,
                'espree': 34,
                'htmlparser2': 54,
                'sha.js': 77
            }
        ],
        100: [
            function (require, module, exports) {
                var cov_n65hmtuik = function () {
                    var path = '/home/fedora/WebComponents/components/thin-hook/lib/context-generator.js', hash = 'b10a69946c92c0c4fffa1b6c16618a8b5df87695', global = new Function('return this')(), gcv = '__coverage__', coverageData = {
                            path: '/home/fedora/WebComponents/components/thin-hook/lib/context-generator.js',
                            statementMap: {
                                '0': {
                                    start: {
                                        line: 6,
                                        column: 0
                                    },
                                    end: {
                                        line: 29,
                                        column: 1
                                    }
                                },
                                '1': {
                                    start: {
                                        line: 9,
                                        column: 4
                                    },
                                    end: {
                                        line: 12,
                                        column: 24
                                    }
                                },
                                '2': {
                                    start: {
                                        line: 9,
                                        column: 43
                                    },
                                    end: {
                                        line: 12,
                                        column: 12
                                    }
                                },
                                '3': {
                                    start: {
                                        line: 16,
                                        column: 4
                                    },
                                    end: {
                                        line: 19,
                                        column: 58
                                    }
                                },
                                '4': {
                                    start: {
                                        line: 16,
                                        column: 50
                                    },
                                    end: {
                                        line: 19,
                                        column: 31
                                    }
                                },
                                '5': {
                                    start: {
                                        line: 19,
                                        column: 45
                                    },
                                    end: {
                                        line: 19,
                                        column: 46
                                    }
                                },
                                '6': {
                                    start: {
                                        line: 22,
                                        column: 2
                                    },
                                    end: {
                                        line: 28,
                                        column: 4
                                    }
                                },
                                '7': {
                                    start: {
                                        line: 24,
                                        column: 20
                                    },
                                    end: {
                                        line: 24,
                                        column: 22
                                    }
                                }
                            },
                            fnMap: {
                                '0': {
                                    name: '(anonymous_0)',
                                    decl: {
                                        start: {
                                            line: 6,
                                            column: 17
                                        },
                                        end: {
                                            line: 6,
                                            column: 18
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 6,
                                            column: 33
                                        },
                                        end: {
                                            line: 29,
                                            column: 1
                                        }
                                    },
                                    line: 6
                                },
                                '1': {
                                    name: 'generateAstPathContext',
                                    decl: {
                                        start: {
                                            line: 8,
                                            column: 11
                                        },
                                        end: {
                                            line: 8,
                                            column: 33
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 8,
                                            column: 43
                                        },
                                        end: {
                                            line: 13,
                                            column: 3
                                        }
                                    },
                                    line: 8
                                },
                                '2': {
                                    name: '(anonymous_2)',
                                    decl: {
                                        start: {
                                            line: 9,
                                            column: 23
                                        },
                                        end: {
                                            line: 9,
                                            column: 24
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 9,
                                            column: 43
                                        },
                                        end: {
                                            line: 12,
                                            column: 12
                                        }
                                    },
                                    line: 9
                                },
                                '3': {
                                    name: 'generateMethodContext',
                                    decl: {
                                        start: {
                                            line: 15,
                                            column: 11
                                        },
                                        end: {
                                            line: 15,
                                            column: 32
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 15,
                                            column: 42
                                        },
                                        end: {
                                            line: 20,
                                            column: 3
                                        }
                                    },
                                    line: 15
                                },
                                '4': {
                                    name: '(anonymous_4)',
                                    decl: {
                                        start: {
                                            line: 16,
                                            column: 23
                                        },
                                        end: {
                                            line: 16,
                                            column: 24
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 16,
                                            column: 50
                                        },
                                        end: {
                                            line: 19,
                                            column: 31
                                        }
                                    },
                                    line: 16
                                },
                                '5': {
                                    name: '(anonymous_5)',
                                    decl: {
                                        start: {
                                            line: 19,
                                            column: 40
                                        },
                                        end: {
                                            line: 19,
                                            column: 41
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 19,
                                            column: 45
                                        },
                                        end: {
                                            line: 19,
                                            column: 46
                                        }
                                    },
                                    line: 19
                                },
                                '6': {
                                    name: '(anonymous_6)',
                                    decl: {
                                        start: {
                                            line: 24,
                                            column: 14
                                        },
                                        end: {
                                            line: 24,
                                            column: 15
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 24,
                                            column: 20
                                        },
                                        end: {
                                            line: 24,
                                            column: 22
                                        }
                                    },
                                    line: 24
                                }
                            },
                            branchMap: {
                                '0': {
                                    loc: {
                                        start: {
                                            line: 9,
                                            column: 43
                                        },
                                        end: {
                                            line: 12,
                                            column: 12
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 10,
                                                column: 8
                                            },
                                            end: {
                                                line: 11,
                                                column: 132
                                            }
                                        },
                                        {
                                            start: {
                                                line: 12,
                                                column: 8
                                            },
                                            end: {
                                                line: 12,
                                                column: 12
                                            }
                                        }
                                    ],
                                    line: 9
                                },
                                '1': {
                                    loc: {
                                        start: {
                                            line: 9,
                                            column: 43
                                        },
                                        end: {
                                            line: 9,
                                            column: 60
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 9,
                                                column: 43
                                            },
                                            end: {
                                                line: 9,
                                                column: 47
                                            }
                                        },
                                        {
                                            start: {
                                                line: 9,
                                                column: 51
                                            },
                                            end: {
                                                line: 9,
                                                column: 60
                                            }
                                        }
                                    ],
                                    line: 9
                                },
                                '2': {
                                    loc: {
                                        start: {
                                            line: 10,
                                            column: 40
                                        },
                                        end: {
                                            line: 11,
                                            column: 131
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 10,
                                                column: 66
                                            },
                                            end: {
                                                line: 10,
                                                column: 84
                                            }
                                        },
                                        {
                                            start: {
                                                line: 10,
                                                column: 88
                                            },
                                            end: {
                                                line: 11,
                                                column: 130
                                            }
                                        }
                                    ],
                                    line: 10
                                },
                                '3': {
                                    loc: {
                                        start: {
                                            line: 10,
                                            column: 40
                                        },
                                        end: {
                                            line: 10,
                                            column: 63
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 10,
                                                column: 40
                                            },
                                            end: {
                                                line: 10,
                                                column: 47
                                            }
                                        },
                                        {
                                            start: {
                                                line: 10,
                                                column: 51
                                            },
                                            end: {
                                                line: 10,
                                                column: 63
                                            }
                                        }
                                    ],
                                    line: 10
                                },
                                '4': {
                                    loc: {
                                        start: {
                                            line: 10,
                                            column: 88
                                        },
                                        end: {
                                            line: 11,
                                            column: 130
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 11,
                                                column: 10
                                            },
                                            end: {
                                                line: 11,
                                                column: 125
                                            }
                                        },
                                        {
                                            start: {
                                                line: 11,
                                                column: 128
                                            },
                                            end: {
                                                line: 11,
                                                column: 130
                                            }
                                        }
                                    ],
                                    line: 10
                                },
                                '5': {
                                    loc: {
                                        start: {
                                            line: 10,
                                            column: 88
                                        },
                                        end: {
                                            line: 10,
                                            column: 113
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 10,
                                                column: 88
                                            },
                                            end: {
                                                line: 10,
                                                column: 96
                                            }
                                        },
                                        {
                                            start: {
                                                line: 10,
                                                column: 100
                                            },
                                            end: {
                                                line: 10,
                                                column: 113
                                            }
                                        }
                                    ],
                                    line: 10
                                },
                                '6': {
                                    loc: {
                                        start: {
                                            line: 11,
                                            column: 17
                                        },
                                        end: {
                                            line: 11,
                                            column: 108
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 11,
                                                column: 62
                                            },
                                            end: {
                                                line: 11,
                                                column: 77
                                            }
                                        },
                                        {
                                            start: {
                                                line: 11,
                                                column: 80
                                            },
                                            end: {
                                                line: 11,
                                                column: 108
                                            }
                                        }
                                    ],
                                    line: 11
                                },
                                '7': {
                                    loc: {
                                        start: {
                                            line: 11,
                                            column: 17
                                        },
                                        end: {
                                            line: 11,
                                            column: 59
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 11,
                                                column: 17
                                            },
                                            end: {
                                                line: 11,
                                                column: 36
                                            }
                                        },
                                        {
                                            start: {
                                                line: 11,
                                                column: 40
                                            },
                                            end: {
                                                line: 11,
                                                column: 59
                                            }
                                        }
                                    ],
                                    line: 11
                                },
                                '8': {
                                    loc: {
                                        start: {
                                            line: 11,
                                            column: 80
                                        },
                                        end: {
                                            line: 11,
                                            column: 108
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 11,
                                                column: 94
                                            },
                                            end: {
                                                line: 11,
                                                column: 103
                                            }
                                        },
                                        {
                                            start: {
                                                line: 11,
                                                column: 106
                                            },
                                            end: {
                                                line: 11,
                                                column: 108
                                            }
                                        }
                                    ],
                                    line: 11
                                },
                                '9': {
                                    loc: {
                                        start: {
                                            line: 16,
                                            column: 50
                                        },
                                        end: {
                                            line: 19,
                                            column: 31
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 17,
                                                column: 9
                                            },
                                            end: {
                                                line: 18,
                                                column: 125
                                            }
                                        },
                                        {
                                            start: {
                                                line: 19,
                                                column: 8
                                            },
                                            end: {
                                                line: 19,
                                                column: 31
                                            }
                                        }
                                    ],
                                    line: 16
                                },
                                '10': {
                                    loc: {
                                        start: {
                                            line: 16,
                                            column: 50
                                        },
                                        end: {
                                            line: 16,
                                            column: 67
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 16,
                                                column: 50
                                            },
                                            end: {
                                                line: 16,
                                                column: 54
                                            }
                                        },
                                        {
                                            start: {
                                                line: 16,
                                                column: 58
                                            },
                                            end: {
                                                line: 16,
                                                column: 67
                                            }
                                        }
                                    ],
                                    line: 16
                                },
                                '11': {
                                    loc: {
                                        start: {
                                            line: 17,
                                            column: 9
                                        },
                                        end: {
                                            line: 18,
                                            column: 125
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 17,
                                                column: 35
                                            },
                                            end: {
                                                line: 17,
                                                column: 47
                                            }
                                        },
                                        {
                                            start: {
                                                line: 17,
                                                column: 51
                                            },
                                            end: {
                                                line: 18,
                                                column: 124
                                            }
                                        }
                                    ],
                                    line: 17
                                },
                                '12': {
                                    loc: {
                                        start: {
                                            line: 17,
                                            column: 9
                                        },
                                        end: {
                                            line: 17,
                                            column: 32
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 17,
                                                column: 9
                                            },
                                            end: {
                                                line: 17,
                                                column: 16
                                            }
                                        },
                                        {
                                            start: {
                                                line: 17,
                                                column: 20
                                            },
                                            end: {
                                                line: 17,
                                                column: 32
                                            }
                                        }
                                    ],
                                    line: 17
                                },
                                '13': {
                                    loc: {
                                        start: {
                                            line: 17,
                                            column: 51
                                        },
                                        end: {
                                            line: 18,
                                            column: 124
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 18,
                                                column: 10
                                            },
                                            end: {
                                                line: 18,
                                                column: 119
                                            }
                                        },
                                        {
                                            start: {
                                                line: 18,
                                                column: 122
                                            },
                                            end: {
                                                line: 18,
                                                column: 124
                                            }
                                        }
                                    ],
                                    line: 17
                                },
                                '14': {
                                    loc: {
                                        start: {
                                            line: 17,
                                            column: 51
                                        },
                                        end: {
                                            line: 17,
                                            column: 76
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 17,
                                                column: 51
                                            },
                                            end: {
                                                line: 17,
                                                column: 59
                                            }
                                        },
                                        {
                                            start: {
                                                line: 17,
                                                column: 63
                                            },
                                            end: {
                                                line: 17,
                                                column: 76
                                            }
                                        }
                                    ],
                                    line: 17
                                },
                                '15': {
                                    loc: {
                                        start: {
                                            line: 18,
                                            column: 11
                                        },
                                        end: {
                                            line: 18,
                                            column: 102
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 18,
                                                column: 56
                                            },
                                            end: {
                                                line: 18,
                                                column: 71
                                            }
                                        },
                                        {
                                            start: {
                                                line: 18,
                                                column: 74
                                            },
                                            end: {
                                                line: 18,
                                                column: 102
                                            }
                                        }
                                    ],
                                    line: 18
                                },
                                '16': {
                                    loc: {
                                        start: {
                                            line: 18,
                                            column: 11
                                        },
                                        end: {
                                            line: 18,
                                            column: 53
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 18,
                                                column: 11
                                            },
                                            end: {
                                                line: 18,
                                                column: 30
                                            }
                                        },
                                        {
                                            start: {
                                                line: 18,
                                                column: 34
                                            },
                                            end: {
                                                line: 18,
                                                column: 53
                                            }
                                        }
                                    ],
                                    line: 18
                                },
                                '17': {
                                    loc: {
                                        start: {
                                            line: 18,
                                            column: 74
                                        },
                                        end: {
                                            line: 18,
                                            column: 102
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 18,
                                                column: 88
                                            },
                                            end: {
                                                line: 18,
                                                column: 97
                                            }
                                        },
                                        {
                                            start: {
                                                line: 18,
                                                column: 100
                                            },
                                            end: {
                                                line: 18,
                                                column: 102
                                            }
                                        }
                                    ],
                                    line: 18
                                },
                                '18': {
                                    loc: {
                                        start: {
                                            line: 19,
                                            column: 8
                                        },
                                        end: {
                                            line: 19,
                                            column: 31
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 19,
                                                column: 22
                                            },
                                            end: {
                                                line: 19,
                                                column: 26
                                            }
                                        },
                                        {
                                            start: {
                                                line: 19,
                                                column: 29
                                            },
                                            end: {
                                                line: 19,
                                                column: 31
                                            }
                                        }
                                    ],
                                    line: 19
                                }
                            },
                            s: {
                                '0': 0,
                                '1': 0,
                                '2': 0,
                                '3': 0,
                                '4': 0,
                                '5': 0,
                                '6': 0,
                                '7': 0
                            },
                            f: {
                                '0': 0,
                                '1': 0,
                                '2': 0,
                                '3': 0,
                                '4': 0,
                                '5': 0,
                                '6': 0
                            },
                            b: {
                                '0': [
                                    0,
                                    0
                                ],
                                '1': [
                                    0,
                                    0
                                ],
                                '2': [
                                    0,
                                    0
                                ],
                                '3': [
                                    0,
                                    0
                                ],
                                '4': [
                                    0,
                                    0
                                ],
                                '5': [
                                    0,
                                    0
                                ],
                                '6': [
                                    0,
                                    0
                                ],
                                '7': [
                                    0,
                                    0
                                ],
                                '8': [
                                    0,
                                    0
                                ],
                                '9': [
                                    0,
                                    0
                                ],
                                '10': [
                                    0,
                                    0
                                ],
                                '11': [
                                    0,
                                    0
                                ],
                                '12': [
                                    0,
                                    0
                                ],
                                '13': [
                                    0,
                                    0
                                ],
                                '14': [
                                    0,
                                    0
                                ],
                                '15': [
                                    0,
                                    0
                                ],
                                '16': [
                                    0,
                                    0
                                ],
                                '17': [
                                    0,
                                    0
                                ],
                                '18': [
                                    0,
                                    0
                                ]
                            },
                            _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
                        }, coverage = global[gcv] || (global[gcv] = {});
                    if (coverage[path] && coverage[path].hash === hash) {
                        return coverage[path];
                    }
                    coverageData.hash = hash;
                    return coverage[path] = coverageData;
                }();
                cov_n65hmtuik.s[0]++;
                module.exports = function (hook) {
                    cov_n65hmtuik.f[0]++;
                    function generateAstPathContext(astPath) {
                        cov_n65hmtuik.f[1]++;
                        cov_n65hmtuik.s[1]++;
                        return astPath.map(([path, node]) => {
                            cov_n65hmtuik.f[2]++;
                            cov_n65hmtuik.s[2]++;
                            return (cov_n65hmtuik.b[1][0]++, node) && (cov_n65hmtuik.b[1][1]++, node.type) ? (cov_n65hmtuik.b[0][0]++, '[' + path + ']' + node.type + ((cov_n65hmtuik.b[3][0]++, node.id) && (cov_n65hmtuik.b[3][1]++, node.id.name) ? (cov_n65hmtuik.b[2][0]++, ':' + node.id.name) : (cov_n65hmtuik.b[2][1]++, (cov_n65hmtuik.b[5][0]++, node.key) && (cov_n65hmtuik.b[5][1]++, node.key.name) ? (cov_n65hmtuik.b[4][0]++, ':' + ((cov_n65hmtuik.b[7][0]++, node.kind === 'get') || (cov_n65hmtuik.b[7][1]++, node.kind === 'set') ? (cov_n65hmtuik.b[6][0]++, node.kind + ' ') : (cov_n65hmtuik.b[6][1]++, node.static ? (cov_n65hmtuik.b[8][0]++, 'static ') : (cov_n65hmtuik.b[8][1]++, ''))) + node.key.name) : (cov_n65hmtuik.b[4][1]++, '')))) : (cov_n65hmtuik.b[0][1]++, path);
                        }).join(',');
                    }
                    function generateMethodContext(astPath) {
                        cov_n65hmtuik.f[3]++;
                        cov_n65hmtuik.s[3]++;
                        return astPath.map(([path, node], index) => {
                            cov_n65hmtuik.f[4]++;
                            cov_n65hmtuik.s[4]++;
                            return (cov_n65hmtuik.b[10][0]++, node) && (cov_n65hmtuik.b[10][1]++, node.type) ? (cov_n65hmtuik.b[9][0]++, (cov_n65hmtuik.b[12][0]++, node.id) && (cov_n65hmtuik.b[12][1]++, node.id.name) ? (cov_n65hmtuik.b[11][0]++, node.id.name) : (cov_n65hmtuik.b[11][1]++, (cov_n65hmtuik.b[14][0]++, node.key) && (cov_n65hmtuik.b[14][1]++, node.key.name) ? (cov_n65hmtuik.b[13][0]++, ((cov_n65hmtuik.b[16][0]++, node.kind === 'get') || (cov_n65hmtuik.b[16][1]++, node.kind === 'set') ? (cov_n65hmtuik.b[15][0]++, node.kind + ' ') : (cov_n65hmtuik.b[15][1]++, node.static ? (cov_n65hmtuik.b[17][0]++, 'static ') : (cov_n65hmtuik.b[17][1]++, ''))) + node.key.name) : (cov_n65hmtuik.b[13][1]++, ''))) : (cov_n65hmtuik.b[9][1]++, index === 0 ? (cov_n65hmtuik.b[18][0]++, path) : (cov_n65hmtuik.b[18][1]++, ''));
                        }).filter(p => {
                            cov_n65hmtuik.f[5]++;
                            cov_n65hmtuik.s[5]++;
                            return p;
                        }).join(',');
                    }
                    cov_n65hmtuik.s[6]++;
                    return {
                        contextGenerators: {
                            'null': () => {
                                cov_n65hmtuik.f[6]++;
                                cov_n65hmtuik.s[7]++;
                                return '';
                            },
                            'astPath': generateAstPathContext,
                            'method': generateMethodContext
                        }
                    };
                };
            },
            {}
        ],
        101: [
            function (require, module, exports) {
                var cov_11pz0yfpk0 = function () {
                    var path = '/home/fedora/WebComponents/components/thin-hook/lib/hook-callback.js', hash = 'ce817d672d1604c3a1646a3ca04852fc38ff2f06', global = new Function('return this')(), gcv = '__coverage__', coverageData = {
                            path: '/home/fedora/WebComponents/components/thin-hook/lib/hook-callback.js',
                            statementMap: {
                                '0': {
                                    start: {
                                        line: 6,
                                        column: 0
                                    },
                                    end: {
                                        line: 108,
                                        column: 1
                                    }
                                },
                                '1': {
                                    start: {
                                        line: 10,
                                        column: 4
                                    },
                                    end: {
                                        line: 14,
                                        column: 21
                                    }
                                },
                                '2': {
                                    start: {
                                        line: 20,
                                        column: 4
                                    },
                                    end: {
                                        line: 100,
                                        column: 5
                                    }
                                },
                                '3': {
                                    start: {
                                        line: 21,
                                        column: 6
                                    },
                                    end: {
                                        line: 25,
                                        column: 23
                                    }
                                },
                                '4': {
                                    start: {
                                        line: 29,
                                        column: 6
                                    },
                                    end: {
                                        line: 99,
                                        column: 7
                                    }
                                },
                                '5': {
                                    start: {
                                        line: 33,
                                        column: 8
                                    },
                                    end: {
                                        line: 33,
                                        column: 34
                                    }
                                },
                                '6': {
                                    start: {
                                        line: 34,
                                        column: 8
                                    },
                                    end: {
                                        line: 34,
                                        column: 14
                                    }
                                },
                                '7': {
                                    start: {
                                        line: 37,
                                        column: 8
                                    },
                                    end: {
                                        line: 37,
                                        column: 58
                                    }
                                },
                                '8': {
                                    start: {
                                        line: 38,
                                        column: 8
                                    },
                                    end: {
                                        line: 38,
                                        column: 14
                                    }
                                },
                                '9': {
                                    start: {
                                        line: 41,
                                        column: 8
                                    },
                                    end: {
                                        line: 41,
                                        column: 36
                                    }
                                },
                                '10': {
                                    start: {
                                        line: 42,
                                        column: 8
                                    },
                                    end: {
                                        line: 42,
                                        column: 14
                                    }
                                },
                                '11': {
                                    start: {
                                        line: 44,
                                        column: 8
                                    },
                                    end: {
                                        line: 44,
                                        column: 36
                                    }
                                },
                                '12': {
                                    start: {
                                        line: 45,
                                        column: 8
                                    },
                                    end: {
                                        line: 45,
                                        column: 14
                                    }
                                },
                                '13': {
                                    start: {
                                        line: 47,
                                        column: 8
                                    },
                                    end: {
                                        line: 47,
                                        column: 36
                                    }
                                },
                                '14': {
                                    start: {
                                        line: 48,
                                        column: 8
                                    },
                                    end: {
                                        line: 48,
                                        column: 14
                                    }
                                },
                                '15': {
                                    start: {
                                        line: 50,
                                        column: 8
                                    },
                                    end: {
                                        line: 50,
                                        column: 36
                                    }
                                },
                                '16': {
                                    start: {
                                        line: 51,
                                        column: 8
                                    },
                                    end: {
                                        line: 51,
                                        column: 14
                                    }
                                },
                                '17': {
                                    start: {
                                        line: 53,
                                        column: 8
                                    },
                                    end: {
                                        line: 53,
                                        column: 41
                                    }
                                },
                                '18': {
                                    start: {
                                        line: 54,
                                        column: 8
                                    },
                                    end: {
                                        line: 54,
                                        column: 14
                                    }
                                },
                                '19': {
                                    start: {
                                        line: 57,
                                        column: 8
                                    },
                                    end: {
                                        line: 57,
                                        column: 44
                                    }
                                },
                                '20': {
                                    start: {
                                        line: 58,
                                        column: 8
                                    },
                                    end: {
                                        line: 58,
                                        column: 14
                                    }
                                },
                                '21': {
                                    start: {
                                        line: 60,
                                        column: 8
                                    },
                                    end: {
                                        line: 60,
                                        column: 45
                                    }
                                },
                                '22': {
                                    start: {
                                        line: 61,
                                        column: 8
                                    },
                                    end: {
                                        line: 61,
                                        column: 14
                                    }
                                },
                                '23': {
                                    start: {
                                        line: 63,
                                        column: 8
                                    },
                                    end: {
                                        line: 63,
                                        column: 45
                                    }
                                },
                                '24': {
                                    start: {
                                        line: 64,
                                        column: 8
                                    },
                                    end: {
                                        line: 64,
                                        column: 14
                                    }
                                },
                                '25': {
                                    start: {
                                        line: 66,
                                        column: 8
                                    },
                                    end: {
                                        line: 66,
                                        column: 45
                                    }
                                },
                                '26': {
                                    start: {
                                        line: 67,
                                        column: 8
                                    },
                                    end: {
                                        line: 67,
                                        column: 14
                                    }
                                },
                                '27': {
                                    start: {
                                        line: 69,
                                        column: 8
                                    },
                                    end: {
                                        line: 69,
                                        column: 45
                                    }
                                },
                                '28': {
                                    start: {
                                        line: 70,
                                        column: 8
                                    },
                                    end: {
                                        line: 70,
                                        column: 14
                                    }
                                },
                                '29': {
                                    start: {
                                        line: 72,
                                        column: 8
                                    },
                                    end: {
                                        line: 72,
                                        column: 45
                                    }
                                },
                                '30': {
                                    start: {
                                        line: 73,
                                        column: 8
                                    },
                                    end: {
                                        line: 73,
                                        column: 14
                                    }
                                },
                                '31': {
                                    start: {
                                        line: 75,
                                        column: 8
                                    },
                                    end: {
                                        line: 75,
                                        column: 46
                                    }
                                },
                                '32': {
                                    start: {
                                        line: 76,
                                        column: 8
                                    },
                                    end: {
                                        line: 76,
                                        column: 14
                                    }
                                },
                                '33': {
                                    start: {
                                        line: 78,
                                        column: 8
                                    },
                                    end: {
                                        line: 78,
                                        column: 46
                                    }
                                },
                                '34': {
                                    start: {
                                        line: 79,
                                        column: 8
                                    },
                                    end: {
                                        line: 79,
                                        column: 14
                                    }
                                },
                                '35': {
                                    start: {
                                        line: 81,
                                        column: 8
                                    },
                                    end: {
                                        line: 81,
                                        column: 46
                                    }
                                },
                                '36': {
                                    start: {
                                        line: 82,
                                        column: 8
                                    },
                                    end: {
                                        line: 82,
                                        column: 14
                                    }
                                },
                                '37': {
                                    start: {
                                        line: 84,
                                        column: 8
                                    },
                                    end: {
                                        line: 84,
                                        column: 47
                                    }
                                },
                                '38': {
                                    start: {
                                        line: 85,
                                        column: 8
                                    },
                                    end: {
                                        line: 85,
                                        column: 14
                                    }
                                },
                                '39': {
                                    start: {
                                        line: 87,
                                        column: 8
                                    },
                                    end: {
                                        line: 87,
                                        column: 45
                                    }
                                },
                                '40': {
                                    start: {
                                        line: 88,
                                        column: 8
                                    },
                                    end: {
                                        line: 88,
                                        column: 14
                                    }
                                },
                                '41': {
                                    start: {
                                        line: 90,
                                        column: 8
                                    },
                                    end: {
                                        line: 90,
                                        column: 45
                                    }
                                },
                                '42': {
                                    start: {
                                        line: 91,
                                        column: 8
                                    },
                                    end: {
                                        line: 91,
                                        column: 14
                                    }
                                },
                                '43': {
                                    start: {
                                        line: 93,
                                        column: 8
                                    },
                                    end: {
                                        line: 93,
                                        column: 45
                                    }
                                },
                                '44': {
                                    start: {
                                        line: 94,
                                        column: 8
                                    },
                                    end: {
                                        line: 94,
                                        column: 14
                                    }
                                },
                                '45': {
                                    start: {
                                        line: 97,
                                        column: 8
                                    },
                                    end: {
                                        line: 97,
                                        column: 22
                                    }
                                },
                                '46': {
                                    start: {
                                        line: 98,
                                        column: 8
                                    },
                                    end: {
                                        line: 98,
                                        column: 14
                                    }
                                },
                                '47': {
                                    start: {
                                        line: 101,
                                        column: 4
                                    },
                                    end: {
                                        line: 101,
                                        column: 18
                                    }
                                },
                                '48': {
                                    start: {
                                        line: 104,
                                        column: 2
                                    },
                                    end: {
                                        line: 107,
                                        column: 4
                                    }
                                }
                            },
                            fnMap: {
                                '0': {
                                    name: '(anonymous_0)',
                                    decl: {
                                        start: {
                                            line: 6,
                                            column: 17
                                        },
                                        end: {
                                            line: 6,
                                            column: 18
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 6,
                                            column: 33
                                        },
                                        end: {
                                            line: 108,
                                            column: 1
                                        }
                                    },
                                    line: 6
                                },
                                '1': {
                                    name: '__hook_except_properties__',
                                    decl: {
                                        start: {
                                            line: 9,
                                            column: 11
                                        },
                                        end: {
                                            line: 9,
                                            column: 37
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 9,
                                            column: 76
                                        },
                                        end: {
                                            line: 15,
                                            column: 3
                                        }
                                    },
                                    line: 9
                                },
                                '2': {
                                    name: '__hook__',
                                    decl: {
                                        start: {
                                            line: 18,
                                            column: 11
                                        },
                                        end: {
                                            line: 18,
                                            column: 19
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 18,
                                            column: 58
                                        },
                                        end: {
                                            line: 102,
                                            column: 3
                                        }
                                    },
                                    line: 18
                                }
                            },
                            branchMap: {
                                '0': {
                                    loc: {
                                        start: {
                                            line: 10,
                                            column: 11
                                        },
                                        end: {
                                            line: 14,
                                            column: 20
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 11,
                                                column: 8
                                            },
                                            end: {
                                                line: 11,
                                                column: 34
                                            }
                                        },
                                        {
                                            start: {
                                                line: 12,
                                                column: 8
                                            },
                                            end: {
                                                line: 14,
                                                column: 20
                                            }
                                        }
                                    ],
                                    line: 10
                                },
                                '1': {
                                    loc: {
                                        start: {
                                            line: 12,
                                            column: 8
                                        },
                                        end: {
                                            line: 14,
                                            column: 20
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 13,
                                                column: 10
                                            },
                                            end: {
                                                line: 13,
                                                column: 32
                                            }
                                        },
                                        {
                                            start: {
                                                line: 14,
                                                column: 10
                                            },
                                            end: {
                                                line: 14,
                                                column: 20
                                            }
                                        }
                                    ],
                                    line: 12
                                },
                                '2': {
                                    loc: {
                                        start: {
                                            line: 20,
                                            column: 4
                                        },
                                        end: {
                                            line: 100,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 20,
                                                column: 4
                                            },
                                            end: {
                                                line: 100,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 20,
                                                column: 4
                                            },
                                            end: {
                                                line: 100,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 20
                                },
                                '3': {
                                    loc: {
                                        start: {
                                            line: 21,
                                            column: 15
                                        },
                                        end: {
                                            line: 25,
                                            column: 22
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 22,
                                                column: 10
                                            },
                                            end: {
                                                line: 22,
                                                column: 36
                                            }
                                        },
                                        {
                                            start: {
                                                line: 23,
                                                column: 10
                                            },
                                            end: {
                                                line: 25,
                                                column: 22
                                            }
                                        }
                                    ],
                                    line: 21
                                },
                                '4': {
                                    loc: {
                                        start: {
                                            line: 23,
                                            column: 10
                                        },
                                        end: {
                                            line: 25,
                                            column: 22
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 24,
                                                column: 12
                                            },
                                            end: {
                                                line: 24,
                                                column: 34
                                            }
                                        },
                                        {
                                            start: {
                                                line: 25,
                                                column: 12
                                            },
                                            end: {
                                                line: 25,
                                                column: 22
                                            }
                                        }
                                    ],
                                    line: 23
                                },
                                '5': {
                                    loc: {
                                        start: {
                                            line: 29,
                                            column: 6
                                        },
                                        end: {
                                            line: 99,
                                            column: 7
                                        }
                                    },
                                    type: 'switch',
                                    locations: [
                                        {
                                            start: {
                                                line: 31,
                                                column: 6
                                            },
                                            end: {
                                                line: 31,
                                                column: 15
                                            }
                                        },
                                        {
                                            start: {
                                                line: 32,
                                                column: 6
                                            },
                                            end: {
                                                line: 34,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 36,
                                                column: 6
                                            },
                                            end: {
                                                line: 38,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 40,
                                                column: 6
                                            },
                                            end: {
                                                line: 42,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 43,
                                                column: 6
                                            },
                                            end: {
                                                line: 45,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 46,
                                                column: 6
                                            },
                                            end: {
                                                line: 48,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 49,
                                                column: 6
                                            },
                                            end: {
                                                line: 51,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 52,
                                                column: 6
                                            },
                                            end: {
                                                line: 54,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 56,
                                                column: 6
                                            },
                                            end: {
                                                line: 58,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 59,
                                                column: 6
                                            },
                                            end: {
                                                line: 61,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 62,
                                                column: 6
                                            },
                                            end: {
                                                line: 64,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 65,
                                                column: 6
                                            },
                                            end: {
                                                line: 67,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 68,
                                                column: 6
                                            },
                                            end: {
                                                line: 70,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 71,
                                                column: 6
                                            },
                                            end: {
                                                line: 73,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 74,
                                                column: 6
                                            },
                                            end: {
                                                line: 76,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 77,
                                                column: 6
                                            },
                                            end: {
                                                line: 79,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 80,
                                                column: 6
                                            },
                                            end: {
                                                line: 82,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 83,
                                                column: 6
                                            },
                                            end: {
                                                line: 85,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 86,
                                                column: 6
                                            },
                                            end: {
                                                line: 88,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 89,
                                                column: 6
                                            },
                                            end: {
                                                line: 91,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 92,
                                                column: 6
                                            },
                                            end: {
                                                line: 94,
                                                column: 14
                                            }
                                        },
                                        {
                                            start: {
                                                line: 96,
                                                column: 6
                                            },
                                            end: {
                                                line: 98,
                                                column: 14
                                            }
                                        }
                                    ],
                                    line: 29
                                }
                            },
                            s: {
                                '0': 0,
                                '1': 0,
                                '2': 0,
                                '3': 0,
                                '4': 0,
                                '5': 0,
                                '6': 0,
                                '7': 0,
                                '8': 0,
                                '9': 0,
                                '10': 0,
                                '11': 0,
                                '12': 0,
                                '13': 0,
                                '14': 0,
                                '15': 0,
                                '16': 0,
                                '17': 0,
                                '18': 0,
                                '19': 0,
                                '20': 0,
                                '21': 0,
                                '22': 0,
                                '23': 0,
                                '24': 0,
                                '25': 0,
                                '26': 0,
                                '27': 0,
                                '28': 0,
                                '29': 0,
                                '30': 0,
                                '31': 0,
                                '32': 0,
                                '33': 0,
                                '34': 0,
                                '35': 0,
                                '36': 0,
                                '37': 0,
                                '38': 0,
                                '39': 0,
                                '40': 0,
                                '41': 0,
                                '42': 0,
                                '43': 0,
                                '44': 0,
                                '45': 0,
                                '46': 0,
                                '47': 0,
                                '48': 0
                            },
                            f: {
                                '0': 0,
                                '1': 0,
                                '2': 0
                            },
                            b: {
                                '0': [
                                    0,
                                    0
                                ],
                                '1': [
                                    0,
                                    0
                                ],
                                '2': [
                                    0,
                                    0
                                ],
                                '3': [
                                    0,
                                    0
                                ],
                                '4': [
                                    0,
                                    0
                                ],
                                '5': [
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                ]
                            },
                            _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
                        }, coverage = global[gcv] || (global[gcv] = {});
                    if (coverage[path] && coverage[path].hash === hash) {
                        return coverage[path];
                    }
                    coverageData.hash = hash;
                    return coverage[path] = coverageData;
                }();
                cov_11pz0yfpk0.s[0]++;
                module.exports = function (hook) {
                    cov_11pz0yfpk0.f[0]++;
                    function __hook_except_properties__(f, thisArg, args, context, newTarget) {
                        cov_11pz0yfpk0.f[1]++;
                        cov_11pz0yfpk0.s[1]++;
                        return newTarget ? (cov_11pz0yfpk0.b[0][0]++, Reflect.construct(f, args)) : (cov_11pz0yfpk0.b[0][1]++, thisArg ? (cov_11pz0yfpk0.b[1][0]++, f.apply(thisArg, args)) : (cov_11pz0yfpk0.b[1][1]++, f(...args)));
                    }
                    function __hook__(f, thisArg, args, context, newTarget) {
                        cov_11pz0yfpk0.f[2]++;
                        let result;
                        cov_11pz0yfpk0.s[2]++;
                        if (typeof f === 'function') {
                            cov_11pz0yfpk0.b[2][0]++;
                            cov_11pz0yfpk0.s[3]++;
                            result = newTarget ? (cov_11pz0yfpk0.b[3][0]++, Reflect.construct(f, args)) : (cov_11pz0yfpk0.b[3][1]++, thisArg ? (cov_11pz0yfpk0.b[4][0]++, f.apply(thisArg, args)) : (cov_11pz0yfpk0.b[4][1]++, f(...args)));
                        } else {
                            cov_11pz0yfpk0.b[2][1]++;
                            cov_11pz0yfpk0.s[4]++;
                            switch (f) {
                            case '.':
                                cov_11pz0yfpk0.b[5][0]++;
                            case '[]':
                                cov_11pz0yfpk0.b[5][1]++;
                                cov_11pz0yfpk0.s[5]++;
                                result = thisArg[args[0]];
                                cov_11pz0yfpk0.s[6]++;
                                break;
                            case '()':
                                cov_11pz0yfpk0.b[5][2]++;
                                cov_11pz0yfpk0.s[7]++;
                                result = thisArg[args[0]].apply(thisArg, args[1]);
                                cov_11pz0yfpk0.s[8]++;
                                break;
                            case 'p++':
                                cov_11pz0yfpk0.b[5][3]++;
                                cov_11pz0yfpk0.s[9]++;
                                result = thisArg[args[0]]++;
                                cov_11pz0yfpk0.s[10]++;
                                break;
                            case '++p':
                                cov_11pz0yfpk0.b[5][4]++;
                                cov_11pz0yfpk0.s[11]++;
                                result = ++thisArg[args[0]];
                                cov_11pz0yfpk0.s[12]++;
                                break;
                            case 'p--':
                                cov_11pz0yfpk0.b[5][5]++;
                                cov_11pz0yfpk0.s[13]++;
                                result = thisArg[args[0]]--;
                                cov_11pz0yfpk0.s[14]++;
                                break;
                            case '--p':
                                cov_11pz0yfpk0.b[5][6]++;
                                cov_11pz0yfpk0.s[15]++;
                                result = --thisArg[args[0]];
                                cov_11pz0yfpk0.s[16]++;
                                break;
                            case 'delete':
                                cov_11pz0yfpk0.b[5][7]++;
                                cov_11pz0yfpk0.s[17]++;
                                result = delete thisArg[args[0]];
                                cov_11pz0yfpk0.s[18]++;
                                break;
                            case '=':
                                cov_11pz0yfpk0.b[5][8]++;
                                cov_11pz0yfpk0.s[19]++;
                                result = thisArg[args[0]] = args[1];
                                cov_11pz0yfpk0.s[20]++;
                                break;
                            case '+=':
                                cov_11pz0yfpk0.b[5][9]++;
                                cov_11pz0yfpk0.s[21]++;
                                result = thisArg[args[0]] += args[1];
                                cov_11pz0yfpk0.s[22]++;
                                break;
                            case '-=':
                                cov_11pz0yfpk0.b[5][10]++;
                                cov_11pz0yfpk0.s[23]++;
                                result = thisArg[args[0]] -= args[1];
                                cov_11pz0yfpk0.s[24]++;
                                break;
                            case '*=':
                                cov_11pz0yfpk0.b[5][11]++;
                                cov_11pz0yfpk0.s[25]++;
                                result = thisArg[args[0]] *= args[1];
                                cov_11pz0yfpk0.s[26]++;
                                break;
                            case '/=':
                                cov_11pz0yfpk0.b[5][12]++;
                                cov_11pz0yfpk0.s[27]++;
                                result = thisArg[args[0]] /= args[1];
                                cov_11pz0yfpk0.s[28]++;
                                break;
                            case '%=':
                                cov_11pz0yfpk0.b[5][13]++;
                                cov_11pz0yfpk0.s[29]++;
                                result = thisArg[args[0]] %= args[1];
                                cov_11pz0yfpk0.s[30]++;
                                break;
                            case '**=':
                                cov_11pz0yfpk0.b[5][14]++;
                                cov_11pz0yfpk0.s[31]++;
                                result = thisArg[args[0]] **= args[1];
                                cov_11pz0yfpk0.s[32]++;
                                break;
                            case '<<=':
                                cov_11pz0yfpk0.b[5][15]++;
                                cov_11pz0yfpk0.s[33]++;
                                result = thisArg[args[0]] <<= args[1];
                                cov_11pz0yfpk0.s[34]++;
                                break;
                            case '>>=':
                                cov_11pz0yfpk0.b[5][16]++;
                                cov_11pz0yfpk0.s[35]++;
                                result = thisArg[args[0]] >>= args[1];
                                cov_11pz0yfpk0.s[36]++;
                                break;
                            case '>>>=':
                                cov_11pz0yfpk0.b[5][17]++;
                                cov_11pz0yfpk0.s[37]++;
                                result = thisArg[args[0]] >>>= args[1];
                                cov_11pz0yfpk0.s[38]++;
                                break;
                            case '&=':
                                cov_11pz0yfpk0.b[5][18]++;
                                cov_11pz0yfpk0.s[39]++;
                                result = thisArg[args[0]] &= args[1];
                                cov_11pz0yfpk0.s[40]++;
                                break;
                            case '^=':
                                cov_11pz0yfpk0.b[5][19]++;
                                cov_11pz0yfpk0.s[41]++;
                                result = thisArg[args[0]] ^= args[1];
                                cov_11pz0yfpk0.s[42]++;
                                break;
                            case '|=':
                                cov_11pz0yfpk0.b[5][20]++;
                                cov_11pz0yfpk0.s[43]++;
                                result = thisArg[args[0]] |= args[1];
                                cov_11pz0yfpk0.s[44]++;
                                break;
                            default:
                                cov_11pz0yfpk0.b[5][21]++;
                                cov_11pz0yfpk0.s[45]++;
                                result = null;
                                cov_11pz0yfpk0.s[46]++;
                                break;
                            }
                        }
                        cov_11pz0yfpk0.s[47]++;
                        return result;
                    }
                    cov_11pz0yfpk0.s[48]++;
                    return {
                        __hook__: __hook__,
                        __hook_except_properties__: __hook_except_properties__
                    };
                };
            },
            {}
        ],
        102: [
            function (require, module, exports) {
                (function (global) {
                    var cov_buovmc4uu = function () {
                        var path = '/home/fedora/WebComponents/components/thin-hook/lib/native-wrapper.js', hash = '12e278e50608744a5dcc24a8b8e7b6e39e218ecf', global = new Function('return this')(), gcv = '__coverage__', coverageData = {
                                path: '/home/fedora/WebComponents/components/thin-hook/lib/native-wrapper.js',
                                statementMap: {
                                    '0': {
                                        start: {
                                            line: 6,
                                            column: 0
                                        },
                                        end: {
                                            line: 379,
                                            column: 1
                                        }
                                    },
                                    '1': {
                                        start: {
                                            line: 8,
                                            column: 18
                                        },
                                        end: {
                                            line: 8,
                                            column: 132
                                        }
                                    },
                                    '2': {
                                        start: {
                                            line: 10,
                                            column: 18
                                        },
                                        end: {
                                            line: 25,
                                            column: 3
                                        }
                                    },
                                    '3': {
                                        start: {
                                            line: 26,
                                            column: 25
                                        },
                                        end: {
                                            line: 64,
                                            column: 3
                                        }
                                    },
                                    '4': {
                                        start: {
                                            line: 65,
                                            column: 18
                                        },
                                        end: {
                                            line: 67,
                                            column: 3
                                        }
                                    },
                                    '5': {
                                        start: {
                                            line: 70,
                                            column: 4
                                        },
                                        end: {
                                            line: 76,
                                            column: 5
                                        }
                                    },
                                    '6': {
                                        start: {
                                            line: 71,
                                            column: 6
                                        },
                                        end: {
                                            line: 74,
                                            column: 7
                                        }
                                    },
                                    '7': {
                                        start: {
                                            line: 72,
                                            column: 21
                                        },
                                        end: {
                                            line: 72,
                                            column: 137
                                        }
                                    },
                                    '8': {
                                        start: {
                                            line: 73,
                                            column: 8
                                        },
                                        end: {
                                            line: 73,
                                            column: 39
                                        }
                                    },
                                    '9': {
                                        start: {
                                            line: 75,
                                            column: 6
                                        },
                                        end: {
                                            line: 75,
                                            column: 55
                                        }
                                    },
                                    '10': {
                                        start: {
                                            line: 84,
                                            column: 16
                                        },
                                        end: {
                                            line: 96,
                                            column: 5
                                        }
                                    },
                                    '11': {
                                        start: {
                                            line: 84,
                                            column: 67
                                        },
                                        end: {
                                            line: 84,
                                            column: 80
                                        }
                                    },
                                    '12': {
                                        start: {
                                            line: 85,
                                            column: 6
                                        },
                                        end: {
                                            line: 94,
                                            column: 7
                                        }
                                    },
                                    '13': {
                                        start: {
                                            line: 88,
                                            column: 8
                                        },
                                        end: {
                                            line: 88,
                                            column: 99
                                        }
                                    },
                                    '14': {
                                        start: {
                                            line: 89,
                                            column: 8
                                        },
                                        end: {
                                            line: 89,
                                            column: 55
                                        }
                                    },
                                    '15': {
                                        start: {
                                            line: 89,
                                            column: 41
                                        },
                                        end: {
                                            line: 89,
                                            column: 54
                                        }
                                    },
                                    '16': {
                                        start: {
                                            line: 90,
                                            column: 8
                                        },
                                        end: {
                                            line: 90,
                                            column: 86
                                        }
                                    },
                                    '17': {
                                        start: {
                                            line: 92,
                                            column: 11
                                        },
                                        end: {
                                            line: 94,
                                            column: 7
                                        }
                                    },
                                    '18': {
                                        start: {
                                            line: 93,
                                            column: 8
                                        },
                                        end: {
                                            line: 93,
                                            column: 74
                                        }
                                    },
                                    '19': {
                                        start: {
                                            line: 95,
                                            column: 6
                                        },
                                        end: {
                                            line: 95,
                                            column: 82
                                        }
                                    },
                                    '20': {
                                        start: {
                                            line: 97,
                                            column: 4
                                        },
                                        end: {
                                            line: 97,
                                            column: 117
                                        }
                                    },
                                    '21': {
                                        start: {
                                            line: 98,
                                            column: 4
                                        },
                                        end: {
                                            line: 98,
                                            column: 17
                                        }
                                    },
                                    '22': {
                                        start: {
                                            line: 102,
                                            column: 4
                                        },
                                        end: {
                                            line: 107,
                                            column: 5
                                        }
                                    },
                                    '23': {
                                        start: {
                                            line: 103,
                                            column: 6
                                        },
                                        end: {
                                            line: 105,
                                            column: 7
                                        }
                                    },
                                    '24': {
                                        start: {
                                            line: 104,
                                            column: 8
                                        },
                                        end: {
                                            line: 104,
                                            column: 100
                                        }
                                    },
                                    '25': {
                                        start: {
                                            line: 106,
                                            column: 6
                                        },
                                        end: {
                                            line: 106,
                                            column: 77
                                        }
                                    },
                                    '26': {
                                        start: {
                                            line: 111,
                                            column: 4
                                        },
                                        end: {
                                            line: 116,
                                            column: 5
                                        }
                                    },
                                    '27': {
                                        start: {
                                            line: 112,
                                            column: 6
                                        },
                                        end: {
                                            line: 114,
                                            column: 7
                                        }
                                    },
                                    '28': {
                                        start: {
                                            line: 113,
                                            column: 8
                                        },
                                        end: {
                                            line: 113,
                                            column: 100
                                        }
                                    },
                                    '29': {
                                        start: {
                                            line: 115,
                                            column: 6
                                        },
                                        end: {
                                            line: 115,
                                            column: 79
                                        }
                                    },
                                    '30': {
                                        start: {
                                            line: 119,
                                            column: 22
                                        },
                                        end: {
                                            line: 138,
                                            column: 3
                                        }
                                    },
                                    '31': {
                                        start: {
                                            line: 141,
                                            column: 4
                                        },
                                        end: {
                                            line: 156,
                                            column: 5
                                        }
                                    },
                                    '32': {
                                        start: {
                                            line: 142,
                                            column: 6
                                        },
                                        end: {
                                            line: 155,
                                            column: 9
                                        }
                                    },
                                    '33': {
                                        start: {
                                            line: 147,
                                            column: 10
                                        },
                                        end: {
                                            line: 152,
                                            column: 11
                                        }
                                    },
                                    '34': {
                                        start: {
                                            line: 148,
                                            column: 12
                                        },
                                        end: {
                                            line: 151,
                                            column: 13
                                        }
                                    },
                                    '35': {
                                        start: {
                                            line: 150,
                                            column: 14
                                        },
                                        end: {
                                            line: 150,
                                            column: 78
                                        }
                                    },
                                    '36': {
                                        start: {
                                            line: 153,
                                            column: 10
                                        },
                                        end: {
                                            line: 153,
                                            column: 137
                                        }
                                    },
                                    '37': {
                                        start: {
                                            line: 157,
                                            column: 4
                                        },
                                        end: {
                                            line: 157,
                                            column: 24
                                        }
                                    },
                                    '38': {
                                        start: {
                                            line: 161,
                                            column: 4
                                        },
                                        end: {
                                            line: 200,
                                            column: 5
                                        }
                                    },
                                    '39': {
                                        start: {
                                            line: 162,
                                            column: 6
                                        },
                                        end: {
                                            line: 199,
                                            column: 9
                                        }
                                    },
                                    '40': {
                                        start: {
                                            line: 167,
                                            column: 23
                                        },
                                        end: {
                                            line: 167,
                                            column: 28
                                        }
                                    },
                                    '41': {
                                        start: {
                                            line: 168,
                                            column: 22
                                        },
                                        end: {
                                            line: 168,
                                            column: 52
                                        }
                                    },
                                    '42': {
                                        start: {
                                            line: 169,
                                            column: 23
                                        },
                                        end: {
                                            line: 169,
                                            column: 68
                                        }
                                    },
                                    '43': {
                                        start: {
                                            line: 170,
                                            column: 10
                                        },
                                        end: {
                                            line: 192,
                                            column: 11
                                        }
                                    },
                                    '44': {
                                        start: {
                                            line: 172,
                                            column: 12
                                        },
                                        end: {
                                            line: 178,
                                            column: 13
                                        }
                                    },
                                    '45': {
                                        start: {
                                            line: 175,
                                            column: 14
                                        },
                                        end: {
                                            line: 177,
                                            column: 15
                                        }
                                    },
                                    '46': {
                                        start: {
                                            line: 176,
                                            column: 16
                                        },
                                        end: {
                                            line: 176,
                                            column: 30
                                        }
                                    },
                                    '47': {
                                        start: {
                                            line: 179,
                                            column: 12
                                        },
                                        end: {
                                            line: 179,
                                            column: 18
                                        }
                                    },
                                    '48': {
                                        start: {
                                            line: 181,
                                            column: 12
                                        },
                                        end: {
                                            line: 184,
                                            column: 13
                                        }
                                    },
                                    '49': {
                                        start: {
                                            line: 182,
                                            column: 14
                                        },
                                        end: {
                                            line: 183,
                                            column: 151
                                        }
                                    },
                                    '50': {
                                        start: {
                                            line: 185,
                                            column: 12
                                        },
                                        end: {
                                            line: 185,
                                            column: 18
                                        }
                                    },
                                    '51': {
                                        start: {
                                            line: 187,
                                            column: 12
                                        },
                                        end: {
                                            line: 190,
                                            column: 13
                                        }
                                    },
                                    '52': {
                                        start: {
                                            line: 188,
                                            column: 14
                                        },
                                        end: {
                                            line: 189,
                                            column: 139
                                        }
                                    },
                                    '53': {
                                        start: {
                                            line: 191,
                                            column: 12
                                        },
                                        end: {
                                            line: 191,
                                            column: 18
                                        }
                                    },
                                    '54': {
                                        start: {
                                            line: 193,
                                            column: 23
                                        },
                                        end: {
                                            line: 193,
                                            column: 151
                                        }
                                    },
                                    '55': {
                                        start: {
                                            line: 194,
                                            column: 10
                                        },
                                        end: {
                                            line: 196,
                                            column: 11
                                        }
                                    },
                                    '56': {
                                        start: {
                                            line: 195,
                                            column: 12
                                        },
                                        end: {
                                            line: 195,
                                            column: 48
                                        }
                                    },
                                    '57': {
                                        start: {
                                            line: 197,
                                            column: 10
                                        },
                                        end: {
                                            line: 197,
                                            column: 24
                                        }
                                    },
                                    '58': {
                                        start: {
                                            line: 201,
                                            column: 4
                                        },
                                        end: {
                                            line: 201,
                                            column: 27
                                        }
                                    },
                                    '59': {
                                        start: {
                                            line: 205,
                                            column: 4
                                        },
                                        end: {
                                            line: 205,
                                            column: 57
                                        }
                                    },
                                    '60': {
                                        start: {
                                            line: 206,
                                            column: 4
                                        },
                                        end: {
                                            line: 206,
                                            column: 60
                                        }
                                    },
                                    '61': {
                                        start: {
                                            line: 207,
                                            column: 4
                                        },
                                        end: {
                                            line: 229,
                                            column: 5
                                        }
                                    },
                                    '62': {
                                        start: {
                                            line: 209,
                                            column: 6
                                        },
                                        end: {
                                            line: 228,
                                            column: 9
                                        }
                                    },
                                    '63': {
                                        start: {
                                            line: 214,
                                            column: 23
                                        },
                                        end: {
                                            line: 214,
                                            column: 28
                                        }
                                    },
                                    '64': {
                                        start: {
                                            line: 215,
                                            column: 10
                                        },
                                        end: {
                                            line: 221,
                                            column: 11
                                        }
                                    },
                                    '65': {
                                        start: {
                                            line: 218,
                                            column: 12
                                        },
                                        end: {
                                            line: 220,
                                            column: 13
                                        }
                                    },
                                    '66': {
                                        start: {
                                            line: 219,
                                            column: 14
                                        },
                                        end: {
                                            line: 219,
                                            column: 28
                                        }
                                    },
                                    '67': {
                                        start: {
                                            line: 222,
                                            column: 23
                                        },
                                        end: {
                                            line: 222,
                                            column: 141
                                        }
                                    },
                                    '68': {
                                        start: {
                                            line: 223,
                                            column: 10
                                        },
                                        end: {
                                            line: 225,
                                            column: 11
                                        }
                                    },
                                    '69': {
                                        start: {
                                            line: 224,
                                            column: 12
                                        },
                                        end: {
                                            line: 224,
                                            column: 48
                                        }
                                    },
                                    '70': {
                                        start: {
                                            line: 226,
                                            column: 10
                                        },
                                        end: {
                                            line: 226,
                                            column: 24
                                        }
                                    },
                                    '71': {
                                        start: {
                                            line: 230,
                                            column: 4
                                        },
                                        end: {
                                            line: 230,
                                            column: 37
                                        }
                                    },
                                    '72': {
                                        start: {
                                            line: 234,
                                            column: 4
                                        },
                                        end: {
                                            line: 249,
                                            column: 5
                                        }
                                    },
                                    '73': {
                                        start: {
                                            line: 235,
                                            column: 6
                                        },
                                        end: {
                                            line: 248,
                                            column: 9
                                        }
                                    },
                                    '74': {
                                        start: {
                                            line: 240,
                                            column: 23
                                        },
                                        end: {
                                            line: 240,
                                            column: 28
                                        }
                                    },
                                    '75': {
                                        start: {
                                            line: 241,
                                            column: 23
                                        },
                                        end: {
                                            line: 241,
                                            column: 68
                                        }
                                    },
                                    '76': {
                                        start: {
                                            line: 242,
                                            column: 10
                                        },
                                        end: {
                                            line: 245,
                                            column: 11
                                        }
                                    },
                                    '77': {
                                        start: {
                                            line: 243,
                                            column: 12
                                        },
                                        end: {
                                            line: 244,
                                            column: 136
                                        }
                                    },
                                    '78': {
                                        start: {
                                            line: 246,
                                            column: 10
                                        },
                                        end: {
                                            line: 246,
                                            column: 126
                                        }
                                    },
                                    '79': {
                                        start: {
                                            line: 250,
                                            column: 4
                                        },
                                        end: {
                                            line: 250,
                                            column: 27
                                        }
                                    },
                                    '80': {
                                        start: {
                                            line: 254,
                                            column: 4
                                        },
                                        end: {
                                            line: 254,
                                            column: 77
                                        }
                                    },
                                    '81': {
                                        start: {
                                            line: 258,
                                            column: 4
                                        },
                                        end: {
                                            line: 258,
                                            column: 75
                                        }
                                    },
                                    '82': {
                                        start: {
                                            line: 262,
                                            column: 4
                                        },
                                        end: {
                                            line: 297,
                                            column: 5
                                        }
                                    },
                                    '83': {
                                        start: {
                                            line: 263,
                                            column: 6
                                        },
                                        end: {
                                            line: 296,
                                            column: 9
                                        }
                                    },
                                    '84': {
                                        start: {
                                            line: 268,
                                            column: 29
                                        },
                                        end: {
                                            line: 268,
                                            column: 30
                                        }
                                    },
                                    '85': {
                                        start: {
                                            line: 269,
                                            column: 10
                                        },
                                        end: {
                                            line: 282,
                                            column: 11
                                        }
                                    },
                                    '86': {
                                        start: {
                                            line: 270,
                                            column: 23
                                        },
                                        end: {
                                            line: 270,
                                            column: 41
                                        }
                                    },
                                    '87': {
                                        start: {
                                            line: 271,
                                            column: 28
                                        },
                                        end: {
                                            line: 271,
                                            column: 42
                                        }
                                    },
                                    '88': {
                                        start: {
                                            line: 272,
                                            column: 30
                                        },
                                        end: {
                                            line: 272,
                                            column: 46
                                        }
                                    },
                                    '89': {
                                        start: {
                                            line: 273,
                                            column: 12
                                        },
                                        end: {
                                            line: 281,
                                            column: 13
                                        }
                                    },
                                    '90': {
                                        start: {
                                            line: 274,
                                            column: 14
                                        },
                                        end: {
                                            line: 274,
                                            column: 47
                                        }
                                    },
                                    '91': {
                                        start: {
                                            line: 276,
                                            column: 17
                                        },
                                        end: {
                                            line: 281,
                                            column: 13
                                        }
                                    },
                                    '92': {
                                        start: {
                                            line: 277,
                                            column: 14
                                        },
                                        end: {
                                            line: 277,
                                            column: 49
                                        }
                                    },
                                    '93': {
                                        start: {
                                            line: 278,
                                            column: 14
                                        },
                                        end: {
                                            line: 280,
                                            column: 15
                                        }
                                    },
                                    '94': {
                                        start: {
                                            line: 279,
                                            column: 16
                                        },
                                        end: {
                                            line: 279,
                                            column: 34
                                        }
                                    },
                                    '95': {
                                        start: {
                                            line: 283,
                                            column: 26
                                        },
                                        end: {
                                            line: 293,
                                            column: 41
                                        }
                                    },
                                    '96': {
                                        start: {
                                            line: 294,
                                            column: 10
                                        },
                                        end: {
                                            line: 294,
                                            column: 131
                                        }
                                    },
                                    '97': {
                                        start: {
                                            line: 298,
                                            column: 4
                                        },
                                        end: {
                                            line: 298,
                                            column: 28
                                        }
                                    },
                                    '98': {
                                        start: {
                                            line: 303,
                                            column: 17
                                        },
                                        end: {
                                            line: 303,
                                            column: 62
                                        }
                                    },
                                    '99': {
                                        start: {
                                            line: 304,
                                            column: 6
                                        },
                                        end: {
                                            line: 310,
                                            column: 7
                                        }
                                    },
                                    '100': {
                                        start: {
                                            line: 305,
                                            column: 8
                                        },
                                        end: {
                                            line: 305,
                                            column: 34
                                        }
                                    },
                                    '101': {
                                        start: {
                                            line: 306,
                                            column: 8
                                        },
                                        end: {
                                            line: 308,
                                            column: 9
                                        }
                                    },
                                    '102': {
                                        start: {
                                            line: 307,
                                            column: 10
                                        },
                                        end: {
                                            line: 307,
                                            column: 32
                                        }
                                    },
                                    '103': {
                                        start: {
                                            line: 309,
                                            column: 8
                                        },
                                        end: {
                                            line: 309,
                                            column: 50
                                        }
                                    },
                                    '104': {
                                        start: {
                                            line: 312,
                                            column: 4
                                        },
                                        end: {
                                            line: 314,
                                            column: 7
                                        }
                                    },
                                    '105': {
                                        start: {
                                            line: 313,
                                            column: 6
                                        },
                                        end: {
                                            line: 313,
                                            column: 36
                                        }
                                    },
                                    '106': {
                                        start: {
                                            line: 315,
                                            column: 4
                                        },
                                        end: {
                                            line: 317,
                                            column: 7
                                        }
                                    },
                                    '107': {
                                        start: {
                                            line: 316,
                                            column: 6
                                        },
                                        end: {
                                            line: 316,
                                            column: 46
                                        }
                                    },
                                    '108': {
                                        start: {
                                            line: 321,
                                            column: 19
                                        },
                                        end: {
                                            line: 321,
                                            column: 26
                                        }
                                    },
                                    '109': {
                                        start: {
                                            line: 322,
                                            column: 4
                                        },
                                        end: {
                                            line: 363,
                                            column: 7
                                        }
                                    },
                                    '110': {
                                        start: {
                                            line: 323,
                                            column: 6
                                        },
                                        end: {
                                            line: 362,
                                            column: 7
                                        }
                                    },
                                    '111': {
                                        start: {
                                            line: 325,
                                            column: 8
                                        },
                                        end: {
                                            line: 330,
                                            column: 11
                                        }
                                    },
                                    '112': {
                                        start: {
                                            line: 326,
                                            column: 21
                                        },
                                        end: {
                                            line: 326,
                                            column: 80
                                        }
                                    },
                                    '113': {
                                        start: {
                                            line: 327,
                                            column: 10
                                        },
                                        end: {
                                            line: 329,
                                            column: 11
                                        }
                                    },
                                    '114': {
                                        start: {
                                            line: 328,
                                            column: 12
                                        },
                                        end: {
                                            line: 328,
                                            column: 54
                                        }
                                    },
                                    '115': {
                                        start: {
                                            line: 331,
                                            column: 8
                                        },
                                        end: {
                                            line: 333,
                                            column: 71
                                        }
                                    },
                                    '116': {
                                        start: {
                                            line: 332,
                                            column: 41
                                        },
                                        end: {
                                            line: 332,
                                            column: 98
                                        }
                                    },
                                    '117': {
                                        start: {
                                            line: 334,
                                            column: 8
                                        },
                                        end: {
                                            line: 335,
                                            column: 86
                                        }
                                    },
                                    '118': {
                                        start: {
                                            line: 336,
                                            column: 8
                                        },
                                        end: {
                                            line: 336,
                                            column: 34
                                        }
                                    },
                                    '119': {
                                        start: {
                                            line: 337,
                                            column: 8
                                        },
                                        end: {
                                            line: 338,
                                            column: 86
                                        }
                                    },
                                    '120': {
                                        start: {
                                            line: 339,
                                            column: 8
                                        },
                                        end: {
                                            line: 339,
                                            column: 14
                                        }
                                    },
                                    '121': {
                                        start: {
                                            line: 342,
                                            column: 8
                                        },
                                        end: {
                                            line: 344,
                                            column: 71
                                        }
                                    },
                                    '122': {
                                        start: {
                                            line: 343,
                                            column: 41
                                        },
                                        end: {
                                            line: 343,
                                            column: 98
                                        }
                                    },
                                    '123': {
                                        start: {
                                            line: 345,
                                            column: 8
                                        },
                                        end: {
                                            line: 345,
                                            column: 34
                                        }
                                    },
                                    '124': {
                                        start: {
                                            line: 346,
                                            column: 8
                                        },
                                        end: {
                                            line: 347,
                                            column: 86
                                        }
                                    },
                                    '125': {
                                        start: {
                                            line: 348,
                                            column: 8
                                        },
                                        end: {
                                            line: 348,
                                            column: 14
                                        }
                                    },
                                    '126': {
                                        start: {
                                            line: 350,
                                            column: 8
                                        },
                                        end: {
                                            line: 350,
                                            column: 34
                                        }
                                    },
                                    '127': {
                                        start: {
                                            line: 351,
                                            column: 8
                                        },
                                        end: {
                                            line: 352,
                                            column: 86
                                        }
                                    },
                                    '128': {
                                        start: {
                                            line: 353,
                                            column: 8
                                        },
                                        end: {
                                            line: 353,
                                            column: 14
                                        }
                                    },
                                    '129': {
                                        start: {
                                            line: 355,
                                            column: 8
                                        },
                                        end: {
                                            line: 355,
                                            column: 34
                                        }
                                    },
                                    '130': {
                                        start: {
                                            line: 356,
                                            column: 8
                                        },
                                        end: {
                                            line: 357,
                                            column: 86
                                        }
                                    },
                                    '131': {
                                        start: {
                                            line: 358,
                                            column: 8
                                        },
                                        end: {
                                            line: 358,
                                            column: 14
                                        }
                                    },
                                    '132': {
                                        start: {
                                            line: 361,
                                            column: 8
                                        },
                                        end: {
                                            line: 361,
                                            column: 14
                                        }
                                    },
                                    '133': {
                                        start: {
                                            line: 366,
                                            column: 2
                                        },
                                        end: {
                                            line: 378,
                                            column: 4
                                        }
                                    }
                                },
                                fnMap: {
                                    '0': {
                                        name: '(anonymous_0)',
                                        decl: {
                                            start: {
                                                line: 6,
                                                column: 17
                                            },
                                            end: {
                                                line: 6,
                                                column: 18
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 6,
                                                column: 45
                                            },
                                            end: {
                                                line: 379,
                                                column: 1
                                            }
                                        },
                                        line: 6
                                    },
                                    '1': {
                                        name: 'hookFunction',
                                        decl: {
                                            start: {
                                                line: 69,
                                                column: 11
                                            },
                                            end: {
                                                line: 69,
                                                column: 23
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 69,
                                                column: 89
                                            },
                                            end: {
                                                line: 77,
                                                column: 3
                                            }
                                        },
                                        line: 69
                                    },
                                    '2': {
                                        name: 'Function',
                                        decl: {
                                            start: {
                                                line: 70,
                                                column: 20
                                            },
                                            end: {
                                                line: 70,
                                                column: 28
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 70,
                                                column: 38
                                            },
                                            end: {
                                                line: 76,
                                                column: 5
                                            }
                                        },
                                        line: 70
                                    },
                                    '3': {
                                        name: 'hookEval',
                                        decl: {
                                            start: {
                                                line: 79,
                                                column: 11
                                            },
                                            end: {
                                                line: 79,
                                                column: 19
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 79,
                                                column: 81
                                            },
                                            end: {
                                                line: 99,
                                                column: 3
                                            }
                                        },
                                        line: 79
                                    },
                                    '4': {
                                        name: '(anonymous_4)',
                                        decl: {
                                            start: {
                                                line: 84,
                                                column: 16
                                            },
                                            end: {
                                                line: 84,
                                                column: 17
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 84,
                                                column: 82
                                            },
                                            end: {
                                                line: 96,
                                                column: 5
                                            }
                                        },
                                        line: 84
                                    },
                                    '5': {
                                        name: '(anonymous_5)',
                                        decl: {
                                            start: {
                                                line: 84,
                                                column: 48
                                            },
                                            end: {
                                                line: 84,
                                                column: 49
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 84,
                                                column: 67
                                            },
                                            end: {
                                                line: 84,
                                                column: 80
                                            }
                                        },
                                        line: 84
                                    },
                                    '6': {
                                        name: '(anonymous_6)',
                                        decl: {
                                            start: {
                                                line: 89,
                                                column: 22
                                            },
                                            end: {
                                                line: 89,
                                                column: 23
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 89,
                                                column: 41
                                            },
                                            end: {
                                                line: 89,
                                                column: 54
                                            }
                                        },
                                        line: 89
                                    },
                                    '7': {
                                        name: 'hookSetTimeout',
                                        decl: {
                                            start: {
                                                line: 101,
                                                column: 11
                                            },
                                            end: {
                                                line: 101,
                                                column: 25
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 101,
                                                column: 93
                                            },
                                            end: {
                                                line: 108,
                                                column: 3
                                            }
                                        },
                                        line: 101
                                    },
                                    '8': {
                                        name: 'setTimeout',
                                        decl: {
                                            start: {
                                                line: 102,
                                                column: 20
                                            },
                                            end: {
                                                line: 102,
                                                column: 30
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 102,
                                                column: 40
                                            },
                                            end: {
                                                line: 107,
                                                column: 5
                                            }
                                        },
                                        line: 102
                                    },
                                    '9': {
                                        name: 'hookSetInterval',
                                        decl: {
                                            start: {
                                                line: 110,
                                                column: 11
                                            },
                                            end: {
                                                line: 110,
                                                column: 26
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 110,
                                                column: 95
                                            },
                                            end: {
                                                line: 117,
                                                column: 3
                                            }
                                        },
                                        line: 110
                                    },
                                    '10': {
                                        name: 'setInterval',
                                        decl: {
                                            start: {
                                                line: 111,
                                                column: 20
                                            },
                                            end: {
                                                line: 111,
                                                column: 31
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 111,
                                                column: 41
                                            },
                                            end: {
                                                line: 116,
                                                column: 5
                                            }
                                        },
                                        line: 111
                                    },
                                    '11': {
                                        name: 'hookNode',
                                        decl: {
                                            start: {
                                                line: 140,
                                                column: 11
                                            },
                                            end: {
                                                line: 140,
                                                column: 19
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 140,
                                                column: 81
                                            },
                                            end: {
                                                line: 158,
                                                column: 3
                                            }
                                        },
                                        line: 140
                                    },
                                    '12': {
                                        name: '(anonymous_12)',
                                        decl: {
                                            start: {
                                                line: 146,
                                                column: 13
                                            },
                                            end: {
                                                line: 146,
                                                column: 14
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 146,
                                                column: 30
                                            },
                                            end: {
                                                line: 154,
                                                column: 9
                                            }
                                        },
                                        line: 146
                                    },
                                    '13': {
                                        name: 'hookElement',
                                        decl: {
                                            start: {
                                                line: 160,
                                                column: 11
                                            },
                                            end: {
                                                line: 160,
                                                column: 22
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 160,
                                                column: 87
                                            },
                                            end: {
                                                line: 202,
                                                column: 3
                                            }
                                        },
                                        line: 160
                                    },
                                    '14': {
                                        name: 'setAttribute',
                                        decl: {
                                            start: {
                                                line: 166,
                                                column: 24
                                            },
                                            end: {
                                                line: 166,
                                                column: 36
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 166,
                                                column: 50
                                            },
                                            end: {
                                                line: 198,
                                                column: 9
                                            }
                                        },
                                        line: 166
                                    },
                                    '15': {
                                        name: 'hookHTMLScriptElement',
                                        decl: {
                                            start: {
                                                line: 204,
                                                column: 11
                                            },
                                            end: {
                                                line: 204,
                                                column: 32
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 204,
                                                column: 107
                                            },
                                            end: {
                                                line: 231,
                                                column: 3
                                            }
                                        },
                                        line: 204
                                    },
                                    '16': {
                                        name: '(anonymous_16)',
                                        decl: {
                                            start: {
                                                line: 213,
                                                column: 13
                                            },
                                            end: {
                                                line: 213,
                                                column: 14
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 213,
                                                column: 30
                                            },
                                            end: {
                                                line: 227,
                                                column: 9
                                            }
                                        },
                                        line: 213
                                    },
                                    '17': {
                                        name: 'hookHrefProperty',
                                        decl: {
                                            start: {
                                                line: 233,
                                                column: 11
                                            },
                                            end: {
                                                line: 233,
                                                column: 27
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 233,
                                                column: 64
                                            },
                                            end: {
                                                line: 251,
                                                column: 3
                                            }
                                        },
                                        line: 233
                                    },
                                    '18': {
                                        name: 'href',
                                        decl: {
                                            start: {
                                                line: 239,
                                                column: 22
                                            },
                                            end: {
                                                line: 239,
                                                column: 26
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 239,
                                                column: 34
                                            },
                                            end: {
                                                line: 247,
                                                column: 9
                                            }
                                        },
                                        line: 239
                                    },
                                    '19': {
                                        name: 'hookHTMLAnchorElement',
                                        decl: {
                                            start: {
                                                line: 253,
                                                column: 11
                                            },
                                            end: {
                                                line: 253,
                                                column: 32
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 253,
                                                column: 107
                                            },
                                            end: {
                                                line: 255,
                                                column: 3
                                            }
                                        },
                                        line: 253
                                    },
                                    '20': {
                                        name: 'hookHTMLAreaElement',
                                        decl: {
                                            start: {
                                                line: 257,
                                                column: 11
                                            },
                                            end: {
                                                line: 257,
                                                column: 30
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 257,
                                                column: 103
                                            },
                                            end: {
                                                line: 259,
                                                column: 3
                                            }
                                        },
                                        line: 257
                                    },
                                    '21': {
                                        name: 'hookDocument',
                                        decl: {
                                            start: {
                                                line: 261,
                                                column: 11
                                            },
                                            end: {
                                                line: 261,
                                                column: 23
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 261,
                                                column: 89
                                            },
                                            end: {
                                                line: 299,
                                                column: 3
                                            }
                                        },
                                        line: 261
                                    },
                                    '22': {
                                        name: 'write',
                                        decl: {
                                            start: {
                                                line: 267,
                                                column: 24
                                            },
                                            end: {
                                                line: 267,
                                                column: 29
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 267,
                                                column: 38
                                            },
                                            end: {
                                                line: 295,
                                                column: 9
                                            }
                                        },
                                        line: 267
                                    },
                                    '23': {
                                        name: '_freezeProperties',
                                        decl: {
                                            start: {
                                                line: 301,
                                                column: 11
                                            },
                                            end: {
                                                line: 301,
                                                column: 28
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 301,
                                                column: 37
                                            },
                                            end: {
                                                line: 318,
                                                column: 3
                                            }
                                        },
                                        line: 301
                                    },
                                    '24': {
                                        name: '_freezeProperty',
                                        decl: {
                                            start: {
                                                line: 302,
                                                column: 13
                                            },
                                            end: {
                                                line: 302,
                                                column: 28
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 302,
                                                column: 43
                                            },
                                            end: {
                                                line: 311,
                                                column: 5
                                            }
                                        },
                                        line: 302
                                    },
                                    '25': {
                                        name: '(anonymous_25)',
                                        decl: {
                                            start: {
                                                line: 312,
                                                column: 95
                                            },
                                            end: {
                                                line: 312,
                                                column: 96
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 312,
                                                column: 103
                                            },
                                            end: {
                                                line: 314,
                                                column: 5
                                            }
                                        },
                                        line: 312
                                    },
                                    '26': {
                                        name: '(anonymous_26)',
                                        decl: {
                                            start: {
                                                line: 315,
                                                column: 93
                                            },
                                            end: {
                                                line: 315,
                                                column: 94
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 315,
                                                column: 101
                                            },
                                            end: {
                                                line: 317,
                                                column: 5
                                            }
                                        },
                                        line: 315
                                    },
                                    '27': {
                                        name: 'hookPlatform',
                                        decl: {
                                            start: {
                                                line: 320,
                                                column: 11
                                            },
                                            end: {
                                                line: 320,
                                                column: 23
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 320,
                                                column: 36
                                            },
                                            end: {
                                                line: 364,
                                                column: 3
                                            }
                                        },
                                        line: 320
                                    },
                                    '28': {
                                        name: '(anonymous_28)',
                                        decl: {
                                            start: {
                                                line: 322,
                                                column: 20
                                            },
                                            end: {
                                                line: 322,
                                                column: 21
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 322,
                                                column: 30
                                            },
                                            end: {
                                                line: 363,
                                                column: 5
                                            }
                                        },
                                        line: 322
                                    },
                                    '29': {
                                        name: '(anonymous_29)',
                                        decl: {
                                            start: {
                                                line: 325,
                                                column: 65
                                            },
                                            end: {
                                                line: 325,
                                                column: 66
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 325,
                                                column: 73
                                            },
                                            end: {
                                                line: 330,
                                                column: 9
                                            }
                                        },
                                        line: 325
                                    },
                                    '30': {
                                        name: 'toString',
                                        decl: {
                                            start: {
                                                line: 332,
                                                column: 28
                                            },
                                            end: {
                                                line: 332,
                                                column: 36
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 332,
                                                column: 39
                                            },
                                            end: {
                                                line: 332,
                                                column: 100
                                            }
                                        },
                                        line: 332
                                    },
                                    '31': {
                                        name: 'toString',
                                        decl: {
                                            start: {
                                                line: 343,
                                                column: 28
                                            },
                                            end: {
                                                line: 343,
                                                column: 36
                                            }
                                        },
                                        loc: {
                                            start: {
                                                line: 343,
                                                column: 39
                                            },
                                            end: {
                                                line: 343,
                                                column: 100
                                            }
                                        },
                                        line: 343
                                    }
                                },
                                branchMap: {
                                    '0': {
                                        loc: {
                                            start: {
                                                line: 8,
                                                column: 18
                                            },
                                            end: {
                                                line: 8,
                                                column: 132
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 8,
                                                    column: 47
                                                },
                                                end: {
                                                    line: 8,
                                                    column: 53
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 8,
                                                    column: 56
                                                },
                                                end: {
                                                    line: 8,
                                                    column: 132
                                                }
                                            }
                                        ],
                                        line: 8
                                    },
                                    '1': {
                                        loc: {
                                            start: {
                                                line: 8,
                                                column: 56
                                            },
                                            end: {
                                                line: 8,
                                                column: 132
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 8,
                                                    column: 85
                                                },
                                                end: {
                                                    line: 8,
                                                    column: 91
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 8,
                                                    column: 94
                                                },
                                                end: {
                                                    line: 8,
                                                    column: 132
                                                }
                                            }
                                        ],
                                        line: 8
                                    },
                                    '2': {
                                        loc: {
                                            start: {
                                                line: 8,
                                                column: 94
                                            },
                                            end: {
                                                line: 8,
                                                column: 132
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 8,
                                                    column: 121
                                                },
                                                end: {
                                                    line: 8,
                                                    column: 125
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 8,
                                                    column: 128
                                                },
                                                end: {
                                                    line: 8,
                                                    column: 132
                                                }
                                            }
                                        ],
                                        line: 8
                                    },
                                    '3': {
                                        loc: {
                                            start: {
                                                line: 20,
                                                column: 14
                                            },
                                            end: {
                                                line: 24,
                                                column: 12
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 21,
                                                    column: 8
                                                },
                                                end: {
                                                    line: 23,
                                                    column: 53
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 24,
                                                    column: 8
                                                },
                                                end: {
                                                    line: 24,
                                                    column: 12
                                                }
                                            }
                                        ],
                                        line: 20
                                    },
                                    '4': {
                                        loc: {
                                            start: {
                                                line: 21,
                                                column: 8
                                            },
                                            end: {
                                                line: 23,
                                                column: 53
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 22,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 22,
                                                    column: 76
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 23,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 23,
                                                    column: 53
                                                }
                                            }
                                        ],
                                        line: 21
                                    },
                                    '5': {
                                        loc: {
                                            start: {
                                                line: 30,
                                                column: 21
                                            },
                                            end: {
                                                line: 30,
                                                column: 111
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 30,
                                                    column: 36
                                                },
                                                end: {
                                                    line: 30,
                                                    column: 106
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 30,
                                                    column: 109
                                                },
                                                end: {
                                                    line: 30,
                                                    column: 111
                                                }
                                            }
                                        ],
                                        line: 30
                                    },
                                    '6': {
                                        loc: {
                                            start: {
                                                line: 36,
                                                column: 19
                                            },
                                            end: {
                                                line: 36,
                                                column: 113
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 36,
                                                    column: 37
                                                },
                                                end: {
                                                    line: 36,
                                                    column: 108
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 36,
                                                    column: 111
                                                },
                                                end: {
                                                    line: 36,
                                                    column: 113
                                                }
                                            }
                                        ],
                                        line: 36
                                    },
                                    '7': {
                                        loc: {
                                            start: {
                                                line: 37,
                                                column: 22
                                            },
                                            end: {
                                                line: 37,
                                                column: 119
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 37,
                                                    column: 40
                                                },
                                                end: {
                                                    line: 37,
                                                    column: 114
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 37,
                                                    column: 117
                                                },
                                                end: {
                                                    line: 37,
                                                    column: 119
                                                }
                                            }
                                        ],
                                        line: 37
                                    },
                                    '8': {
                                        loc: {
                                            start: {
                                                line: 43,
                                                column: 14
                                            },
                                            end: {
                                                line: 43,
                                                column: 123
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 43,
                                                    column: 42
                                                },
                                                end: {
                                                    line: 43,
                                                    column: 118
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 43,
                                                    column: 121
                                                },
                                                end: {
                                                    line: 43,
                                                    column: 123
                                                }
                                            }
                                        ],
                                        line: 43
                                    },
                                    '9': {
                                        loc: {
                                            start: {
                                                line: 49,
                                                column: 14
                                            },
                                            end: {
                                                line: 49,
                                                column: 119
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 49,
                                                    column: 40
                                                },
                                                end: {
                                                    line: 49,
                                                    column: 114
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 49,
                                                    column: 117
                                                },
                                                end: {
                                                    line: 49,
                                                    column: 119
                                                }
                                            }
                                        ],
                                        line: 49
                                    },
                                    '10': {
                                        loc: {
                                            start: {
                                                line: 55,
                                                column: 14
                                            },
                                            end: {
                                                line: 55,
                                                column: 123
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 55,
                                                    column: 42
                                                },
                                                end: {
                                                    line: 55,
                                                    column: 118
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 55,
                                                    column: 121
                                                },
                                                end: {
                                                    line: 55,
                                                    column: 123
                                                }
                                            }
                                        ],
                                        line: 55
                                    },
                                    '11': {
                                        loc: {
                                            start: {
                                                line: 61,
                                                column: 15
                                            },
                                            end: {
                                                line: 61,
                                                column: 107
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 61,
                                                    column: 34
                                                },
                                                end: {
                                                    line: 61,
                                                    column: 102
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 61,
                                                    column: 105
                                                },
                                                end: {
                                                    line: 61,
                                                    column: 107
                                                }
                                            }
                                        ],
                                        line: 61
                                    },
                                    '12': {
                                        loc: {
                                            start: {
                                                line: 69,
                                                column: 34
                                            },
                                            end: {
                                                line: 69,
                                                column: 69
                                            }
                                        },
                                        type: 'default-arg',
                                        locations: [{
                                                start: {
                                                    line: 69,
                                                    column: 51
                                                },
                                                end: {
                                                    line: 69,
                                                    column: 69
                                                }
                                            }],
                                        line: 69
                                    },
                                    '13': {
                                        loc: {
                                            start: {
                                                line: 71,
                                                column: 6
                                            },
                                            end: {
                                                line: 74,
                                                column: 7
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 71,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 74,
                                                    column: 7
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 71,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 74,
                                                    column: 7
                                                }
                                            }
                                        ],
                                        line: 71
                                    },
                                    '14': {
                                        loc: {
                                            start: {
                                                line: 79,
                                                column: 30
                                            },
                                            end: {
                                                line: 79,
                                                column: 61
                                            }
                                        },
                                        type: 'default-arg',
                                        locations: [{
                                                start: {
                                                    line: 79,
                                                    column: 47
                                                },
                                                end: {
                                                    line: 79,
                                                    column: 61
                                                }
                                            }],
                                        line: 79
                                    },
                                    '15': {
                                        loc: {
                                            start: {
                                                line: 84,
                                                column: 34
                                            },
                                            end: {
                                                line: 84,
                                                column: 80
                                            }
                                        },
                                        type: 'default-arg',
                                        locations: [{
                                                start: {
                                                    line: 84,
                                                    column: 48
                                                },
                                                end: {
                                                    line: 84,
                                                    column: 80
                                                }
                                            }],
                                        line: 84
                                    },
                                    '16': {
                                        loc: {
                                            start: {
                                                line: 85,
                                                column: 6
                                            },
                                            end: {
                                                line: 94,
                                                column: 7
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 85,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 94,
                                                    column: 7
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 85,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 94,
                                                    column: 7
                                                }
                                            }
                                        ],
                                        line: 85
                                    },
                                    '17': {
                                        loc: {
                                            start: {
                                                line: 85,
                                                column: 10
                                            },
                                            end: {
                                                line: 87,
                                                column: 88
                                            }
                                        },
                                        type: 'binary-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 85,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 85,
                                                    column: 22
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 85,
                                                    column: 26
                                                },
                                                end: {
                                                    line: 85,
                                                    column: 59
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 86,
                                                    column: 11
                                                },
                                                end: {
                                                    line: 86,
                                                    column: 85
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 87,
                                                    column: 11
                                                },
                                                end: {
                                                    line: 87,
                                                    column: 87
                                                }
                                            }
                                        ],
                                        line: 85
                                    },
                                    '18': {
                                        loc: {
                                            start: {
                                                line: 92,
                                                column: 11
                                            },
                                            end: {
                                                line: 94,
                                                column: 7
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 92,
                                                    column: 11
                                                },
                                                end: {
                                                    line: 94,
                                                    column: 7
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 92,
                                                    column: 11
                                                },
                                                end: {
                                                    line: 94,
                                                    column: 7
                                                }
                                            }
                                        ],
                                        line: 92
                                    },
                                    '19': {
                                        loc: {
                                            start: {
                                                line: 101,
                                                column: 36
                                            },
                                            end: {
                                                line: 101,
                                                column: 73
                                            }
                                        },
                                        type: 'default-arg',
                                        locations: [{
                                                start: {
                                                    line: 101,
                                                    column: 53
                                                },
                                                end: {
                                                    line: 101,
                                                    column: 73
                                                }
                                            }],
                                        line: 101
                                    },
                                    '20': {
                                        loc: {
                                            start: {
                                                line: 103,
                                                column: 6
                                            },
                                            end: {
                                                line: 105,
                                                column: 7
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 103,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 105,
                                                    column: 7
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 103,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 105,
                                                    column: 7
                                                }
                                            }
                                        ],
                                        line: 103
                                    },
                                    '21': {
                                        loc: {
                                            start: {
                                                line: 110,
                                                column: 37
                                            },
                                            end: {
                                                line: 110,
                                                column: 75
                                            }
                                        },
                                        type: 'default-arg',
                                        locations: [{
                                                start: {
                                                    line: 110,
                                                    column: 54
                                                },
                                                end: {
                                                    line: 110,
                                                    column: 75
                                                }
                                            }],
                                        line: 110
                                    },
                                    '22': {
                                        loc: {
                                            start: {
                                                line: 112,
                                                column: 6
                                            },
                                            end: {
                                                line: 114,
                                                column: 7
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 112,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 114,
                                                    column: 7
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 112,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 114,
                                                    column: 7
                                                }
                                            }
                                        ],
                                        line: 112
                                    },
                                    '23': {
                                        loc: {
                                            start: {
                                                line: 140,
                                                column: 30
                                            },
                                            end: {
                                                line: 140,
                                                column: 61
                                            }
                                        },
                                        type: 'default-arg',
                                        locations: [{
                                                start: {
                                                    line: 140,
                                                    column: 47
                                                },
                                                end: {
                                                    line: 140,
                                                    column: 61
                                                }
                                            }],
                                        line: 140
                                    },
                                    '24': {
                                        loc: {
                                            start: {
                                                line: 141,
                                                column: 4
                                            },
                                            end: {
                                                line: 156,
                                                column: 5
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 141,
                                                    column: 4
                                                },
                                                end: {
                                                    line: 156,
                                                    column: 5
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 141,
                                                    column: 4
                                                },
                                                end: {
                                                    line: 156,
                                                    column: 5
                                                }
                                            }
                                        ],
                                        line: 141
                                    },
                                    '25': {
                                        loc: {
                                            start: {
                                                line: 141,
                                                column: 8
                                            },
                                            end: {
                                                line: 141,
                                                column: 107
                                            }
                                        },
                                        type: 'binary-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 141,
                                                    column: 8
                                                },
                                                end: {
                                                    line: 141,
                                                    column: 20
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 141,
                                                    column: 24
                                                },
                                                end: {
                                                    line: 141,
                                                    column: 107
                                                }
                                            }
                                        ],
                                        line: 141
                                    },
                                    '26': {
                                        loc: {
                                            start: {
                                                line: 147,
                                                column: 10
                                            },
                                            end: {
                                                line: 152,
                                                column: 11
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 147,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 152,
                                                    column: 11
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 147,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 152,
                                                    column: 11
                                                }
                                            }
                                        ],
                                        line: 147
                                    },
                                    '27': {
                                        loc: {
                                            start: {
                                                line: 148,
                                                column: 12
                                            },
                                            end: {
                                                line: 151,
                                                column: 13
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 148,
                                                    column: 12
                                                },
                                                end: {
                                                    line: 151,
                                                    column: 13
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 148,
                                                    column: 12
                                                },
                                                end: {
                                                    line: 151,
                                                    column: 13
                                                }
                                            }
                                        ],
                                        line: 148
                                    },
                                    '28': {
                                        loc: {
                                            start: {
                                                line: 148,
                                                column: 36
                                            },
                                            end: {
                                                line: 148,
                                                column: 76
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 148,
                                                    column: 48
                                                },
                                                end: {
                                                    line: 148,
                                                    column: 71
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 148,
                                                    column: 74
                                                },
                                                end: {
                                                    line: 148,
                                                    column: 76
                                                }
                                            }
                                        ],
                                        line: 148
                                    },
                                    '29': {
                                        loc: {
                                            start: {
                                                line: 160,
                                                column: 33
                                            },
                                            end: {
                                                line: 160,
                                                column: 67
                                            }
                                        },
                                        type: 'default-arg',
                                        locations: [{
                                                start: {
                                                    line: 160,
                                                    column: 50
                                                },
                                                end: {
                                                    line: 160,
                                                    column: 67
                                                }
                                            }],
                                        line: 160
                                    },
                                    '30': {
                                        loc: {
                                            start: {
                                                line: 161,
                                                column: 4
                                            },
                                            end: {
                                                line: 200,
                                                column: 5
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 161,
                                                    column: 4
                                                },
                                                end: {
                                                    line: 200,
                                                    column: 5
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 161,
                                                    column: 4
                                                },
                                                end: {
                                                    line: 200,
                                                    column: 5
                                                }
                                            }
                                        ],
                                        line: 161
                                    },
                                    '31': {
                                        loc: {
                                            start: {
                                                line: 161,
                                                column: 8
                                            },
                                            end: {
                                                line: 161,
                                                column: 114
                                            }
                                        },
                                        type: 'binary-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 161,
                                                    column: 8
                                                },
                                                end: {
                                                    line: 161,
                                                    column: 23
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 161,
                                                    column: 27
                                                },
                                                end: {
                                                    line: 161,
                                                    column: 114
                                                }
                                            }
                                        ],
                                        line: 161
                                    },
                                    '32': {
                                        loc: {
                                            start: {
                                                line: 168,
                                                column: 22
                                            },
                                            end: {
                                                line: 168,
                                                column: 52
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 168,
                                                    column: 29
                                                },
                                                end: {
                                                    line: 168,
                                                    column: 47
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 168,
                                                    column: 50
                                                },
                                                end: {
                                                    line: 168,
                                                    column: 52
                                                }
                                            }
                                        ],
                                        line: 168
                                    },
                                    '33': {
                                        loc: {
                                            start: {
                                                line: 169,
                                                column: 23
                                            },
                                            end: {
                                                line: 169,
                                                column: 68
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 169,
                                                    column: 51
                                                },
                                                end: {
                                                    line: 169,
                                                    column: 63
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 169,
                                                    column: 66
                                                },
                                                end: {
                                                    line: 169,
                                                    column: 68
                                                }
                                            }
                                        ],
                                        line: 169
                                    },
                                    '34': {
                                        loc: {
                                            start: {
                                                line: 170,
                                                column: 10
                                            },
                                            end: {
                                                line: 192,
                                                column: 11
                                            }
                                        },
                                        type: 'switch',
                                        locations: [
                                            {
                                                start: {
                                                    line: 171,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 179,
                                                    column: 18
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 180,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 185,
                                                    column: 18
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 186,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 191,
                                                    column: 18
                                                }
                                            }
                                        ],
                                        line: 170
                                    },
                                    '35': {
                                        loc: {
                                            start: {
                                                line: 172,
                                                column: 12
                                            },
                                            end: {
                                                line: 178,
                                                column: 13
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 172,
                                                    column: 12
                                                },
                                                end: {
                                                    line: 178,
                                                    column: 13
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 172,
                                                    column: 12
                                                },
                                                end: {
                                                    line: 178,
                                                    column: 13
                                                }
                                            }
                                        ],
                                        line: 172
                                    },
                                    '36': {
                                        loc: {
                                            start: {
                                                line: 172,
                                                column: 16
                                            },
                                            end: {
                                                line: 174,
                                                column: 81
                                            }
                                        },
                                        type: 'binary-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 172,
                                                    column: 16
                                                },
                                                end: {
                                                    line: 172,
                                                    column: 57
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 173,
                                                    column: 16
                                                },
                                                end: {
                                                    line: 173,
                                                    column: 62
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 174,
                                                    column: 16
                                                },
                                                end: {
                                                    line: 174,
                                                    column: 81
                                                }
                                            }
                                        ],
                                        line: 172
                                    },
                                    '37': {
                                        loc: {
                                            start: {
                                                line: 174,
                                                column: 36
                                            },
                                            end: {
                                                line: 174,
                                                column: 76
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 174,
                                                    column: 48
                                                },
                                                end: {
                                                    line: 174,
                                                    column: 71
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 174,
                                                    column: 74
                                                },
                                                end: {
                                                    line: 174,
                                                    column: 76
                                                }
                                            }
                                        ],
                                        line: 174
                                    },
                                    '38': {
                                        loc: {
                                            start: {
                                                line: 175,
                                                column: 14
                                            },
                                            end: {
                                                line: 177,
                                                column: 15
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 175,
                                                    column: 14
                                                },
                                                end: {
                                                    line: 177,
                                                    column: 15
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 175,
                                                    column: 14
                                                },
                                                end: {
                                                    line: 177,
                                                    column: 15
                                                }
                                            }
                                        ],
                                        line: 175
                                    },
                                    '39': {
                                        loc: {
                                            start: {
                                                line: 181,
                                                column: 12
                                            },
                                            end: {
                                                line: 184,
                                                column: 13
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 181,
                                                    column: 12
                                                },
                                                end: {
                                                    line: 184,
                                                    column: 13
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 181,
                                                    column: 12
                                                },
                                                end: {
                                                    line: 184,
                                                    column: 13
                                                }
                                            }
                                        ],
                                        line: 181
                                    },
                                    '40': {
                                        loc: {
                                            start: {
                                                line: 187,
                                                column: 12
                                            },
                                            end: {
                                                line: 190,
                                                column: 13
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 187,
                                                    column: 12
                                                },
                                                end: {
                                                    line: 190,
                                                    column: 13
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 187,
                                                    column: 12
                                                },
                                                end: {
                                                    line: 190,
                                                    column: 13
                                                }
                                            }
                                        ],
                                        line: 187
                                    },
                                    '41': {
                                        loc: {
                                            start: {
                                                line: 194,
                                                column: 10
                                            },
                                            end: {
                                                line: 196,
                                                column: 11
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 194,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 196,
                                                    column: 11
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 194,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 196,
                                                    column: 11
                                                }
                                            }
                                        ],
                                        line: 194
                                    },
                                    '42': {
                                        loc: {
                                            start: {
                                                line: 204,
                                                column: 43
                                            },
                                            end: {
                                                line: 204,
                                                column: 87
                                            }
                                        },
                                        type: 'default-arg',
                                        locations: [{
                                                start: {
                                                    line: 204,
                                                    column: 60
                                                },
                                                end: {
                                                    line: 204,
                                                    column: 87
                                                }
                                            }],
                                        line: 204
                                    },
                                    '43': {
                                        loc: {
                                            start: {
                                                line: 207,
                                                column: 4
                                            },
                                            end: {
                                                line: 229,
                                                column: 5
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 207,
                                                    column: 4
                                                },
                                                end: {
                                                    line: 229,
                                                    column: 5
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 207,
                                                    column: 4
                                                },
                                                end: {
                                                    line: 229,
                                                    column: 5
                                                }
                                            }
                                        ],
                                        line: 207
                                    },
                                    '44': {
                                        loc: {
                                            start: {
                                                line: 207,
                                                column: 8
                                            },
                                            end: {
                                                line: 208,
                                                column: 97
                                            }
                                        },
                                        type: 'binary-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 207,
                                                    column: 8
                                                },
                                                end: {
                                                    line: 207,
                                                    column: 33
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 208,
                                                    column: 8
                                                },
                                                end: {
                                                    line: 208,
                                                    column: 97
                                                }
                                            }
                                        ],
                                        line: 207
                                    },
                                    '45': {
                                        loc: {
                                            start: {
                                                line: 215,
                                                column: 10
                                            },
                                            end: {
                                                line: 221,
                                                column: 11
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 215,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 221,
                                                    column: 11
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 215,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 221,
                                                    column: 11
                                                }
                                            }
                                        ],
                                        line: 215
                                    },
                                    '46': {
                                        loc: {
                                            start: {
                                                line: 215,
                                                column: 14
                                            },
                                            end: {
                                                line: 217,
                                                column: 79
                                            }
                                        },
                                        type: 'binary-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 215,
                                                    column: 14
                                                },
                                                end: {
                                                    line: 215,
                                                    column: 55
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 216,
                                                    column: 14
                                                },
                                                end: {
                                                    line: 216,
                                                    column: 72
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 217,
                                                    column: 14
                                                },
                                                end: {
                                                    line: 217,
                                                    column: 79
                                                }
                                            }
                                        ],
                                        line: 215
                                    },
                                    '47': {
                                        loc: {
                                            start: {
                                                line: 216,
                                                column: 34
                                            },
                                            end: {
                                                line: 216,
                                                column: 66
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 216,
                                                    column: 42
                                                },
                                                end: {
                                                    line: 216,
                                                    column: 61
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 216,
                                                    column: 64
                                                },
                                                end: {
                                                    line: 216,
                                                    column: 66
                                                }
                                            }
                                        ],
                                        line: 216
                                    },
                                    '48': {
                                        loc: {
                                            start: {
                                                line: 217,
                                                column: 34
                                            },
                                            end: {
                                                line: 217,
                                                column: 74
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 217,
                                                    column: 46
                                                },
                                                end: {
                                                    line: 217,
                                                    column: 69
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 217,
                                                    column: 72
                                                },
                                                end: {
                                                    line: 217,
                                                    column: 74
                                                }
                                            }
                                        ],
                                        line: 217
                                    },
                                    '49': {
                                        loc: {
                                            start: {
                                                line: 218,
                                                column: 12
                                            },
                                            end: {
                                                line: 220,
                                                column: 13
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 218,
                                                    column: 12
                                                },
                                                end: {
                                                    line: 220,
                                                    column: 13
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 218,
                                                    column: 12
                                                },
                                                end: {
                                                    line: 220,
                                                    column: 13
                                                }
                                            }
                                        ],
                                        line: 218
                                    },
                                    '50': {
                                        loc: {
                                            start: {
                                                line: 223,
                                                column: 10
                                            },
                                            end: {
                                                line: 225,
                                                column: 11
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 223,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 225,
                                                    column: 11
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 223,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 225,
                                                    column: 11
                                                }
                                            }
                                        ],
                                        line: 223
                                    },
                                    '51': {
                                        loc: {
                                            start: {
                                                line: 234,
                                                column: 4
                                            },
                                            end: {
                                                line: 249,
                                                column: 5
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 234,
                                                    column: 4
                                                },
                                                end: {
                                                    line: 249,
                                                    column: 5
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 234,
                                                    column: 4
                                                },
                                                end: {
                                                    line: 249,
                                                    column: 5
                                                }
                                            }
                                        ],
                                        line: 234
                                    },
                                    '52': {
                                        loc: {
                                            start: {
                                                line: 234,
                                                column: 8
                                            },
                                            end: {
                                                line: 234,
                                                column: 106
                                            }
                                        },
                                        type: 'binary-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 234,
                                                    column: 8
                                                },
                                                end: {
                                                    line: 234,
                                                    column: 23
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 234,
                                                    column: 27
                                                },
                                                end: {
                                                    line: 234,
                                                    column: 106
                                                }
                                            }
                                        ],
                                        line: 234
                                    },
                                    '53': {
                                        loc: {
                                            start: {
                                                line: 241,
                                                column: 23
                                            },
                                            end: {
                                                line: 241,
                                                column: 68
                                            }
                                        },
                                        type: 'cond-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 241,
                                                    column: 51
                                                },
                                                end: {
                                                    line: 241,
                                                    column: 63
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 241,
                                                    column: 66
                                                },
                                                end: {
                                                    line: 241,
                                                    column: 68
                                                }
                                            }
                                        ],
                                        line: 241
                                    },
                                    '54': {
                                        loc: {
                                            start: {
                                                line: 242,
                                                column: 10
                                            },
                                            end: {
                                                line: 245,
                                                column: 11
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 242,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 245,
                                                    column: 11
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 242,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 245,
                                                    column: 11
                                                }
                                            }
                                        ],
                                        line: 242
                                    },
                                    '55': {
                                        loc: {
                                            start: {
                                                line: 253,
                                                column: 43
                                            },
                                            end: {
                                                line: 253,
                                                column: 87
                                            }
                                        },
                                        type: 'default-arg',
                                        locations: [{
                                                start: {
                                                    line: 253,
                                                    column: 60
                                                },
                                                end: {
                                                    line: 253,
                                                    column: 87
                                                }
                                            }],
                                        line: 253
                                    },
                                    '56': {
                                        loc: {
                                            start: {
                                                line: 257,
                                                column: 41
                                            },
                                            end: {
                                                line: 257,
                                                column: 83
                                            }
                                        },
                                        type: 'default-arg',
                                        locations: [{
                                                start: {
                                                    line: 257,
                                                    column: 58
                                                },
                                                end: {
                                                    line: 257,
                                                    column: 83
                                                }
                                            }],
                                        line: 257
                                    },
                                    '57': {
                                        loc: {
                                            start: {
                                                line: 261,
                                                column: 34
                                            },
                                            end: {
                                                line: 261,
                                                column: 69
                                            }
                                        },
                                        type: 'default-arg',
                                        locations: [{
                                                start: {
                                                    line: 261,
                                                    column: 51
                                                },
                                                end: {
                                                    line: 261,
                                                    column: 69
                                                }
                                            }],
                                        line: 261
                                    },
                                    '58': {
                                        loc: {
                                            start: {
                                                line: 262,
                                                column: 4
                                            },
                                            end: {
                                                line: 297,
                                                column: 5
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 262,
                                                    column: 4
                                                },
                                                end: {
                                                    line: 297,
                                                    column: 5
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 262,
                                                    column: 4
                                                },
                                                end: {
                                                    line: 297,
                                                    column: 5
                                                }
                                            }
                                        ],
                                        line: 262
                                    },
                                    '59': {
                                        loc: {
                                            start: {
                                                line: 262,
                                                column: 8
                                            },
                                            end: {
                                                line: 262,
                                                column: 109
                                            }
                                        },
                                        type: 'binary-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 262,
                                                    column: 8
                                                },
                                                end: {
                                                    line: 262,
                                                    column: 24
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 262,
                                                    column: 28
                                                },
                                                end: {
                                                    line: 262,
                                                    column: 109
                                                }
                                            }
                                        ],
                                        line: 262
                                    },
                                    '60': {
                                        loc: {
                                            start: {
                                                line: 273,
                                                column: 12
                                            },
                                            end: {
                                                line: 281,
                                                column: 13
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 273,
                                                    column: 12
                                                },
                                                end: {
                                                    line: 281,
                                                    column: 13
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 273,
                                                    column: 12
                                                },
                                                end: {
                                                    line: 281,
                                                    column: 13
                                                }
                                            }
                                        ],
                                        line: 273
                                    },
                                    '61': {
                                        loc: {
                                            start: {
                                                line: 276,
                                                column: 17
                                            },
                                            end: {
                                                line: 281,
                                                column: 13
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 276,
                                                    column: 17
                                                },
                                                end: {
                                                    line: 281,
                                                    column: 13
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 276,
                                                    column: 17
                                                },
                                                end: {
                                                    line: 281,
                                                    column: 13
                                                }
                                            }
                                        ],
                                        line: 276
                                    },
                                    '62': {
                                        loc: {
                                            start: {
                                                line: 278,
                                                column: 14
                                            },
                                            end: {
                                                line: 280,
                                                column: 15
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 278,
                                                    column: 14
                                                },
                                                end: {
                                                    line: 280,
                                                    column: 15
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 278,
                                                    column: 14
                                                },
                                                end: {
                                                    line: 280,
                                                    column: 15
                                                }
                                            }
                                        ],
                                        line: 278
                                    },
                                    '63': {
                                        loc: {
                                            start: {
                                                line: 304,
                                                column: 6
                                            },
                                            end: {
                                                line: 310,
                                                column: 7
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 304,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 310,
                                                    column: 7
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 304,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 310,
                                                    column: 7
                                                }
                                            }
                                        ],
                                        line: 304
                                    },
                                    '64': {
                                        loc: {
                                            start: {
                                                line: 304,
                                                column: 10
                                            },
                                            end: {
                                                line: 304,
                                                column: 35
                                            }
                                        },
                                        type: 'binary-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 304,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 304,
                                                    column: 14
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 304,
                                                    column: 18
                                                },
                                                end: {
                                                    line: 304,
                                                    column: 35
                                                }
                                            }
                                        ],
                                        line: 304
                                    },
                                    '65': {
                                        loc: {
                                            start: {
                                                line: 306,
                                                column: 8
                                            },
                                            end: {
                                                line: 308,
                                                column: 9
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 306,
                                                    column: 8
                                                },
                                                end: {
                                                    line: 308,
                                                    column: 9
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 306,
                                                    column: 8
                                                },
                                                end: {
                                                    line: 308,
                                                    column: 9
                                                }
                                            }
                                        ],
                                        line: 306
                                    },
                                    '66': {
                                        loc: {
                                            start: {
                                                line: 312,
                                                column: 4
                                            },
                                            end: {
                                                line: 314,
                                                column: 6
                                            }
                                        },
                                        type: 'binary-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 312,
                                                    column: 4
                                                },
                                                end: {
                                                    line: 312,
                                                    column: 24
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 312,
                                                    column: 28
                                                },
                                                end: {
                                                    line: 312,
                                                    column: 55
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 312,
                                                    column: 59
                                                },
                                                end: {
                                                    line: 314,
                                                    column: 6
                                                }
                                            }
                                        ],
                                        line: 312
                                    },
                                    '67': {
                                        loc: {
                                            start: {
                                                line: 315,
                                                column: 4
                                            },
                                            end: {
                                                line: 317,
                                                column: 6
                                            }
                                        },
                                        type: 'binary-expr',
                                        locations: [
                                            {
                                                start: {
                                                    line: 315,
                                                    column: 4
                                                },
                                                end: {
                                                    line: 315,
                                                    column: 24
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 315,
                                                    column: 28
                                                },
                                                end: {
                                                    line: 315,
                                                    column: 54
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 315,
                                                    column: 58
                                                },
                                                end: {
                                                    line: 317,
                                                    column: 6
                                                }
                                            }
                                        ],
                                        line: 315
                                    },
                                    '68': {
                                        loc: {
                                            start: {
                                                line: 323,
                                                column: 6
                                            },
                                            end: {
                                                line: 362,
                                                column: 7
                                            }
                                        },
                                        type: 'switch',
                                        locations: [
                                            {
                                                start: {
                                                    line: 324,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 339,
                                                    column: 14
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 340,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 340,
                                                    column: 24
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 341,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 348,
                                                    column: 14
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 349,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 353,
                                                    column: 14
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 354,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 358,
                                                    column: 14
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 359,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 359,
                                                    column: 19
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 360,
                                                    column: 6
                                                },
                                                end: {
                                                    line: 361,
                                                    column: 14
                                                }
                                            }
                                        ],
                                        line: 323
                                    },
                                    '69': {
                                        loc: {
                                            start: {
                                                line: 327,
                                                column: 10
                                            },
                                            end: {
                                                line: 329,
                                                column: 11
                                            }
                                        },
                                        type: 'if',
                                        locations: [
                                            {
                                                start: {
                                                    line: 327,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 329,
                                                    column: 11
                                                }
                                            },
                                            {
                                                start: {
                                                    line: 327,
                                                    column: 10
                                                },
                                                end: {
                                                    line: 329,
                                                    column: 11
                                                }
                                            }
                                        ],
                                        line: 327
                                    }
                                },
                                s: {
                                    '0': 0,
                                    '1': 0,
                                    '2': 0,
                                    '3': 0,
                                    '4': 0,
                                    '5': 0,
                                    '6': 0,
                                    '7': 0,
                                    '8': 0,
                                    '9': 0,
                                    '10': 0,
                                    '11': 0,
                                    '12': 0,
                                    '13': 0,
                                    '14': 0,
                                    '15': 0,
                                    '16': 0,
                                    '17': 0,
                                    '18': 0,
                                    '19': 0,
                                    '20': 0,
                                    '21': 0,
                                    '22': 0,
                                    '23': 0,
                                    '24': 0,
                                    '25': 0,
                                    '26': 0,
                                    '27': 0,
                                    '28': 0,
                                    '29': 0,
                                    '30': 0,
                                    '31': 0,
                                    '32': 0,
                                    '33': 0,
                                    '34': 0,
                                    '35': 0,
                                    '36': 0,
                                    '37': 0,
                                    '38': 0,
                                    '39': 0,
                                    '40': 0,
                                    '41': 0,
                                    '42': 0,
                                    '43': 0,
                                    '44': 0,
                                    '45': 0,
                                    '46': 0,
                                    '47': 0,
                                    '48': 0,
                                    '49': 0,
                                    '50': 0,
                                    '51': 0,
                                    '52': 0,
                                    '53': 0,
                                    '54': 0,
                                    '55': 0,
                                    '56': 0,
                                    '57': 0,
                                    '58': 0,
                                    '59': 0,
                                    '60': 0,
                                    '61': 0,
                                    '62': 0,
                                    '63': 0,
                                    '64': 0,
                                    '65': 0,
                                    '66': 0,
                                    '67': 0,
                                    '68': 0,
                                    '69': 0,
                                    '70': 0,
                                    '71': 0,
                                    '72': 0,
                                    '73': 0,
                                    '74': 0,
                                    '75': 0,
                                    '76': 0,
                                    '77': 0,
                                    '78': 0,
                                    '79': 0,
                                    '80': 0,
                                    '81': 0,
                                    '82': 0,
                                    '83': 0,
                                    '84': 0,
                                    '85': 0,
                                    '86': 0,
                                    '87': 0,
                                    '88': 0,
                                    '89': 0,
                                    '90': 0,
                                    '91': 0,
                                    '92': 0,
                                    '93': 0,
                                    '94': 0,
                                    '95': 0,
                                    '96': 0,
                                    '97': 0,
                                    '98': 0,
                                    '99': 0,
                                    '100': 0,
                                    '101': 0,
                                    '102': 0,
                                    '103': 0,
                                    '104': 0,
                                    '105': 0,
                                    '106': 0,
                                    '107': 0,
                                    '108': 0,
                                    '109': 0,
                                    '110': 0,
                                    '111': 0,
                                    '112': 0,
                                    '113': 0,
                                    '114': 0,
                                    '115': 0,
                                    '116': 0,
                                    '117': 0,
                                    '118': 0,
                                    '119': 0,
                                    '120': 0,
                                    '121': 0,
                                    '122': 0,
                                    '123': 0,
                                    '124': 0,
                                    '125': 0,
                                    '126': 0,
                                    '127': 0,
                                    '128': 0,
                                    '129': 0,
                                    '130': 0,
                                    '131': 0,
                                    '132': 0,
                                    '133': 0
                                },
                                f: {
                                    '0': 0,
                                    '1': 0,
                                    '2': 0,
                                    '3': 0,
                                    '4': 0,
                                    '5': 0,
                                    '6': 0,
                                    '7': 0,
                                    '8': 0,
                                    '9': 0,
                                    '10': 0,
                                    '11': 0,
                                    '12': 0,
                                    '13': 0,
                                    '14': 0,
                                    '15': 0,
                                    '16': 0,
                                    '17': 0,
                                    '18': 0,
                                    '19': 0,
                                    '20': 0,
                                    '21': 0,
                                    '22': 0,
                                    '23': 0,
                                    '24': 0,
                                    '25': 0,
                                    '26': 0,
                                    '27': 0,
                                    '28': 0,
                                    '29': 0,
                                    '30': 0,
                                    '31': 0
                                },
                                b: {
                                    '0': [
                                        0,
                                        0
                                    ],
                                    '1': [
                                        0,
                                        0
                                    ],
                                    '2': [
                                        0,
                                        0
                                    ],
                                    '3': [
                                        0,
                                        0
                                    ],
                                    '4': [
                                        0,
                                        0
                                    ],
                                    '5': [
                                        0,
                                        0
                                    ],
                                    '6': [
                                        0,
                                        0
                                    ],
                                    '7': [
                                        0,
                                        0
                                    ],
                                    '8': [
                                        0,
                                        0
                                    ],
                                    '9': [
                                        0,
                                        0
                                    ],
                                    '10': [
                                        0,
                                        0
                                    ],
                                    '11': [
                                        0,
                                        0
                                    ],
                                    '12': [0],
                                    '13': [
                                        0,
                                        0
                                    ],
                                    '14': [0],
                                    '15': [0],
                                    '16': [
                                        0,
                                        0
                                    ],
                                    '17': [
                                        0,
                                        0,
                                        0,
                                        0
                                    ],
                                    '18': [
                                        0,
                                        0
                                    ],
                                    '19': [0],
                                    '20': [
                                        0,
                                        0
                                    ],
                                    '21': [0],
                                    '22': [
                                        0,
                                        0
                                    ],
                                    '23': [0],
                                    '24': [
                                        0,
                                        0
                                    ],
                                    '25': [
                                        0,
                                        0
                                    ],
                                    '26': [
                                        0,
                                        0
                                    ],
                                    '27': [
                                        0,
                                        0
                                    ],
                                    '28': [
                                        0,
                                        0
                                    ],
                                    '29': [0],
                                    '30': [
                                        0,
                                        0
                                    ],
                                    '31': [
                                        0,
                                        0
                                    ],
                                    '32': [
                                        0,
                                        0
                                    ],
                                    '33': [
                                        0,
                                        0
                                    ],
                                    '34': [
                                        0,
                                        0,
                                        0
                                    ],
                                    '35': [
                                        0,
                                        0
                                    ],
                                    '36': [
                                        0,
                                        0,
                                        0
                                    ],
                                    '37': [
                                        0,
                                        0
                                    ],
                                    '38': [
                                        0,
                                        0
                                    ],
                                    '39': [
                                        0,
                                        0
                                    ],
                                    '40': [
                                        0,
                                        0
                                    ],
                                    '41': [
                                        0,
                                        0
                                    ],
                                    '42': [0],
                                    '43': [
                                        0,
                                        0
                                    ],
                                    '44': [
                                        0,
                                        0
                                    ],
                                    '45': [
                                        0,
                                        0
                                    ],
                                    '46': [
                                        0,
                                        0,
                                        0
                                    ],
                                    '47': [
                                        0,
                                        0
                                    ],
                                    '48': [
                                        0,
                                        0
                                    ],
                                    '49': [
                                        0,
                                        0
                                    ],
                                    '50': [
                                        0,
                                        0
                                    ],
                                    '51': [
                                        0,
                                        0
                                    ],
                                    '52': [
                                        0,
                                        0
                                    ],
                                    '53': [
                                        0,
                                        0
                                    ],
                                    '54': [
                                        0,
                                        0
                                    ],
                                    '55': [0],
                                    '56': [0],
                                    '57': [0],
                                    '58': [
                                        0,
                                        0
                                    ],
                                    '59': [
                                        0,
                                        0
                                    ],
                                    '60': [
                                        0,
                                        0
                                    ],
                                    '61': [
                                        0,
                                        0
                                    ],
                                    '62': [
                                        0,
                                        0
                                    ],
                                    '63': [
                                        0,
                                        0
                                    ],
                                    '64': [
                                        0,
                                        0
                                    ],
                                    '65': [
                                        0,
                                        0
                                    ],
                                    '66': [
                                        0,
                                        0,
                                        0
                                    ],
                                    '67': [
                                        0,
                                        0,
                                        0
                                    ],
                                    '68': [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0
                                    ],
                                    '69': [
                                        0,
                                        0
                                    ]
                                },
                                _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
                            }, coverage = global[gcv] || (global[gcv] = {});
                        if (coverage[path] && coverage[path].hash === hash) {
                            return coverage[path];
                        }
                        coverageData.hash = hash;
                        return coverage[path] = coverageData;
                    }();
                    cov_buovmc4uu.s[0]++;
                    module.exports = function (hook, preprocess) {
                        cov_buovmc4uu.f[0]++;
                        const _global = (cov_buovmc4uu.s[1]++, typeof window === 'object' ? (cov_buovmc4uu.b[0][0]++, window) : (cov_buovmc4uu.b[0][1]++, typeof global === 'object' ? (cov_buovmc4uu.b[1][0]++, global) : (cov_buovmc4uu.b[1][1]++, typeof self === 'object' ? (cov_buovmc4uu.b[2][0]++, self) : (cov_buovmc4uu.b[2][1]++, this))));
                        const _native = (cov_buovmc4uu.s[2]++, {
                            Function: _global.Function,
                            eval: _global.eval,
                            setTimeout: _global.setTimeout,
                            setInterval: _global.setInterval,
                            HTMLScriptElement: _global.HTMLScriptElement,
                            Node: _global.Node,
                            Element: _global.Element,
                            HTMLAnchorElement: _global.HTMLAnchorElement,
                            HTMLAreaElement: _global.HTMLAreaElement,
                            Document: typeof document === 'object' ? (cov_buovmc4uu.b[3][0]++, Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Object.getPrototypeOf(document)).constructor.prototype, 'write') ? (cov_buovmc4uu.b[4][0]++, Object.getPrototypeOf(Object.getPrototypeOf(document)).constructor) : (cov_buovmc4uu.b[4][1]++, Object.getPrototypeOf(document).constructor)) : (cov_buovmc4uu.b[3][1]++, null)
                        });
                        const _nativeMethods = (cov_buovmc4uu.s[3]++, {
                            Node: {
                                static: {},
                                proto: { textContent: _native.Node ? (cov_buovmc4uu.b[5][0]++, Object.getOwnPropertyDescriptor(_native.Node.prototype, 'textContent')) : (cov_buovmc4uu.b[5][1]++, {}) }
                            },
                            Element: {
                                static: {},
                                proto: {
                                    innerHTML: _native.Element ? (cov_buovmc4uu.b[6][0]++, Object.getOwnPropertyDescriptor(_native.Element.prototype, 'innerHTML')) : (cov_buovmc4uu.b[6][1]++, {}),
                                    setAttribute: _native.Element ? (cov_buovmc4uu.b[7][0]++, Object.getOwnPropertyDescriptor(_native.Element.prototype, 'setAttribute')) : (cov_buovmc4uu.b[7][1]++, {})
                                }
                            },
                            HTMLAnchorElement: {
                                static: {},
                                proto: { href: _native.HTMLAnchorElement ? (cov_buovmc4uu.b[8][0]++, Object.getOwnPropertyDescriptor(_native.HTMLAnchorElement.prototype, 'href')) : (cov_buovmc4uu.b[8][1]++, {}) }
                            },
                            HTMLAreaElement: {
                                static: {},
                                proto: { href: _native.HTMLAreaElement ? (cov_buovmc4uu.b[9][0]++, Object.getOwnPropertyDescriptor(_native.HTMLAreaElement.prototype, 'href')) : (cov_buovmc4uu.b[9][1]++, {}) }
                            },
                            HTMLScriptElement: {
                                static: {},
                                proto: { type: _native.HTMLScriptElement ? (cov_buovmc4uu.b[10][0]++, Object.getOwnPropertyDescriptor(_native.HTMLScriptElement.prototype, 'type')) : (cov_buovmc4uu.b[10][1]++, {}) }
                            },
                            Document: {
                                static: {},
                                proto: { write: _native.Document ? (cov_buovmc4uu.b[11][0]++, Object.getOwnPropertyDescriptor(_native.Document.prototype, 'write')) : (cov_buovmc4uu.b[11][1]++, {}) }
                            }
                        });
                        const _freeze = (cov_buovmc4uu.s[4]++, {
                            Function: {
                                static: [],
                                proto: [
                                    'apply',
                                    'call',
                                    'bind',
                                    'arguments'
                                ]
                            }
                        });
                        function hookFunction(hookName, initialContext = (cov_buovmc4uu.b[12][0]++, [[
                                'Function',
                                {}
                            ]]), contextGenerator) {
                            cov_buovmc4uu.f[1]++;
                            cov_buovmc4uu.s[5]++;
                            return function Function(...args) {
                                cov_buovmc4uu.f[2]++;
                                cov_buovmc4uu.s[6]++;
                                if (args.length >= 1) {
                                    cov_buovmc4uu.b[13][0]++;
                                    let hooked = (cov_buovmc4uu.s[7]++, 'return ' + hook('(() => { ' + args[args.length - 1] + ' })(arguments)', hookName, initialContext, contextGenerator));
                                    cov_buovmc4uu.s[8]++;
                                    args[args.length - 1] = hooked;
                                } else {
                                    cov_buovmc4uu.b[13][1]++;
                                }
                                cov_buovmc4uu.s[9]++;
                                return Reflect.construct(_native.Function, args);
                            };
                        }
                        function hookEval(hookName, initialContext = (cov_buovmc4uu.b[14][0]++, [[
                                'eval',
                                {}
                            ]]), contextGenerator) {
                            cov_buovmc4uu.f[3]++;
                            cov_buovmc4uu.s[10]++;
                            let _eval = function (script, evalWrapper = (cov_buovmc4uu.b[15][0]++, (script, _eval) => {
                                cov_buovmc4uu.f[5]++;
                                cov_buovmc4uu.s[11]++;
                                return _eval(script);
                            })) {
                                cov_buovmc4uu.f[4]++;
                                cov_buovmc4uu.s[12]++;
                                if ((cov_buovmc4uu.b[17][0]++, !evalWrapper) || (cov_buovmc4uu.b[17][1]++, typeof evalWrapper !== 'function') || (cov_buovmc4uu.b[17][2]++, evalWrapper.toString().replace(/ /g, '') !== '(script,eval)=>eval(script)') && (cov_buovmc4uu.b[17][3]++, evalWrapper.toString().replace(/ /g, '') !== '(script,_eval)=>_eval(script)')) {
                                    cov_buovmc4uu.b[16][0]++;
                                    cov_buovmc4uu.s[13]++;
                                    console.error('hook.eval: invalid eval wrapper function "' + evalWrapper.toString() + '"');
                                    cov_buovmc4uu.s[14]++;
                                    evalWrapper = (script, _eval) => {
                                        cov_buovmc4uu.f[6]++;
                                        cov_buovmc4uu.s[15]++;
                                        return _eval(script);
                                    };
                                    cov_buovmc4uu.s[16]++;
                                    script = '/* invalidated eval script due to invalid eval wrapper function */';
                                } else {
                                    cov_buovmc4uu.b[16][1]++;
                                    cov_buovmc4uu.s[17]++;
                                    if (typeof script === 'string') {
                                        cov_buovmc4uu.b[18][0]++;
                                        cov_buovmc4uu.s[18]++;
                                        script = hook(script, hookName, initialContext, contextGenerator);
                                    } else {
                                        cov_buovmc4uu.b[18][1]++;
                                    }
                                }
                                cov_buovmc4uu.s[19]++;
                                return _global[hookName](evalWrapper, this, [
                                    script,
                                    _native.eval
                                ], 'eval');
                            };
                            cov_buovmc4uu.s[20]++;
                            Object.defineProperty(_eval, 'name', {
                                configurable: false,
                                writable: false,
                                enumerable: false,
                                value: 'eval'
                            });
                            cov_buovmc4uu.s[21]++;
                            return _eval;
                        }
                        function hookSetTimeout(hookName, initialContext = (cov_buovmc4uu.b[19][0]++, [[
                                'setTimeout',
                                {}
                            ]]), contextGenerator) {
                            cov_buovmc4uu.f[7]++;
                            cov_buovmc4uu.s[22]++;
                            return function setTimeout(...args) {
                                cov_buovmc4uu.f[8]++;
                                cov_buovmc4uu.s[23]++;
                                if (typeof args[0] === 'string') {
                                    cov_buovmc4uu.b[20][0]++;
                                    cov_buovmc4uu.s[24]++;
                                    args[0] = hook('(() => { ' + args[0] + ' })()', hookName, initialContext, contextGenerator);
                                } else {
                                    cov_buovmc4uu.b[20][1]++;
                                }
                                cov_buovmc4uu.s[25]++;
                                return _global[hookName](_native.setTimeout, this, args, 'setTimeout');
                            };
                        }
                        function hookSetInterval(hookName, initialContext = (cov_buovmc4uu.b[21][0]++, [[
                                'setInterval',
                                {}
                            ]]), contextGenerator) {
                            cov_buovmc4uu.f[9]++;
                            cov_buovmc4uu.s[26]++;
                            return function setInterval(...args) {
                                cov_buovmc4uu.f[10]++;
                                cov_buovmc4uu.s[27]++;
                                if (typeof args[0] === 'string') {
                                    cov_buovmc4uu.b[22][0]++;
                                    cov_buovmc4uu.s[28]++;
                                    args[0] = hook('(() => { ' + args[0] + ' })()', hookName, initialContext, contextGenerator);
                                } else {
                                    cov_buovmc4uu.b[22][1]++;
                                }
                                cov_buovmc4uu.s[29]++;
                                return _global[hookName](_native.setInterval, this, args, 'setInterval');
                            };
                        }
                        const jsMimeTypes = (cov_buovmc4uu.s[30]++, [
                            '',
                            'application/ecmascript',
                            'application/javascript',
                            'application/x-ecmascript',
                            'application/x-javascript',
                            'text/ecmascript',
                            'text/javascript',
                            'text/javascript1.0',
                            'text/javascript1.1',
                            'text/javascript1.2',
                            'text/javascript1.3',
                            'text/javascript1.4',
                            'text/javascript1.5',
                            'text/jscript',
                            'text/livescript',
                            'text/x-ecmascript',
                            'text/x-javascript',
                            'module'
                        ]);
                        function hookNode(hookName, initialContext = (cov_buovmc4uu.b[23][0]++, [[
                                'Node',
                                {}
                            ]]), contextGenerator) {
                            cov_buovmc4uu.f[11]++;
                            cov_buovmc4uu.s[31]++;
                            if ((cov_buovmc4uu.b[25][0]++, _native.Node) && (cov_buovmc4uu.b[25][1]++, Object.getOwnPropertyDescriptor(_native.Node.prototype, 'textContent').configurable)) {
                                cov_buovmc4uu.b[24][0]++;
                                cov_buovmc4uu.s[32]++;
                                Object.defineProperty(_native.Node.prototype, 'textContent', {
                                    configurable: false,
                                    enumerable: _nativeMethods.Node.proto.textContent.enumerable,
                                    get: _nativeMethods.Node.proto.textContent.get,
                                    set: function (value) {
                                        cov_buovmc4uu.f[12]++;
                                        cov_buovmc4uu.s[33]++;
                                        if (this instanceof _native.HTMLScriptElement) {
                                            cov_buovmc4uu.b[26][0]++;
                                            cov_buovmc4uu.s[34]++;
                                            if (jsMimeTypes.indexOf(this.type ? (cov_buovmc4uu.b[28][0]++, this.type.toLowerCase()) : (cov_buovmc4uu.b[28][1]++, '')) >= 0) {
                                                cov_buovmc4uu.b[27][0]++;
                                                cov_buovmc4uu.s[35]++;
                                                value = hook(value, hookName, initialContext, contextGenerator);
                                            } else {
                                                cov_buovmc4uu.b[27][1]++;
                                            }
                                        } else {
                                            cov_buovmc4uu.b[26][1]++;
                                        }
                                        cov_buovmc4uu.s[36]++;
                                        return _global[hookName](_nativeMethods.Node.proto.textContent.set, this, [value], this.constructor.name + ',set textContent');
                                    }
                                });
                            } else {
                                cov_buovmc4uu.b[24][1]++;
                            }
                            cov_buovmc4uu.s[37]++;
                            return _native.Node;
                        }
                        function hookElement(hookName, initialContext = (cov_buovmc4uu.b[29][0]++, [[
                                'Element',
                                {}
                            ]]), contextGenerator) {
                            cov_buovmc4uu.f[13]++;
                            cov_buovmc4uu.s[38]++;
                            if ((cov_buovmc4uu.b[31][0]++, _native.Element) && (cov_buovmc4uu.b[31][1]++, Object.getOwnPropertyDescriptor(_native.Element.prototype, 'setAttribute').configurable)) {
                                cov_buovmc4uu.b[30][0]++;
                                cov_buovmc4uu.s[39]++;
                                Object.defineProperty(_native.Element.prototype, 'setAttribute', {
                                    configurable: false,
                                    enumerable: _nativeMethods.Element.proto.setAttribute.enumerable,
                                    writable: false,
                                    value: function setAttribute(name, value) {
                                        cov_buovmc4uu.f[14]++;
                                        let doHook = (cov_buovmc4uu.s[40]++, false);
                                        let _name = (cov_buovmc4uu.s[41]++, name ? (cov_buovmc4uu.b[32][0]++, name.toLowerCase()) : (cov_buovmc4uu.b[32][1]++, ''));
                                        let _value = (cov_buovmc4uu.s[42]++, typeof value === 'string' ? (cov_buovmc4uu.b[33][0]++, value.trim()) : (cov_buovmc4uu.b[33][1]++, ''));
                                        cov_buovmc4uu.s[43]++;
                                        switch (_name) {
                                        case 'type':
                                            cov_buovmc4uu.b[34][0]++;
                                            cov_buovmc4uu.s[44]++;
                                            if ((cov_buovmc4uu.b[36][0]++, this instanceof _native.HTMLScriptElement) && (cov_buovmc4uu.b[36][1]++, jsMimeTypes.indexOf(_value.toLowerCase()) >= 0) && (cov_buovmc4uu.b[36][2]++, jsMimeTypes.indexOf(this.type ? (cov_buovmc4uu.b[37][0]++, this.type.toLowerCase()) : (cov_buovmc4uu.b[37][1]++, '')) < 0)) {
                                                cov_buovmc4uu.b[35][0]++;
                                                cov_buovmc4uu.s[45]++;
                                                if (this.textContent.indexOf(hookName) < 0) {
                                                    cov_buovmc4uu.b[38][0]++;
                                                    cov_buovmc4uu.s[46]++;
                                                    doHook = true;
                                                } else {
                                                    cov_buovmc4uu.b[38][1]++;
                                                }
                                            } else {
                                                cov_buovmc4uu.b[35][1]++;
                                            }
                                            cov_buovmc4uu.s[47]++;
                                            break;
                                        case 'href':
                                            cov_buovmc4uu.b[34][1]++;
                                            cov_buovmc4uu.s[48]++;
                                            if (_value.startsWith('javascript:')) {
                                                cov_buovmc4uu.b[39][0]++;
                                                cov_buovmc4uu.s[49]++;
                                                value = 'javascript:' + hook('(() => { ' + _value.substr(11) + ' })()', hookName, [[
                                                        this.constructor.name + ',setAttribute,' + _name,
                                                        {}
                                                    ]], contextGenerator);
                                            } else {
                                                cov_buovmc4uu.b[39][1]++;
                                            }
                                            cov_buovmc4uu.s[50]++;
                                            break;
                                        default:
                                            cov_buovmc4uu.b[34][2]++;
                                            cov_buovmc4uu.s[51]++;
                                            if (_name.match(/^on[a-z]{1,}$/)) {
                                                cov_buovmc4uu.b[40][0]++;
                                                cov_buovmc4uu.s[52]++;
                                                value = 'return ' + hook('(() => { ' + value + ' })()', hookName, [[
                                                        this.constructor.name + ',setAttribute,' + _name,
                                                        {}
                                                    ]], contextGenerator);
                                            } else {
                                                cov_buovmc4uu.b[40][1]++;
                                            }
                                            cov_buovmc4uu.s[53]++;
                                            break;
                                        }
                                        let result = (cov_buovmc4uu.s[54]++, _global[hookName](_nativeMethods.Element.proto.setAttribute.value, this, [
                                            name,
                                            value
                                        ], this.constructor.name + ',setAttribute'));
                                        cov_buovmc4uu.s[55]++;
                                        if (doHook) {
                                            cov_buovmc4uu.b[41][0]++;
                                            cov_buovmc4uu.s[56]++;
                                            this.textContent = this.textContent;
                                        } else {
                                            cov_buovmc4uu.b[41][1]++;
                                        }
                                        cov_buovmc4uu.s[57]++;
                                        return result;
                                    }
                                });
                            } else {
                                cov_buovmc4uu.b[30][1]++;
                            }
                            cov_buovmc4uu.s[58]++;
                            return _native.Element;
                        }
                        function hookHTMLScriptElement(hookName, initialContext = (cov_buovmc4uu.b[42][0]++, [[
                                'HTMLScriptElement',
                                {}
                            ]]), contextGenerator) {
                            cov_buovmc4uu.f[15]++;
                            cov_buovmc4uu.s[59]++;
                            hookNode(hookName, initialContext, contextGenerator);
                            cov_buovmc4uu.s[60]++;
                            hookElement(hookName, initialContext, contextGenerator);
                            cov_buovmc4uu.s[61]++;
                            if ((cov_buovmc4uu.b[44][0]++, _native.HTMLScriptElement) && (cov_buovmc4uu.b[44][1]++, Object.getOwnPropertyDescriptor(_native.HTMLScriptElement.prototype, 'type').configurable)) {
                                cov_buovmc4uu.b[43][0]++;
                                cov_buovmc4uu.s[62]++;
                                Object.defineProperty(_native.HTMLScriptElement.prototype, 'type', {
                                    configurable: false,
                                    enumerable: _nativeMethods.HTMLScriptElement.proto.type.enumerable,
                                    get: _nativeMethods.HTMLScriptElement.proto.type.get,
                                    set: function (value) {
                                        cov_buovmc4uu.f[16]++;
                                        let doHook = (cov_buovmc4uu.s[63]++, false);
                                        cov_buovmc4uu.s[64]++;
                                        if ((cov_buovmc4uu.b[46][0]++, this instanceof _native.HTMLScriptElement) && (cov_buovmc4uu.b[46][1]++, jsMimeTypes.indexOf(value ? (cov_buovmc4uu.b[47][0]++, value.toLowerCase()) : (cov_buovmc4uu.b[47][1]++, '')) >= 0) && (cov_buovmc4uu.b[46][2]++, jsMimeTypes.indexOf(this.type ? (cov_buovmc4uu.b[48][0]++, this.type.toLowerCase()) : (cov_buovmc4uu.b[48][1]++, '')) < 0)) {
                                            cov_buovmc4uu.b[45][0]++;
                                            cov_buovmc4uu.s[65]++;
                                            if (this.textContent.indexOf(hookName) < 0) {
                                                cov_buovmc4uu.b[49][0]++;
                                                cov_buovmc4uu.s[66]++;
                                                doHook = true;
                                            } else {
                                                cov_buovmc4uu.b[49][1]++;
                                            }
                                        } else {
                                            cov_buovmc4uu.b[45][1]++;
                                        }
                                        let result = (cov_buovmc4uu.s[67]++, _global[hookName](_nativeMethods.HTMLScriptElement.proto.type.set, this, [value], this.constructor.name + ',set type'));
                                        cov_buovmc4uu.s[68]++;
                                        if (doHook) {
                                            cov_buovmc4uu.b[50][0]++;
                                            cov_buovmc4uu.s[69]++;
                                            this.textContent = this.textContent;
                                        } else {
                                            cov_buovmc4uu.b[50][1]++;
                                        }
                                        cov_buovmc4uu.s[70]++;
                                        return result;
                                    }
                                });
                            } else {
                                cov_buovmc4uu.b[43][1]++;
                            }
                            cov_buovmc4uu.s[71]++;
                            return _native.HTMLScriptElement;
                        }
                        function hookHrefProperty(hookName, target, contextGenerator) {
                            cov_buovmc4uu.f[17]++;
                            cov_buovmc4uu.s[72]++;
                            if ((cov_buovmc4uu.b[52][0]++, _native[target]) && (cov_buovmc4uu.b[52][1]++, Object.getOwnPropertyDescriptor(_native[target].prototype, 'href').configurable)) {
                                cov_buovmc4uu.b[51][0]++;
                                cov_buovmc4uu.s[73]++;
                                Object.defineProperty(_native[target].prototype, 'href', {
                                    configurable: false,
                                    enumerable: _nativeMethods[target].proto.href.enumerable,
                                    get: _nativeMethods[target].proto.href.get,
                                    set: function href(value) {
                                        cov_buovmc4uu.f[18]++;
                                        let doHook = (cov_buovmc4uu.s[74]++, false);
                                        let _value = (cov_buovmc4uu.s[75]++, typeof value === 'string' ? (cov_buovmc4uu.b[53][0]++, value.trim()) : (cov_buovmc4uu.b[53][1]++, ''));
                                        cov_buovmc4uu.s[76]++;
                                        if (_value.startsWith('javascript:')) {
                                            cov_buovmc4uu.b[54][0]++;
                                            cov_buovmc4uu.s[77]++;
                                            value = 'javascript:' + hook('(() => { ' + _value.substr(11) + ' })()', hookName, [[
                                                    this.constructor.name + ',set href',
                                                    {}
                                                ]], contextGenerator);
                                        } else {
                                            cov_buovmc4uu.b[54][1]++;
                                        }
                                        cov_buovmc4uu.s[78]++;
                                        return _global[hookName](_nativeMethods[target].proto.href.set, this, [value], this.constructor.name + ',set href');
                                    }
                                });
                            } else {
                                cov_buovmc4uu.b[51][1]++;
                            }
                            cov_buovmc4uu.s[79]++;
                            return _native[target];
                        }
                        function hookHTMLAnchorElement(hookName, initialContext = (cov_buovmc4uu.b[55][0]++, [[
                                'HTMLAnchorElement',
                                {}
                            ]]), contextGenerator) {
                            cov_buovmc4uu.f[19]++;
                            cov_buovmc4uu.s[80]++;
                            return hookHrefProperty(hookName, 'HTMLAnchorElement', contextGenerator);
                        }
                        function hookHTMLAreaElement(hookName, initialContext = (cov_buovmc4uu.b[56][0]++, [[
                                'HTMLAreaElement',
                                {}
                            ]]), contextGenerator) {
                            cov_buovmc4uu.f[20]++;
                            cov_buovmc4uu.s[81]++;
                            return hookHrefProperty(hookName, 'HTMLAreaElement', contextGenerator);
                        }
                        function hookDocument(hookName, initialContext = (cov_buovmc4uu.b[57][0]++, [[
                                'Document',
                                {}
                            ]]), contextGenerator) {
                            cov_buovmc4uu.f[21]++;
                            cov_buovmc4uu.s[82]++;
                            if ((cov_buovmc4uu.b[59][0]++, _native.Document) && (cov_buovmc4uu.b[59][1]++, Object.getOwnPropertyDescriptor(_native.Document.prototype, 'write').configurable)) {
                                cov_buovmc4uu.b[58][0]++;
                                cov_buovmc4uu.s[83]++;
                                Object.defineProperty(_native.Document.prototype, 'write', {
                                    configurable: false,
                                    enumerable: _nativeMethods.Document.proto.write.enumerable,
                                    writable: false,
                                    value: function write(markup) {
                                        cov_buovmc4uu.f[22]++;
                                        let scriptOffset = (cov_buovmc4uu.s[84]++, 0);
                                        cov_buovmc4uu.s[85]++;
                                        for (let i = 0; i < this.childNodes.length; i++) {
                                            let node = (cov_buovmc4uu.s[86]++, this.childNodes[i]);
                                            let innerHTML = (cov_buovmc4uu.s[87]++, node.innerHTML);
                                            let textContent = (cov_buovmc4uu.s[88]++, node.textContent);
                                            cov_buovmc4uu.s[89]++;
                                            if (innerHTML) {
                                                cov_buovmc4uu.b[60][0]++;
                                                cov_buovmc4uu.s[90]++;
                                                scriptOffset += innerHTML.length;
                                            } else {
                                                cov_buovmc4uu.b[60][1]++;
                                                cov_buovmc4uu.s[91]++;
                                                if (textContent) {
                                                    cov_buovmc4uu.b[61][0]++;
                                                    cov_buovmc4uu.s[92]++;
                                                    scriptOffset += textContent.length;
                                                    cov_buovmc4uu.s[93]++;
                                                    if (node.nodeType === node.COMMENT_NODE) {
                                                        cov_buovmc4uu.b[62][0]++;
                                                        cov_buovmc4uu.s[94]++;
                                                        scriptOffset += 7;
                                                    } else {
                                                        cov_buovmc4uu.b[62][1]++;
                                                    }
                                                } else {
                                                    cov_buovmc4uu.b[61][1]++;
                                                }
                                            }
                                        }
                                        let processed = (cov_buovmc4uu.s[95]++, preprocess._preprocessHtml(markup, hookName, new URL(this.location), _global.location.hostname !== this.location.hostname, contextGenerator, [], false, true, scriptOffset, preprocess.getHookProperty()));
                                        cov_buovmc4uu.s[96]++;
                                        return _global[hookName](_nativeMethods.Document.proto.write.value, this, [processed], this.constructor.name + ',write');
                                    }
                                });
                            } else {
                                cov_buovmc4uu.b[58][1]++;
                            }
                            cov_buovmc4uu.s[97]++;
                            return _native.Document;
                        }
                        function _freezeProperties(target) {
                            cov_buovmc4uu.f[23]++;
                            function _freezeProperty(target, prop) {
                                cov_buovmc4uu.f[24]++;
                                let desc = (cov_buovmc4uu.s[98]++, Object.getOwnPropertyDescriptor(target, prop));
                                cov_buovmc4uu.s[99]++;
                                if ((cov_buovmc4uu.b[64][0]++, desc) && (cov_buovmc4uu.b[64][1]++, desc.configurable)) {
                                    cov_buovmc4uu.b[63][0]++;
                                    cov_buovmc4uu.s[100]++;
                                    desc.configurable = false;
                                    cov_buovmc4uu.s[101]++;
                                    if (desc.writable) {
                                        cov_buovmc4uu.b[65][0]++;
                                        cov_buovmc4uu.s[102]++;
                                        desc.writable = false;
                                    } else {
                                        cov_buovmc4uu.b[65][1]++;
                                    }
                                    cov_buovmc4uu.s[103]++;
                                    Object.defineProperty(target, prop, desc);
                                } else {
                                    cov_buovmc4uu.b[63][1]++;
                                }
                            }
                            cov_buovmc4uu.s[104]++;
                            (cov_buovmc4uu.b[66][0]++, _freeze[target.name]) && (cov_buovmc4uu.b[66][1]++, _freeze[target.name].static) && (cov_buovmc4uu.b[66][2]++, _freeze[target.name].static.forEach(prop => {
                                cov_buovmc4uu.f[25]++;
                                cov_buovmc4uu.s[105]++;
                                _freezeProperty(target, prop);
                            }));
                            cov_buovmc4uu.s[106]++;
                            (cov_buovmc4uu.b[67][0]++, _freeze[target.name]) && (cov_buovmc4uu.b[67][1]++, _freeze[target.name].proto) && (cov_buovmc4uu.b[67][2]++, _freeze[target.name].proto.forEach(prop => {
                                cov_buovmc4uu.f[26]++;
                                cov_buovmc4uu.s[107]++;
                                _freezeProperty(target.prototype, prop);
                            }));
                        }
                        function hookPlatform(...targets) {
                            cov_buovmc4uu.f[27]++;
                            let platform = (cov_buovmc4uu.s[108]++, _global);
                            cov_buovmc4uu.s[109]++;
                            targets.forEach(target => {
                                cov_buovmc4uu.f[28]++;
                                cov_buovmc4uu.s[110]++;
                                switch (target.name) {
                                case 'Function':
                                    cov_buovmc4uu.b[68][0]++;
                                    cov_buovmc4uu.s[111]++;
                                    Object.getOwnPropertyNames(_native[target.name]).forEach(prop => {
                                        cov_buovmc4uu.f[29]++;
                                        let desc = (cov_buovmc4uu.s[112]++, Object.getOwnPropertyDescriptor(_native[target.name], prop));
                                        cov_buovmc4uu.s[113]++;
                                        if (desc) {
                                            cov_buovmc4uu.b[69][0]++;
                                            cov_buovmc4uu.s[114]++;
                                            Object.defineProperty(target, prop, desc);
                                        } else {
                                            cov_buovmc4uu.b[69][1]++;
                                        }
                                    });
                                    cov_buovmc4uu.s[115]++;
                                    Object.defineProperty(target, 'toString', {
                                        value: function toString() {
                                            cov_buovmc4uu.f[30]++;
                                            cov_buovmc4uu.s[116]++;
                                            return 'function ' + target.name + '() { [native code] }';
                                        },
                                        configurable: false,
                                        enumerable: false,
                                        writable: false
                                    });
                                    cov_buovmc4uu.s[117]++;
                                    Object.defineProperty(_native[target.name].prototype, 'constructor', {
                                        value: target,
                                        configurable: false,
                                        enumerable: false,
                                        writable: false
                                    });
                                    cov_buovmc4uu.s[118]++;
                                    _freezeProperties(target);
                                    cov_buovmc4uu.s[119]++;
                                    Object.defineProperty(platform, target.name, {
                                        value: target,
                                        configurable: false,
                                        enumerable: false,
                                        writable: false
                                    });
                                    cov_buovmc4uu.s[120]++;
                                    break;
                                case 'setTimeout':
                                    cov_buovmc4uu.b[68][1]++;
                                case 'setInterval':
                                    cov_buovmc4uu.b[68][2]++;
                                    cov_buovmc4uu.s[121]++;
                                    Object.defineProperty(target, 'toString', {
                                        value: function toString() {
                                            cov_buovmc4uu.f[31]++;
                                            cov_buovmc4uu.s[122]++;
                                            return 'function ' + target.name + '() { [native code] }';
                                        },
                                        configurable: false,
                                        enumerable: false,
                                        writable: false
                                    });
                                    cov_buovmc4uu.s[123]++;
                                    _freezeProperties(target);
                                    cov_buovmc4uu.s[124]++;
                                    Object.defineProperty(platform, target.name, {
                                        value: target,
                                        configurable: false,
                                        enumerable: false,
                                        writable: false
                                    });
                                    cov_buovmc4uu.s[125]++;
                                    break;
                                case 'HTMLScriptElement':
                                    cov_buovmc4uu.b[68][3]++;
                                    cov_buovmc4uu.s[126]++;
                                    _freezeProperties(target);
                                    cov_buovmc4uu.s[127]++;
                                    Object.defineProperty(platform, target.name, {
                                        value: target,
                                        configurable: false,
                                        enumerable: false,
                                        writable: false
                                    });
                                    cov_buovmc4uu.s[128]++;
                                    break;
                                case 'eval':
                                    cov_buovmc4uu.b[68][4]++;
                                    cov_buovmc4uu.s[129]++;
                                    _freezeProperties(target);
                                    cov_buovmc4uu.s[130]++;
                                    Object.defineProperty(platform, target.name, {
                                        value: target,
                                        configurable: false,
                                        enumerable: false,
                                        writable: false
                                    });
                                    cov_buovmc4uu.s[131]++;
                                    break;
                                case 'write':
                                    cov_buovmc4uu.b[68][5]++;
                                default:
                                    cov_buovmc4uu.b[68][6]++;
                                    cov_buovmc4uu.s[132]++;
                                    break;
                                }
                            });
                        }
                        cov_buovmc4uu.s[133]++;
                        return {
                            hook: hookPlatform,
                            Function: hookFunction,
                            eval: hookEval,
                            setTimeout: hookSetTimeout,
                            setInterval: hookSetInterval,
                            Node: hookNode,
                            Element: hookElement,
                            HTMLAnchorElement: hookHTMLAnchorElement,
                            HTMLAreaElement: hookHTMLAreaElement,
                            HTMLScriptElement: hookHTMLScriptElement,
                            Document: hookDocument
                        };
                    };
                }.call(this, typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}));
            },
            {}
        ],
        103: [
            function (require, module, exports) {
                var cov_83ujap16b = function () {
                    var path = '/home/fedora/WebComponents/components/thin-hook/lib/preprocess.js', hash = '8e9da97838ba56a972ebe8774659174755e36a5b', global = new Function('return this')(), gcv = '__coverage__', coverageData = {
                            path: '/home/fedora/WebComponents/components/thin-hook/lib/preprocess.js',
                            statementMap: {
                                '0': {
                                    start: {
                                        line: 6,
                                        column: 0
                                    },
                                    end: {
                                        line: 859,
                                        column: 1
                                    }
                                },
                                '1': {
                                    start: {
                                        line: 8,
                                        column: 33
                                    },
                                    end: {
                                        line: 8,
                                        column: 104
                                    }
                                },
                                '2': {
                                    start: {
                                        line: 9,
                                        column: 40
                                    },
                                    end: {
                                        line: 9,
                                        column: 115
                                    }
                                },
                                '3': {
                                    start: {
                                        line: 10,
                                        column: 24
                                    },
                                    end: {
                                        line: 10,
                                        column: 99
                                    }
                                },
                                '4': {
                                    start: {
                                        line: 11,
                                        column: 30
                                    },
                                    end: {
                                        line: 11,
                                        column: 123
                                    }
                                },
                                '5': {
                                    start: {
                                        line: 12,
                                        column: 37
                                    },
                                    end: {
                                        line: 12,
                                        column: 134
                                    }
                                },
                                '6': {
                                    start: {
                                        line: 14,
                                        column: 33
                                    },
                                    end: {
                                        line: 14,
                                        column: 43
                                    }
                                },
                                '7': {
                                    start: {
                                        line: 17,
                                        column: 4
                                    },
                                    end: {
                                        line: 17,
                                        column: 36
                                    }
                                },
                                '8': {
                                    start: {
                                        line: 20,
                                        column: 29
                                    },
                                    end: {
                                        line: 20,
                                        column: 37
                                    }
                                },
                                '9': {
                                    start: {
                                        line: 23,
                                        column: 4
                                    },
                                    end: {
                                        line: 23,
                                        column: 32
                                    }
                                },
                                '10': {
                                    start: {
                                        line: 26,
                                        column: 26
                                    },
                                    end: {
                                        line: 26,
                                        column: 30
                                    }
                                },
                                '11': {
                                    start: {
                                        line: 29,
                                        column: 4
                                    },
                                    end: {
                                        line: 29,
                                        column: 29
                                    }
                                },
                                '12': {
                                    start: {
                                        line: 32,
                                        column: 21
                                    },
                                    end: {
                                        line: 32,
                                        column: 25
                                    }
                                },
                                '13': {
                                    start: {
                                        line: 35,
                                        column: 4
                                    },
                                    end: {
                                        line: 35,
                                        column: 24
                                    }
                                },
                                '14': {
                                    start: {
                                        line: 39,
                                        column: 4
                                    },
                                    end: {
                                        line: 39,
                                        column: 40
                                    }
                                },
                                '15': {
                                    start: {
                                        line: 42,
                                        column: 16
                                    },
                                    end: {
                                        line: 42,
                                        column: 21
                                    }
                                },
                                '16': {
                                    start: {
                                        line: 45,
                                        column: 4
                                    },
                                    end: {
                                        line: 45,
                                        column: 19
                                    }
                                },
                                '17': {
                                    start: {
                                        line: 49,
                                        column: 4
                                    },
                                    end: {
                                        line: 49,
                                        column: 30
                                    }
                                },
                                '18': {
                                    start: {
                                        line: 52,
                                        column: 20
                                    },
                                    end: {
                                        line: 52,
                                        column: 22
                                    }
                                },
                                '19': {
                                    start: {
                                        line: 53,
                                        column: 24
                                    },
                                    end: {
                                        line: 53,
                                        column: 25
                                    }
                                },
                                '20': {
                                    start: {
                                        line: 56,
                                        column: 15
                                    },
                                    end: {
                                        line: 56,
                                        column: 46
                                    }
                                },
                                '21': {
                                    start: {
                                        line: 57,
                                        column: 4
                                    },
                                    end: {
                                        line: 57,
                                        column: 38
                                    }
                                },
                                '22': {
                                    start: {
                                        line: 58,
                                        column: 4
                                    },
                                    end: {
                                        line: 58,
                                        column: 30
                                    }
                                },
                                '23': {
                                    start: {
                                        line: 62,
                                        column: 4
                                    },
                                    end: {
                                        line: 62,
                                        column: 23
                                    }
                                },
                                '24': {
                                    start: {
                                        line: 66,
                                        column: 4
                                    },
                                    end: {
                                        line: 66,
                                        column: 31
                                    }
                                },
                                '25': {
                                    start: {
                                        line: 67,
                                        column: 4
                                    },
                                    end: {
                                        line: 67,
                                        column: 47
                                    }
                                },
                                '26': {
                                    start: {
                                        line: 68,
                                        column: 4
                                    },
                                    end: {
                                        line: 94,
                                        column: 7
                                    }
                                },
                                '27': {
                                    start: {
                                        line: 69,
                                        column: 6
                                    },
                                    end: {
                                        line: 69,
                                        column: 24
                                    }
                                },
                                '28': {
                                    start: {
                                        line: 70,
                                        column: 6
                                    },
                                    end: {
                                        line: 93,
                                        column: 7
                                    }
                                },
                                '29': {
                                    start: {
                                        line: 71,
                                        column: 22
                                    },
                                    end: {
                                        line: 71,
                                        column: 44
                                    }
                                },
                                '30': {
                                    start: {
                                        line: 72,
                                        column: 17
                                    },
                                    end: {
                                        line: 72,
                                        column: 27
                                    }
                                },
                                '31': {
                                    start: {
                                        line: 73,
                                        column: 21
                                    },
                                    end: {
                                        line: 73,
                                        column: 31
                                    }
                                },
                                '32': {
                                    start: {
                                        line: 74,
                                        column: 8
                                    },
                                    end: {
                                        line: 92,
                                        column: 9
                                    }
                                },
                                '33': {
                                    start: {
                                        line: 75,
                                        column: 10
                                    },
                                    end: {
                                        line: 88,
                                        column: 11
                                    }
                                },
                                '34': {
                                    start: {
                                        line: 76,
                                        column: 25
                                    },
                                    end: {
                                        line: 76,
                                        column: 35
                                    }
                                },
                                '35': {
                                    start: {
                                        line: 77,
                                        column: 12
                                    },
                                    end: {
                                        line: 77,
                                        column: 45
                                    }
                                },
                                '36': {
                                    start: {
                                        line: 78,
                                        column: 12
                                    },
                                    end: {
                                        line: 78,
                                        column: 45
                                    }
                                },
                                '37': {
                                    start: {
                                        line: 80,
                                        column: 12
                                    },
                                    end: {
                                        line: 80,
                                        column: 56
                                    }
                                },
                                '38': {
                                    start: {
                                        line: 83,
                                        column: 24
                                    },
                                    end: {
                                        line: 83,
                                        column: 34
                                    }
                                },
                                '39': {
                                    start: {
                                        line: 84,
                                        column: 12
                                    },
                                    end: {
                                        line: 84,
                                        column: 45
                                    }
                                },
                                '40': {
                                    start: {
                                        line: 85,
                                        column: 12
                                    },
                                    end: {
                                        line: 85,
                                        column: 43
                                    }
                                },
                                '41': {
                                    start: {
                                        line: 86,
                                        column: 12
                                    },
                                    end: {
                                        line: 86,
                                        column: 94
                                    }
                                },
                                '42': {
                                    start: {
                                        line: 87,
                                        column: 12
                                    },
                                    end: {
                                        line: 87,
                                        column: 56
                                    }
                                },
                                '43': {
                                    start: {
                                        line: 91,
                                        column: 10
                                    },
                                    end: {
                                        line: 91,
                                        column: 80
                                    }
                                },
                                '44': {
                                    start: {
                                        line: 98,
                                        column: 4
                                    },
                                    end: {
                                        line: 117,
                                        column: 5
                                    }
                                },
                                '45': {
                                    start: {
                                        line: 99,
                                        column: 29
                                    },
                                    end: {
                                        line: 99,
                                        column: 31
                                    }
                                },
                                '46': {
                                    start: {
                                        line: 101,
                                        column: 6
                                    },
                                    end: {
                                        line: 109,
                                        column: 7
                                    }
                                },
                                '47': {
                                    start: {
                                        line: 102,
                                        column: 21
                                    },
                                    end: {
                                        line: 105,
                                        column: 9
                                    }
                                },
                                '48': {
                                    start: {
                                        line: 106,
                                        column: 8
                                    },
                                    end: {
                                        line: 106,
                                        column: 71
                                    }
                                },
                                '49': {
                                    start: {
                                        line: 107,
                                        column: 8
                                    },
                                    end: {
                                        line: 107,
                                        column: 33
                                    }
                                },
                                '50': {
                                    start: {
                                        line: 108,
                                        column: 8
                                    },
                                    end: {
                                        line: 108,
                                        column: 52
                                    }
                                },
                                '51': {
                                    start: {
                                        line: 112,
                                        column: 6
                                    },
                                    end: {
                                        line: 112,
                                        column: 82
                                    }
                                },
                                '52': {
                                    start: {
                                        line: 114,
                                        column: 6
                                    },
                                    end: {
                                        line: 116,
                                        column: 9
                                    }
                                },
                                '53': {
                                    start: {
                                        line: 115,
                                        column: 8
                                    },
                                    end: {
                                        line: 115,
                                        column: 65
                                    }
                                },
                                '54': {
                                    start: {
                                        line: 121,
                                        column: 17
                                    },
                                    end: {
                                        line: 121,
                                        column: 21
                                    }
                                },
                                '55': {
                                    start: {
                                        line: 122,
                                        column: 4
                                    },
                                    end: {
                                        line: 133,
                                        column: 5
                                    }
                                },
                                '56': {
                                    start: {
                                        line: 124,
                                        column: 21
                                    },
                                    end: {
                                        line: 124,
                                        column: 22
                                    }
                                },
                                '57': {
                                    start: {
                                        line: 125,
                                        column: 29
                                    },
                                    end: {
                                        line: 125,
                                        column: 64
                                    }
                                },
                                '58': {
                                    start: {
                                        line: 126,
                                        column: 6
                                    },
                                    end: {
                                        line: 131,
                                        column: 7
                                    }
                                },
                                '59': {
                                    start: {
                                        line: 127,
                                        column: 8
                                    },
                                    end: {
                                        line: 130,
                                        column: 9
                                    }
                                },
                                '60': {
                                    start: {
                                        line: 128,
                                        column: 10
                                    },
                                    end: {
                                        line: 128,
                                        column: 23
                                    }
                                },
                                '61': {
                                    start: {
                                        line: 129,
                                        column: 10
                                    },
                                    end: {
                                        line: 129,
                                        column: 58
                                    }
                                },
                                '62': {
                                    start: {
                                        line: 132,
                                        column: 6
                                    },
                                    end: {
                                        line: 132,
                                        column: 37
                                    }
                                },
                                '63': {
                                    start: {
                                        line: 134,
                                        column: 4
                                    },
                                    end: {
                                        line: 134,
                                        column: 18
                                    }
                                },
                                '64': {
                                    start: {
                                        line: 139,
                                        column: 4
                                    },
                                    end: {
                                        line: 168,
                                        column: 5
                                    }
                                },
                                '65': {
                                    start: {
                                        line: 140,
                                        column: 18
                                    },
                                    end: {
                                        line: 140,
                                        column: 69
                                    }
                                },
                                '66': {
                                    start: {
                                        line: 141,
                                        column: 18
                                    },
                                    end: {
                                        line: 141,
                                        column: 24
                                    }
                                },
                                '67': {
                                    start: {
                                        line: 142,
                                        column: 6
                                    },
                                    end: {
                                        line: 152,
                                        column: 7
                                    }
                                },
                                '68': {
                                    start: {
                                        line: 143,
                                        column: 8
                                    },
                                    end: {
                                        line: 151,
                                        column: 9
                                    }
                                },
                                '69': {
                                    start: {
                                        line: 146,
                                        column: 10
                                    },
                                    end: {
                                        line: 146,
                                        column: 54
                                    }
                                },
                                '70': {
                                    start: {
                                        line: 147,
                                        column: 10
                                    },
                                    end: {
                                        line: 147,
                                        column: 16
                                    }
                                },
                                '71': {
                                    start: {
                                        line: 149,
                                        column: 10
                                    },
                                    end: {
                                        line: 149,
                                        column: 50
                                    }
                                },
                                '72': {
                                    start: {
                                        line: 150,
                                        column: 10
                                    },
                                    end: {
                                        line: 150,
                                        column: 16
                                    }
                                },
                                '73': {
                                    start: {
                                        line: 153,
                                        column: 6
                                    },
                                    end: {
                                        line: 153,
                                        column: 120
                                    }
                                },
                                '74': {
                                    start: {
                                        line: 154,
                                        column: 19
                                    },
                                    end: {
                                        line: 154,
                                        column: 65
                                    }
                                },
                                '75': {
                                    start: {
                                        line: 155,
                                        column: 19
                                    },
                                    end: {
                                        line: 155,
                                        column: 26
                                    }
                                },
                                '76': {
                                    start: {
                                        line: 156,
                                        column: 6
                                    },
                                    end: {
                                        line: 166,
                                        column: 7
                                    }
                                },
                                '77': {
                                    start: {
                                        line: 157,
                                        column: 8
                                    },
                                    end: {
                                        line: 165,
                                        column: 9
                                    }
                                },
                                '78': {
                                    start: {
                                        line: 160,
                                        column: 10
                                    },
                                    end: {
                                        line: 160,
                                        column: 52
                                    }
                                },
                                '79': {
                                    start: {
                                        line: 161,
                                        column: 10
                                    },
                                    end: {
                                        line: 161,
                                        column: 16
                                    }
                                },
                                '80': {
                                    start: {
                                        line: 163,
                                        column: 10
                                    },
                                    end: {
                                        line: 163,
                                        column: 46
                                    }
                                },
                                '81': {
                                    start: {
                                        line: 164,
                                        column: 10
                                    },
                                    end: {
                                        line: 164,
                                        column: 16
                                    }
                                },
                                '82': {
                                    start: {
                                        line: 167,
                                        column: 6
                                    },
                                    end: {
                                        line: 167,
                                        column: 111
                                    }
                                },
                                '83': {
                                    start: {
                                        line: 169,
                                        column: 4
                                    },
                                    end: {
                                        line: 169,
                                        column: 18
                                    }
                                },
                                '84': {
                                    start: {
                                        line: 173,
                                        column: 4
                                    },
                                    end: {
                                        line: 177,
                                        column: 5
                                    }
                                },
                                '85': {
                                    start: {
                                        line: 174,
                                        column: 6
                                    },
                                    end: {
                                        line: 174,
                                        column: 23
                                    }
                                },
                                '86': {
                                    start: {
                                        line: 175,
                                        column: 6
                                    },
                                    end: {
                                        line: 175,
                                        column: 21
                                    }
                                },
                                '87': {
                                    start: {
                                        line: 176,
                                        column: 6
                                    },
                                    end: {
                                        line: 176,
                                        column: 21
                                    }
                                },
                                '88': {
                                    start: {
                                        line: 178,
                                        column: 4
                                    },
                                    end: {
                                        line: 192,
                                        column: 5
                                    }
                                },
                                '89': {
                                    start: {
                                        line: 179,
                                        column: 6
                                    },
                                    end: {
                                        line: 191,
                                        column: 7
                                    }
                                },
                                '90': {
                                    start: {
                                        line: 180,
                                        column: 8
                                    },
                                    end: {
                                        line: 190,
                                        column: 9
                                    }
                                },
                                '91': {
                                    start: {
                                        line: 181,
                                        column: 10
                                    },
                                    end: {
                                        line: 186,
                                        column: 11
                                    }
                                },
                                '92': {
                                    start: {
                                        line: 182,
                                        column: 23
                                    },
                                    end: {
                                        line: 182,
                                        column: 37
                                    }
                                },
                                '93': {
                                    start: {
                                        line: 183,
                                        column: 12
                                    },
                                    end: {
                                        line: 185,
                                        column: 13
                                    }
                                },
                                '94': {
                                    start: {
                                        line: 184,
                                        column: 14
                                    },
                                    end: {
                                        line: 184,
                                        column: 47
                                    }
                                },
                                '95': {
                                    start: {
                                        line: 188,
                                        column: 13
                                    },
                                    end: {
                                        line: 190,
                                        column: 9
                                    }
                                },
                                '96': {
                                    start: {
                                        line: 189,
                                        column: 10
                                    },
                                    end: {
                                        line: 189,
                                        column: 40
                                    }
                                },
                                '97': {
                                    start: {
                                        line: 193,
                                        column: 4
                                    },
                                    end: {
                                        line: 193,
                                        column: 15
                                    }
                                },
                                '98': {
                                    start: {
                                        line: 196,
                                        column: 21
                                    },
                                    end: {
                                        line: 196,
                                        column: 23
                                    }
                                },
                                '99': {
                                    start: {
                                        line: 197,
                                        column: 23
                                    },
                                    end: {
                                        line: 197,
                                        column: 39
                                    }
                                },
                                '100': {
                                    start: {
                                        line: 198,
                                        column: 22
                                    },
                                    end: {
                                        line: 198,
                                        column: 41
                                    }
                                },
                                '101': {
                                    start: {
                                        line: 201,
                                        column: 4
                                    },
                                    end: {
                                        line: 203,
                                        column: 5
                                    }
                                },
                                '102': {
                                    start: {
                                        line: 202,
                                        column: 6
                                    },
                                    end: {
                                        line: 202,
                                        column: 112
                                    }
                                },
                                '103': {
                                    start: {
                                        line: 204,
                                        column: 4
                                    },
                                    end: {
                                        line: 204,
                                        column: 104
                                    }
                                },
                                '104': {
                                    start: {
                                        line: 209,
                                        column: 4
                                    },
                                    end: {
                                        line: 501,
                                        column: 5
                                    }
                                },
                                '105': {
                                    start: {
                                        line: 211,
                                        column: 6
                                    },
                                    end: {
                                        line: 235,
                                        column: 7
                                    }
                                },
                                '106': {
                                    start: {
                                        line: 215,
                                        column: 8
                                    },
                                    end: {
                                        line: 215,
                                        column: 67
                                    }
                                },
                                '107': {
                                    start: {
                                        line: 216,
                                        column: 8
                                    },
                                    end: {
                                        line: 218,
                                        column: 29
                                    }
                                },
                                '108': {
                                    start: {
                                        line: 219,
                                        column: 8
                                    },
                                    end: {
                                        line: 219,
                                        column: 32
                                    }
                                },
                                '109': {
                                    start: {
                                        line: 220,
                                        column: 8
                                    },
                                    end: {
                                        line: 220,
                                        column: 41
                                    }
                                },
                                '110': {
                                    start: {
                                        line: 221,
                                        column: 8
                                    },
                                    end: {
                                        line: 221,
                                        column: 36
                                    }
                                },
                                '111': {
                                    start: {
                                        line: 222,
                                        column: 8
                                    },
                                    end: {
                                        line: 230,
                                        column: 9
                                    }
                                },
                                '112': {
                                    start: {
                                        line: 223,
                                        column: 10
                                    },
                                    end: {
                                        line: 223,
                                        column: 35
                                    }
                                },
                                '113': {
                                    start: {
                                        line: 226,
                                        column: 10
                                    },
                                    end: {
                                        line: 226,
                                        column: 46
                                    }
                                },
                                '114': {
                                    start: {
                                        line: 227,
                                        column: 10
                                    },
                                    end: {
                                        line: 227,
                                        column: 47
                                    }
                                },
                                '115': {
                                    start: {
                                        line: 228,
                                        column: 10
                                    },
                                    end: {
                                        line: 228,
                                        column: 43
                                    }
                                },
                                '116': {
                                    start: {
                                        line: 229,
                                        column: 10
                                    },
                                    end: {
                                        line: 229,
                                        column: 31
                                    }
                                },
                                '117': {
                                    start: {
                                        line: 231,
                                        column: 8
                                    },
                                    end: {
                                        line: 231,
                                        column: 26
                                    }
                                },
                                '118': {
                                    start: {
                                        line: 232,
                                        column: 8
                                    },
                                    end: {
                                        line: 232,
                                        column: 28
                                    }
                                },
                                '119': {
                                    start: {
                                        line: 233,
                                        column: 8
                                    },
                                    end: {
                                        line: 233,
                                        column: 28
                                    }
                                },
                                '120': {
                                    start: {
                                        line: 234,
                                        column: 8
                                    },
                                    end: {
                                        line: 234,
                                        column: 30
                                    }
                                },
                                '121': {
                                    start: {
                                        line: 236,
                                        column: 6
                                    },
                                    end: {
                                        line: 236,
                                        column: 12
                                    }
                                },
                                '122': {
                                    start: {
                                        line: 238,
                                        column: 6
                                    },
                                    end: {
                                        line: 262,
                                        column: 7
                                    }
                                },
                                '123': {
                                    start: {
                                        line: 243,
                                        column: 8
                                    },
                                    end: {
                                        line: 243,
                                        column: 67
                                    }
                                },
                                '124': {
                                    start: {
                                        line: 244,
                                        column: 8
                                    },
                                    end: {
                                        line: 246,
                                        column: 29
                                    }
                                },
                                '125': {
                                    start: {
                                        line: 247,
                                        column: 8
                                    },
                                    end: {
                                        line: 247,
                                        column: 32
                                    }
                                },
                                '126': {
                                    start: {
                                        line: 248,
                                        column: 8
                                    },
                                    end: {
                                        line: 248,
                                        column: 41
                                    }
                                },
                                '127': {
                                    start: {
                                        line: 249,
                                        column: 8
                                    },
                                    end: {
                                        line: 249,
                                        column: 84
                                    }
                                },
                                '128': {
                                    start: {
                                        line: 250,
                                        column: 8
                                    },
                                    end: {
                                        line: 250,
                                        column: 45
                                    }
                                },
                                '129': {
                                    start: {
                                        line: 251,
                                        column: 8
                                    },
                                    end: {
                                        line: 257,
                                        column: 9
                                    }
                                },
                                '130': {
                                    start: {
                                        line: 252,
                                        column: 10
                                    },
                                    end: {
                                        line: 252,
                                        column: 44
                                    }
                                },
                                '131': {
                                    start: {
                                        line: 255,
                                        column: 10
                                    },
                                    end: {
                                        line: 255,
                                        column: 55
                                    }
                                },
                                '132': {
                                    start: {
                                        line: 256,
                                        column: 10
                                    },
                                    end: {
                                        line: 256,
                                        column: 31
                                    }
                                },
                                '133': {
                                    start: {
                                        line: 258,
                                        column: 8
                                    },
                                    end: {
                                        line: 258,
                                        column: 28
                                    }
                                },
                                '134': {
                                    start: {
                                        line: 259,
                                        column: 8
                                    },
                                    end: {
                                        line: 259,
                                        column: 26
                                    }
                                },
                                '135': {
                                    start: {
                                        line: 260,
                                        column: 8
                                    },
                                    end: {
                                        line: 260,
                                        column: 28
                                    }
                                },
                                '136': {
                                    start: {
                                        line: 261,
                                        column: 8
                                    },
                                    end: {
                                        line: 261,
                                        column: 30
                                    }
                                },
                                '137': {
                                    start: {
                                        line: 263,
                                        column: 6
                                    },
                                    end: {
                                        line: 263,
                                        column: 12
                                    }
                                },
                                '138': {
                                    start: {
                                        line: 265,
                                        column: 6
                                    },
                                    end: {
                                        line: 289,
                                        column: 7
                                    }
                                },
                                '139': {
                                    start: {
                                        line: 270,
                                        column: 8
                                    },
                                    end: {
                                        line: 270,
                                        column: 67
                                    }
                                },
                                '140': {
                                    start: {
                                        line: 271,
                                        column: 8
                                    },
                                    end: {
                                        line: 273,
                                        column: 29
                                    }
                                },
                                '141': {
                                    start: {
                                        line: 274,
                                        column: 8
                                    },
                                    end: {
                                        line: 274,
                                        column: 32
                                    }
                                },
                                '142': {
                                    start: {
                                        line: 275,
                                        column: 8
                                    },
                                    end: {
                                        line: 275,
                                        column: 41
                                    }
                                },
                                '143': {
                                    start: {
                                        line: 276,
                                        column: 8
                                    },
                                    end: {
                                        line: 276,
                                        column: 44
                                    }
                                },
                                '144': {
                                    start: {
                                        line: 277,
                                        column: 8
                                    },
                                    end: {
                                        line: 277,
                                        column: 45
                                    }
                                },
                                '145': {
                                    start: {
                                        line: 278,
                                        column: 8
                                    },
                                    end: {
                                        line: 284,
                                        column: 9
                                    }
                                },
                                '146': {
                                    start: {
                                        line: 279,
                                        column: 10
                                    },
                                    end: {
                                        line: 279,
                                        column: 44
                                    }
                                },
                                '147': {
                                    start: {
                                        line: 282,
                                        column: 10
                                    },
                                    end: {
                                        line: 282,
                                        column: 55
                                    }
                                },
                                '148': {
                                    start: {
                                        line: 283,
                                        column: 10
                                    },
                                    end: {
                                        line: 283,
                                        column: 31
                                    }
                                },
                                '149': {
                                    start: {
                                        line: 285,
                                        column: 8
                                    },
                                    end: {
                                        line: 285,
                                        column: 28
                                    }
                                },
                                '150': {
                                    start: {
                                        line: 286,
                                        column: 8
                                    },
                                    end: {
                                        line: 286,
                                        column: 26
                                    }
                                },
                                '151': {
                                    start: {
                                        line: 287,
                                        column: 8
                                    },
                                    end: {
                                        line: 287,
                                        column: 28
                                    }
                                },
                                '152': {
                                    start: {
                                        line: 288,
                                        column: 8
                                    },
                                    end: {
                                        line: 288,
                                        column: 30
                                    }
                                },
                                '153': {
                                    start: {
                                        line: 290,
                                        column: 6
                                    },
                                    end: {
                                        line: 290,
                                        column: 12
                                    }
                                },
                                '154': {
                                    start: {
                                        line: 292,
                                        column: 6
                                    },
                                    end: {
                                        line: 324,
                                        column: 7
                                    }
                                },
                                '155': {
                                    start: {
                                        line: 297,
                                        column: 8
                                    },
                                    end: {
                                        line: 297,
                                        column: 67
                                    }
                                },
                                '156': {
                                    start: {
                                        line: 298,
                                        column: 8
                                    },
                                    end: {
                                        line: 300,
                                        column: 29
                                    }
                                },
                                '157': {
                                    start: {
                                        line: 301,
                                        column: 8
                                    },
                                    end: {
                                        line: 301,
                                        column: 32
                                    }
                                },
                                '158': {
                                    start: {
                                        line: 302,
                                        column: 8
                                    },
                                    end: {
                                        line: 302,
                                        column: 41
                                    }
                                },
                                '159': {
                                    start: {
                                        line: 303,
                                        column: 8
                                    },
                                    end: {
                                        line: 303,
                                        column: 44
                                    }
                                },
                                '160': {
                                    start: {
                                        line: 304,
                                        column: 8
                                    },
                                    end: {
                                        line: 304,
                                        column: 34
                                    }
                                },
                                '161': {
                                    start: {
                                        line: 305,
                                        column: 8
                                    },
                                    end: {
                                        line: 305,
                                        column: 41
                                    }
                                },
                                '162': {
                                    start: {
                                        line: 306,
                                        column: 8
                                    },
                                    end: {
                                        line: 314,
                                        column: 9
                                    }
                                },
                                '163': {
                                    start: {
                                        line: 307,
                                        column: 10
                                    },
                                    end: {
                                        line: 307,
                                        column: 40
                                    }
                                },
                                '164': {
                                    start: {
                                        line: 310,
                                        column: 10
                                    },
                                    end: {
                                        line: 310,
                                        column: 51
                                    }
                                },
                                '165': {
                                    start: {
                                        line: 311,
                                        column: 10
                                    },
                                    end: {
                                        line: 311,
                                        column: 52
                                    }
                                },
                                '166': {
                                    start: {
                                        line: 312,
                                        column: 10
                                    },
                                    end: {
                                        line: 312,
                                        column: 48
                                    }
                                },
                                '167': {
                                    start: {
                                        line: 313,
                                        column: 10
                                    },
                                    end: {
                                        line: 313,
                                        column: 31
                                    }
                                },
                                '168': {
                                    start: {
                                        line: 315,
                                        column: 8
                                    },
                                    end: {
                                        line: 315,
                                        column: 30
                                    }
                                },
                                '169': {
                                    start: {
                                        line: 316,
                                        column: 8
                                    },
                                    end: {
                                        line: 316,
                                        column: 40
                                    }
                                },
                                '170': {
                                    start: {
                                        line: 317,
                                        column: 8
                                    },
                                    end: {
                                        line: 317,
                                        column: 36
                                    }
                                },
                                '171': {
                                    start: {
                                        line: 318,
                                        column: 8
                                    },
                                    end: {
                                        line: 318,
                                        column: 36
                                    }
                                },
                                '172': {
                                    start: {
                                        line: 319,
                                        column: 8
                                    },
                                    end: {
                                        line: 319,
                                        column: 40
                                    }
                                },
                                '173': {
                                    start: {
                                        line: 320,
                                        column: 8
                                    },
                                    end: {
                                        line: 320,
                                        column: 28
                                    }
                                },
                                '174': {
                                    start: {
                                        line: 321,
                                        column: 8
                                    },
                                    end: {
                                        line: 321,
                                        column: 24
                                    }
                                },
                                '175': {
                                    start: {
                                        line: 322,
                                        column: 8
                                    },
                                    end: {
                                        line: 322,
                                        column: 25
                                    }
                                },
                                '176': {
                                    start: {
                                        line: 323,
                                        column: 8
                                    },
                                    end: {
                                        line: 323,
                                        column: 30
                                    }
                                },
                                '177': {
                                    start: {
                                        line: 325,
                                        column: 6
                                    },
                                    end: {
                                        line: 325,
                                        column: 12
                                    }
                                },
                                '178': {
                                    start: {
                                        line: 327,
                                        column: 6
                                    },
                                    end: {
                                        line: 329,
                                        column: 7
                                    }
                                },
                                '179': {
                                    start: {
                                        line: 328,
                                        column: 8
                                    },
                                    end: {
                                        line: 328,
                                        column: 29
                                    }
                                },
                                '180': {
                                    start: {
                                        line: 330,
                                        column: 6
                                    },
                                    end: {
                                        line: 330,
                                        column: 12
                                    }
                                },
                                '181': {
                                    start: {
                                        line: 333,
                                        column: 6
                                    },
                                    end: {
                                        line: 372,
                                        column: 7
                                    }
                                },
                                '182': {
                                    start: {
                                        line: 334,
                                        column: 8
                                    },
                                    end: {
                                        line: 334,
                                        column: 30
                                    }
                                },
                                '183': {
                                    start: {
                                        line: 336,
                                        column: 11
                                    },
                                    end: {
                                        line: 372,
                                        column: 7
                                    }
                                },
                                '184': {
                                    start: {
                                        line: 341,
                                        column: 8
                                    },
                                    end: {
                                        line: 341,
                                        column: 28
                                    }
                                },
                                '185': {
                                    start: {
                                        line: 342,
                                        column: 8
                                    },
                                    end: {
                                        line: 342,
                                        column: 29
                                    }
                                },
                                '186': {
                                    start: {
                                        line: 343,
                                        column: 8
                                    },
                                    end: {
                                        line: 343,
                                        column: 67
                                    }
                                },
                                '187': {
                                    start: {
                                        line: 344,
                                        column: 8
                                    },
                                    end: {
                                        line: 348,
                                        column: 126
                                    }
                                },
                                '188': {
                                    start: {
                                        line: 349,
                                        column: 8
                                    },
                                    end: {
                                        line: 351,
                                        column: 56
                                    }
                                },
                                '189': {
                                    start: {
                                        line: 352,
                                        column: 8
                                    },
                                    end: {
                                        line: 352,
                                        column: 28
                                    }
                                },
                                '190': {
                                    start: {
                                        line: 353,
                                        column: 8
                                    },
                                    end: {
                                        line: 353,
                                        column: 30
                                    }
                                },
                                '191': {
                                    start: {
                                        line: 354,
                                        column: 8
                                    },
                                    end: {
                                        line: 354,
                                        column: 27
                                    }
                                },
                                '192': {
                                    start: {
                                        line: 355,
                                        column: 8
                                    },
                                    end: {
                                        line: 355,
                                        column: 28
                                    }
                                },
                                '193': {
                                    start: {
                                        line: 356,
                                        column: 8
                                    },
                                    end: {
                                        line: 366,
                                        column: 11
                                    }
                                },
                                '194': {
                                    start: {
                                        line: 357,
                                        column: 10
                                    },
                                    end: {
                                        line: 365,
                                        column: 25
                                    }
                                },
                                '195': {
                                    start: {
                                        line: 358,
                                        column: 74
                                    },
                                    end: {
                                        line: 358,
                                        column: 88
                                    }
                                },
                                '196': {
                                    start: {
                                        line: 362,
                                        column: 84
                                    },
                                    end: {
                                        line: 364,
                                        column: 24
                                    }
                                },
                                '197': {
                                    start: {
                                        line: 363,
                                        column: 32
                                    },
                                    end: {
                                        line: 363,
                                        column: 46
                                    }
                                },
                                '198': {
                                    start: {
                                        line: 367,
                                        column: 8
                                    },
                                    end: {
                                        line: 367,
                                        column: 45
                                    }
                                },
                                '199': {
                                    start: {
                                        line: 368,
                                        column: 8
                                    },
                                    end: {
                                        line: 368,
                                        column: 41
                                    }
                                },
                                '200': {
                                    start: {
                                        line: 369,
                                        column: 8
                                    },
                                    end: {
                                        line: 369,
                                        column: 41
                                    }
                                },
                                '201': {
                                    start: {
                                        line: 370,
                                        column: 8
                                    },
                                    end: {
                                        line: 370,
                                        column: 45
                                    }
                                },
                                '202': {
                                    start: {
                                        line: 371,
                                        column: 8
                                    },
                                    end: {
                                        line: 371,
                                        column: 33
                                    }
                                },
                                '203': {
                                    start: {
                                        line: 373,
                                        column: 6
                                    },
                                    end: {
                                        line: 373,
                                        column: 12
                                    }
                                },
                                '204': {
                                    start: {
                                        line: 375,
                                        column: 6
                                    },
                                    end: {
                                        line: 395,
                                        column: 7
                                    }
                                },
                                '205': {
                                    start: {
                                        line: 376,
                                        column: 8
                                    },
                                    end: {
                                        line: 376,
                                        column: 30
                                    }
                                },
                                '206': {
                                    start: {
                                        line: 379,
                                        column: 8
                                    },
                                    end: {
                                        line: 394,
                                        column: 9
                                    }
                                },
                                '207': {
                                    start: {
                                        line: 381,
                                        column: 10
                                    },
                                    end: {
                                        line: 381,
                                        column: 69
                                    }
                                },
                                '208': {
                                    start: {
                                        line: 382,
                                        column: 10
                                    },
                                    end: {
                                        line: 386,
                                        column: 120
                                    }
                                },
                                '209': {
                                    start: {
                                        line: 387,
                                        column: 10
                                    },
                                    end: {
                                        line: 387,
                                        column: 41
                                    }
                                },
                                '210': {
                                    start: {
                                        line: 388,
                                        column: 10
                                    },
                                    end: {
                                        line: 388,
                                        column: 30
                                    }
                                },
                                '211': {
                                    start: {
                                        line: 389,
                                        column: 10
                                    },
                                    end: {
                                        line: 389,
                                        column: 32
                                    }
                                },
                                '212': {
                                    start: {
                                        line: 390,
                                        column: 10
                                    },
                                    end: {
                                        line: 390,
                                        column: 28
                                    }
                                },
                                '213': {
                                    start: {
                                        line: 391,
                                        column: 10
                                    },
                                    end: {
                                        line: 391,
                                        column: 30
                                    }
                                },
                                '214': {
                                    start: {
                                        line: 392,
                                        column: 10
                                    },
                                    end: {
                                        line: 392,
                                        column: 39
                                    }
                                },
                                '215': {
                                    start: {
                                        line: 393,
                                        column: 10
                                    },
                                    end: {
                                        line: 393,
                                        column: 35
                                    }
                                },
                                '216': {
                                    start: {
                                        line: 396,
                                        column: 6
                                    },
                                    end: {
                                        line: 396,
                                        column: 12
                                    }
                                },
                                '217': {
                                    start: {
                                        line: 398,
                                        column: 6
                                    },
                                    end: {
                                        line: 419,
                                        column: 7
                                    }
                                },
                                '218': {
                                    start: {
                                        line: 399,
                                        column: 8
                                    },
                                    end: {
                                        line: 399,
                                        column: 67
                                    }
                                },
                                '219': {
                                    start: {
                                        line: 400,
                                        column: 8
                                    },
                                    end: {
                                        line: 401,
                                        column: 40
                                    }
                                },
                                '220': {
                                    start: {
                                        line: 402,
                                        column: 8
                                    },
                                    end: {
                                        line: 402,
                                        column: 37
                                    }
                                },
                                '221': {
                                    start: {
                                        line: 404,
                                        column: 11
                                    },
                                    end: {
                                        line: 419,
                                        column: 7
                                    }
                                },
                                '222': {
                                    start: {
                                        line: 405,
                                        column: 8
                                    },
                                    end: {
                                        line: 405,
                                        column: 67
                                    }
                                },
                                '223': {
                                    start: {
                                        line: 406,
                                        column: 8
                                    },
                                    end: {
                                        line: 406,
                                        column: 114
                                    }
                                },
                                '224': {
                                    start: {
                                        line: 407,
                                        column: 8
                                    },
                                    end: {
                                        line: 407,
                                        column: 32
                                    }
                                },
                                '225': {
                                    start: {
                                        line: 408,
                                        column: 8
                                    },
                                    end: {
                                        line: 408,
                                        column: 36
                                    }
                                },
                                '226': {
                                    start: {
                                        line: 409,
                                        column: 8
                                    },
                                    end: {
                                        line: 409,
                                        column: 48
                                    }
                                },
                                '227': {
                                    start: {
                                        line: 410,
                                        column: 8
                                    },
                                    end: {
                                        line: 415,
                                        column: 9
                                    }
                                },
                                '228': {
                                    start: {
                                        line: 411,
                                        column: 10
                                    },
                                    end: {
                                        line: 411,
                                        column: 44
                                    }
                                },
                                '229': {
                                    start: {
                                        line: 412,
                                        column: 10
                                    },
                                    end: {
                                        line: 412,
                                        column: 40
                                    }
                                },
                                '230': {
                                    start: {
                                        line: 413,
                                        column: 10
                                    },
                                    end: {
                                        line: 413,
                                        column: 40
                                    }
                                },
                                '231': {
                                    start: {
                                        line: 414,
                                        column: 10
                                    },
                                    end: {
                                        line: 414,
                                        column: 44
                                    }
                                },
                                '232': {
                                    start: {
                                        line: 416,
                                        column: 8
                                    },
                                    end: {
                                        line: 416,
                                        column: 26
                                    }
                                },
                                '233': {
                                    start: {
                                        line: 417,
                                        column: 8
                                    },
                                    end: {
                                        line: 417,
                                        column: 29
                                    }
                                },
                                '234': {
                                    start: {
                                        line: 418,
                                        column: 8
                                    },
                                    end: {
                                        line: 418,
                                        column: 30
                                    }
                                },
                                '235': {
                                    start: {
                                        line: 420,
                                        column: 6
                                    },
                                    end: {
                                        line: 420,
                                        column: 12
                                    }
                                },
                                '236': {
                                    start: {
                                        line: 422,
                                        column: 6
                                    },
                                    end: {
                                        line: 485,
                                        column: 7
                                    }
                                },
                                '237': {
                                    start: {
                                        line: 429,
                                        column: 8
                                    },
                                    end: {
                                        line: 429,
                                        column: 67
                                    }
                                },
                                '238': {
                                    start: {
                                        line: 430,
                                        column: 8
                                    },
                                    end: {
                                        line: 431,
                                        column: 40
                                    }
                                },
                                '239': {
                                    start: {
                                        line: 432,
                                        column: 8
                                    },
                                    end: {
                                        line: 432,
                                        column: 43
                                    }
                                },
                                '240': {
                                    start: {
                                        line: 434,
                                        column: 11
                                    },
                                    end: {
                                        line: 485,
                                        column: 7
                                    }
                                },
                                '241': {
                                    start: {
                                        line: 437,
                                        column: 8
                                    },
                                    end: {
                                        line: 437,
                                        column: 67
                                    }
                                },
                                '242': {
                                    start: {
                                        line: 438,
                                        column: 8
                                    },
                                    end: {
                                        line: 439,
                                        column: 42
                                    }
                                },
                                '243': {
                                    start: {
                                        line: 440,
                                        column: 8
                                    },
                                    end: {
                                        line: 440,
                                        column: 30
                                    }
                                },
                                '244': {
                                    start: {
                                        line: 442,
                                        column: 11
                                    },
                                    end: {
                                        line: 485,
                                        column: 7
                                    }
                                },
                                '245': {
                                    start: {
                                        line: 443,
                                        column: 8
                                    },
                                    end: {
                                        line: 460,
                                        column: 9
                                    }
                                },
                                '246': {
                                    start: {
                                        line: 444,
                                        column: 10
                                    },
                                    end: {
                                        line: 444,
                                        column: 32
                                    }
                                },
                                '247': {
                                    start: {
                                        line: 447,
                                        column: 10
                                    },
                                    end: {
                                        line: 447,
                                        column: 69
                                    }
                                },
                                '248': {
                                    start: {
                                        line: 448,
                                        column: 10
                                    },
                                    end: {
                                        line: 449,
                                        column: 44
                                    }
                                },
                                '249': {
                                    start: {
                                        line: 450,
                                        column: 10
                                    },
                                    end: {
                                        line: 450,
                                        column: 97
                                    }
                                },
                                '250': {
                                    start: {
                                        line: 451,
                                        column: 10
                                    },
                                    end: {
                                        line: 453,
                                        column: 11
                                    }
                                },
                                '251': {
                                    start: {
                                        line: 452,
                                        column: 12
                                    },
                                    end: {
                                        line: 452,
                                        column: 39
                                    }
                                },
                                '252': {
                                    start: {
                                        line: 454,
                                        column: 10
                                    },
                                    end: {
                                        line: 454,
                                        column: 32
                                    }
                                },
                                '253': {
                                    start: {
                                        line: 455,
                                        column: 10
                                    },
                                    end: {
                                        line: 459,
                                        column: 11
                                    }
                                },
                                '254': {
                                    start: {
                                        line: 456,
                                        column: 12
                                    },
                                    end: {
                                        line: 456,
                                        column: 38
                                    }
                                },
                                '255': {
                                    start: {
                                        line: 457,
                                        column: 12
                                    },
                                    end: {
                                        line: 457,
                                        column: 43
                                    }
                                },
                                '256': {
                                    start: {
                                        line: 458,
                                        column: 12
                                    },
                                    end: {
                                        line: 458,
                                        column: 40
                                    }
                                },
                                '257': {
                                    start: {
                                        line: 462,
                                        column: 11
                                    },
                                    end: {
                                        line: 485,
                                        column: 7
                                    }
                                },
                                '258': {
                                    start: {
                                        line: 463,
                                        column: 8
                                    },
                                    end: {
                                        line: 463,
                                        column: 67
                                    }
                                },
                                '259': {
                                    start: {
                                        line: 464,
                                        column: 8
                                    },
                                    end: {
                                        line: 466,
                                        column: 29
                                    }
                                },
                                '260': {
                                    start: {
                                        line: 467,
                                        column: 8
                                    },
                                    end: {
                                        line: 467,
                                        column: 32
                                    }
                                },
                                '261': {
                                    start: {
                                        line: 468,
                                        column: 8
                                    },
                                    end: {
                                        line: 468,
                                        column: 41
                                    }
                                },
                                '262': {
                                    start: {
                                        line: 469,
                                        column: 8
                                    },
                                    end: {
                                        line: 469,
                                        column: 43
                                    }
                                },
                                '263': {
                                    start: {
                                        line: 470,
                                        column: 8
                                    },
                                    end: {
                                        line: 476,
                                        column: 9
                                    }
                                },
                                '264': {
                                    start: {
                                        line: 471,
                                        column: 10
                                    },
                                    end: {
                                        line: 471,
                                        column: 42
                                    }
                                },
                                '265': {
                                    start: {
                                        line: 474,
                                        column: 10
                                    },
                                    end: {
                                        line: 474,
                                        column: 53
                                    }
                                },
                                '266': {
                                    start: {
                                        line: 475,
                                        column: 10
                                    },
                                    end: {
                                        line: 475,
                                        column: 31
                                    }
                                },
                                '267': {
                                    start: {
                                        line: 477,
                                        column: 8
                                    },
                                    end: {
                                        line: 477,
                                        column: 77
                                    }
                                },
                                '268': {
                                    start: {
                                        line: 478,
                                        column: 8
                                    },
                                    end: {
                                        line: 478,
                                        column: 42
                                    }
                                },
                                '269': {
                                    start: {
                                        line: 479,
                                        column: 8
                                    },
                                    end: {
                                        line: 479,
                                        column: 38
                                    }
                                },
                                '270': {
                                    start: {
                                        line: 480,
                                        column: 8
                                    },
                                    end: {
                                        line: 480,
                                        column: 38
                                    }
                                },
                                '271': {
                                    start: {
                                        line: 481,
                                        column: 8
                                    },
                                    end: {
                                        line: 481,
                                        column: 42
                                    }
                                },
                                '272': {
                                    start: {
                                        line: 482,
                                        column: 8
                                    },
                                    end: {
                                        line: 482,
                                        column: 26
                                    }
                                },
                                '273': {
                                    start: {
                                        line: 483,
                                        column: 8
                                    },
                                    end: {
                                        line: 483,
                                        column: 29
                                    }
                                },
                                '274': {
                                    start: {
                                        line: 484,
                                        column: 8
                                    },
                                    end: {
                                        line: 484,
                                        column: 30
                                    }
                                },
                                '275': {
                                    start: {
                                        line: 486,
                                        column: 6
                                    },
                                    end: {
                                        line: 486,
                                        column: 12
                                    }
                                },
                                '276': {
                                    start: {
                                        line: 489,
                                        column: 6
                                    },
                                    end: {
                                        line: 489,
                                        column: 31
                                    }
                                },
                                '277': {
                                    start: {
                                        line: 490,
                                        column: 6
                                    },
                                    end: {
                                        line: 490,
                                        column: 39
                                    }
                                },
                                '278': {
                                    start: {
                                        line: 491,
                                        column: 6
                                    },
                                    end: {
                                        line: 491,
                                        column: 12
                                    }
                                },
                                '279': {
                                    start: {
                                        line: 494,
                                        column: 6
                                    },
                                    end: {
                                        line: 494,
                                        column: 23
                                    }
                                },
                                '280': {
                                    start: {
                                        line: 495,
                                        column: 6
                                    },
                                    end: {
                                        line: 495,
                                        column: 21
                                    }
                                },
                                '281': {
                                    start: {
                                        line: 496,
                                        column: 6
                                    },
                                    end: {
                                        line: 496,
                                        column: 21
                                    }
                                },
                                '282': {
                                    start: {
                                        line: 497,
                                        column: 6
                                    },
                                    end: {
                                        line: 497,
                                        column: 23
                                    }
                                },
                                '283': {
                                    start: {
                                        line: 498,
                                        column: 6
                                    },
                                    end: {
                                        line: 498,
                                        column: 12
                                    }
                                },
                                '284': {
                                    start: {
                                        line: 500,
                                        column: 6
                                    },
                                    end: {
                                        line: 500,
                                        column: 12
                                    }
                                },
                                '285': {
                                    start: {
                                        line: 502,
                                        column: 4
                                    },
                                    end: {
                                        line: 521,
                                        column: 5
                                    }
                                },
                                '286': {
                                    start: {
                                        line: 503,
                                        column: 6
                                    },
                                    end: {
                                        line: 503,
                                        column: 26
                                    }
                                },
                                '287': {
                                    start: {
                                        line: 504,
                                        column: 6
                                    },
                                    end: {
                                        line: 520,
                                        column: 7
                                    }
                                },
                                '288': {
                                    start: {
                                        line: 505,
                                        column: 8
                                    },
                                    end: {
                                        line: 505,
                                        column: 38
                                    }
                                },
                                '289': {
                                    start: {
                                        line: 506,
                                        column: 8
                                    },
                                    end: {
                                        line: 518,
                                        column: 9
                                    }
                                },
                                '290': {
                                    start: {
                                        line: 507,
                                        column: 10
                                    },
                                    end: {
                                        line: 514,
                                        column: 11
                                    }
                                },
                                '291': {
                                    start: {
                                        line: 508,
                                        column: 12
                                    },
                                    end: {
                                        line: 508,
                                        column: 28
                                    }
                                },
                                '292': {
                                    start: {
                                        line: 509,
                                        column: 12
                                    },
                                    end: {
                                        line: 513,
                                        column: 13
                                    }
                                },
                                '293': {
                                    start: {
                                        line: 510,
                                        column: 14
                                    },
                                    end: {
                                        line: 510,
                                        column: 42
                                    }
                                },
                                '294': {
                                    start: {
                                        line: 511,
                                        column: 14
                                    },
                                    end: {
                                        line: 511,
                                        column: 138
                                    }
                                },
                                '295': {
                                    start: {
                                        line: 512,
                                        column: 14
                                    },
                                    end: {
                                        line: 512,
                                        column: 28
                                    }
                                },
                                '296': {
                                    start: {
                                        line: 516,
                                        column: 13
                                    },
                                    end: {
                                        line: 518,
                                        column: 9
                                    }
                                },
                                '297': {
                                    start: {
                                        line: 517,
                                        column: 10
                                    },
                                    end: {
                                        line: 517,
                                        column: 143
                                    }
                                },
                                '298': {
                                    start: {
                                        line: 519,
                                        column: 8
                                    },
                                    end: {
                                        line: 519,
                                        column: 22
                                    }
                                },
                                '299': {
                                    start: {
                                        line: 525,
                                        column: 15
                                    },
                                    end: {
                                        line: 525,
                                        column: 35
                                    }
                                },
                                '300': {
                                    start: {
                                        line: 526,
                                        column: 4
                                    },
                                    end: {
                                        line: 526,
                                        column: 24
                                    }
                                },
                                '301': {
                                    start: {
                                        line: 527,
                                        column: 17
                                    },
                                    end: {
                                        line: 527,
                                        column: 35
                                    }
                                },
                                '302': {
                                    start: {
                                        line: 528,
                                        column: 4
                                    },
                                    end: {
                                        line: 528,
                                        column: 96
                                    }
                                },
                                '303': {
                                    start: {
                                        line: 529,
                                        column: 4
                                    },
                                    end: {
                                        line: 554,
                                        column: 5
                                    }
                                },
                                '304': {
                                    start: {
                                        line: 532,
                                        column: 6
                                    },
                                    end: {
                                        line: 545,
                                        column: 7
                                    }
                                },
                                '305': {
                                    start: {
                                        line: 535,
                                        column: 8
                                    },
                                    end: {
                                        line: 540,
                                        column: 9
                                    }
                                },
                                '306': {
                                    start: {
                                        line: 536,
                                        column: 10
                                    },
                                    end: {
                                        line: 536,
                                        column: 94
                                    }
                                },
                                '307': {
                                    start: {
                                        line: 537,
                                        column: 10
                                    },
                                    end: {
                                        line: 537,
                                        column: 102
                                    }
                                },
                                '308': {
                                    start: {
                                        line: 538,
                                        column: 10
                                    },
                                    end: {
                                        line: 538,
                                        column: 67
                                    }
                                },
                                '309': {
                                    start: {
                                        line: 539,
                                        column: 10
                                    },
                                    end: {
                                        line: 539,
                                        column: 140
                                    }
                                },
                                '310': {
                                    start: {
                                        line: 541,
                                        column: 8
                                    },
                                    end: {
                                        line: 541,
                                        column: 65
                                    }
                                },
                                '311': {
                                    start: {
                                        line: 543,
                                        column: 11
                                    },
                                    end: {
                                        line: 545,
                                        column: 7
                                    }
                                },
                                '312': {
                                    start: {
                                        line: 544,
                                        column: 8
                                    },
                                    end: {
                                        line: 544,
                                        column: 103
                                    }
                                },
                                '313': {
                                    start: {
                                        line: 548,
                                        column: 6
                                    },
                                    end: {
                                        line: 548,
                                        column: 63
                                    }
                                },
                                '314': {
                                    start: {
                                        line: 549,
                                        column: 6
                                    },
                                    end: {
                                        line: 553,
                                        column: 7
                                    }
                                },
                                '315': {
                                    start: {
                                        line: 551,
                                        column: 8
                                    },
                                    end: {
                                        line: 551,
                                        column: 98
                                    }
                                },
                                '316': {
                                    start: {
                                        line: 552,
                                        column: 8
                                    },
                                    end: {
                                        line: 552,
                                        column: 137
                                    }
                                },
                                '317': {
                                    start: {
                                        line: 555,
                                        column: 4
                                    },
                                    end: {
                                        line: 555,
                                        column: 18
                                    }
                                },
                                '318': {
                                    start: {
                                        line: 559,
                                        column: 4
                                    },
                                    end: {
                                        line: 728,
                                        column: 5
                                    }
                                },
                                '319': {
                                    start: {
                                        line: 560,
                                        column: 19
                                    },
                                    end: {
                                        line: 560,
                                        column: 38
                                    }
                                },
                                '320': {
                                    start: {
                                        line: 561,
                                        column: 6
                                    },
                                    end: {
                                        line: 594,
                                        column: 7
                                    }
                                },
                                '321': {
                                    start: {
                                        line: 562,
                                        column: 8
                                    },
                                    end: {
                                        line: 583,
                                        column: 11
                                    }
                                },
                                '322': {
                                    start: {
                                        line: 563,
                                        column: 19
                                    },
                                    end: {
                                        line: 563,
                                        column: 34
                                    }
                                },
                                '323': {
                                    start: {
                                        line: 564,
                                        column: 21
                                    },
                                    end: {
                                        line: 564,
                                        column: 32
                                    }
                                },
                                '324': {
                                    start: {
                                        line: 565,
                                        column: 10
                                    },
                                    end: {
                                        line: 567,
                                        column: 11
                                    }
                                },
                                '325': {
                                    start: {
                                        line: 566,
                                        column: 12
                                    },
                                    end: {
                                        line: 566,
                                        column: 27
                                    }
                                },
                                '326': {
                                    start: {
                                        line: 568,
                                        column: 10
                                    },
                                    end: {
                                        line: 568,
                                        column: 54
                                    }
                                },
                                '327': {
                                    start: {
                                        line: 569,
                                        column: 10
                                    },
                                    end: {
                                        line: 569,
                                        column: 39
                                    }
                                },
                                '328': {
                                    start: {
                                        line: 570,
                                        column: 10
                                    },
                                    end: {
                                        line: 580,
                                        column: 12
                                    }
                                },
                                '329': {
                                    start: {
                                        line: 571,
                                        column: 12
                                    },
                                    end: {
                                        line: 571,
                                        column: 36
                                    }
                                },
                                '330': {
                                    start: {
                                        line: 572,
                                        column: 12
                                    },
                                    end: {
                                        line: 572,
                                        column: 41
                                    }
                                },
                                '331': {
                                    start: {
                                        line: 573,
                                        column: 12
                                    },
                                    end: {
                                        line: 579,
                                        column: 13
                                    }
                                },
                                '332': {
                                    start: {
                                        line: 575,
                                        column: 14
                                    },
                                    end: {
                                        line: 575,
                                        column: 35
                                    }
                                },
                                '333': {
                                    start: {
                                        line: 578,
                                        column: 14
                                    },
                                    end: {
                                        line: 578,
                                        column: 33
                                    }
                                },
                                '334': {
                                    start: {
                                        line: 581,
                                        column: 24
                                    },
                                    end: {
                                        line: 581,
                                        column: 173
                                    }
                                },
                                '335': {
                                    start: {
                                        line: 582,
                                        column: 10
                                    },
                                    end: {
                                        line: 582,
                                        column: 68
                                    }
                                },
                                '336': {
                                    start: {
                                        line: 586,
                                        column: 8
                                    },
                                    end: {
                                        line: 593,
                                        column: 11
                                    }
                                },
                                '337': {
                                    start: {
                                        line: 587,
                                        column: 10
                                    },
                                    end: {
                                        line: 592,
                                        column: 11
                                    }
                                },
                                '338': {
                                    start: {
                                        line: 588,
                                        column: 12
                                    },
                                    end: {
                                        line: 588,
                                        column: 167
                                    }
                                },
                                '339': {
                                    start: {
                                        line: 591,
                                        column: 12
                                    },
                                    end: {
                                        line: 591,
                                        column: 22
                                    }
                                },
                                '340': {
                                    start: {
                                        line: 597,
                                        column: 22
                                    },
                                    end: {
                                        line: 597,
                                        column: 24
                                    }
                                },
                                '341': {
                                    start: {
                                        line: 598,
                                        column: 21
                                    },
                                    end: {
                                        line: 598,
                                        column: 26
                                    }
                                },
                                '342': {
                                    start: {
                                        line: 599,
                                        column: 19
                                    },
                                    end: {
                                        line: 599,
                                        column: 24
                                    }
                                },
                                '343': {
                                    start: {
                                        line: 600,
                                        column: 33
                                    },
                                    end: {
                                        line: 600,
                                        column: 38
                                    }
                                },
                                '344': {
                                    start: {
                                        line: 601,
                                        column: 16
                                    },
                                    end: {
                                        line: 601,
                                        column: 18
                                    }
                                },
                                '345': {
                                    start: {
                                        line: 602,
                                        column: 25
                                    },
                                    end: {
                                        line: 602,
                                        column: 27
                                    }
                                },
                                '346': {
                                    start: {
                                        line: 603,
                                        column: 6
                                    },
                                    end: {
                                        line: 605,
                                        column: 7
                                    }
                                },
                                '347': {
                                    start: {
                                        line: 604,
                                        column: 8
                                    },
                                    end: {
                                        line: 604,
                                        column: 27
                                    }
                                },
                                '348': {
                                    start: {
                                        line: 606,
                                        column: 19
                                    },
                                    end: {
                                        line: 723,
                                        column: 8
                                    }
                                },
                                '349': {
                                    start: {
                                        line: 608,
                                        column: 10
                                    },
                                    end: {
                                        line: 608,
                                        column: 40
                                    }
                                },
                                '350': {
                                    start: {
                                        line: 611,
                                        column: 22
                                    },
                                    end: {
                                        line: 611,
                                        column: 24
                                    }
                                },
                                '351': {
                                    start: {
                                        line: 612,
                                        column: 27
                                    },
                                    end: {
                                        line: 612,
                                        column: 68
                                    }
                                },
                                '352': {
                                    start: {
                                        line: 613,
                                        column: 10
                                    },
                                    end: {
                                        line: 648,
                                        column: 11
                                    }
                                },
                                '353': {
                                    start: {
                                        line: 614,
                                        column: 12
                                    },
                                    end: {
                                        line: 643,
                                        column: 13
                                    }
                                },
                                '354': {
                                    start: {
                                        line: 615,
                                        column: 32
                                    },
                                    end: {
                                        line: 615,
                                        column: 42
                                    }
                                },
                                '355': {
                                    start: {
                                        line: 616,
                                        column: 14
                                    },
                                    end: {
                                        line: 620,
                                        column: 15
                                    }
                                },
                                '356': {
                                    start: {
                                        line: 617,
                                        column: 37
                                    },
                                    end: {
                                        line: 617,
                                        column: 53
                                    }
                                },
                                '357': {
                                    start: {
                                        line: 618,
                                        column: 16
                                    },
                                    end: {
                                        line: 618,
                                        column: 78
                                    }
                                },
                                '358': {
                                    start: {
                                        line: 619,
                                        column: 16
                                    },
                                    end: {
                                        line: 619,
                                        column: 66
                                    }
                                },
                                '359': {
                                    start: {
                                        line: 621,
                                        column: 14
                                    },
                                    end: {
                                        line: 627,
                                        column: 15
                                    }
                                },
                                '360': {
                                    start: {
                                        line: 622,
                                        column: 16
                                    },
                                    end: {
                                        line: 626,
                                        column: 126
                                    }
                                },
                                '361': {
                                    start: {
                                        line: 629,
                                        column: 17
                                    },
                                    end: {
                                        line: 643,
                                        column: 13
                                    }
                                },
                                '362': {
                                    start: {
                                        line: 630,
                                        column: 32
                                    },
                                    end: {
                                        line: 630,
                                        column: 42
                                    }
                                },
                                '363': {
                                    start: {
                                        line: 631,
                                        column: 14
                                    },
                                    end: {
                                        line: 635,
                                        column: 15
                                    }
                                },
                                '364': {
                                    start: {
                                        line: 632,
                                        column: 37
                                    },
                                    end: {
                                        line: 632,
                                        column: 64
                                    }
                                },
                                '365': {
                                    start: {
                                        line: 633,
                                        column: 16
                                    },
                                    end: {
                                        line: 633,
                                        column: 94
                                    }
                                },
                                '366': {
                                    start: {
                                        line: 634,
                                        column: 16
                                    },
                                    end: {
                                        line: 634,
                                        column: 66
                                    }
                                },
                                '367': {
                                    start: {
                                        line: 636,
                                        column: 14
                                    },
                                    end: {
                                        line: 642,
                                        column: 15
                                    }
                                },
                                '368': {
                                    start: {
                                        line: 637,
                                        column: 16
                                    },
                                    end: {
                                        line: 641,
                                        column: 126
                                    }
                                },
                                '369': {
                                    start: {
                                        line: 644,
                                        column: 12
                                    },
                                    end: {
                                        line: 647,
                                        column: 54
                                    }
                                },
                                '370': {
                                    start: {
                                        line: 649,
                                        column: 10
                                    },
                                    end: {
                                        line: 649,
                                        column: 48
                                    }
                                },
                                '371': {
                                    start: {
                                        line: 650,
                                        column: 10
                                    },
                                    end: {
                                        line: 684,
                                        column: 11
                                    }
                                },
                                '372': {
                                    start: {
                                        line: 651,
                                        column: 12
                                    },
                                    end: {
                                        line: 651,
                                        column: 28
                                    }
                                },
                                '373': {
                                    start: {
                                        line: 652,
                                        column: 12
                                    },
                                    end: {
                                        line: 652,
                                        column: 32
                                    }
                                },
                                '374': {
                                    start: {
                                        line: 653,
                                        column: 12
                                    },
                                    end: {
                                        line: 653,
                                        column: 33
                                    }
                                },
                                '375': {
                                    start: {
                                        line: 654,
                                        column: 12
                                    },
                                    end: {
                                        line: 654,
                                        column: 30
                                    }
                                },
                                '376': {
                                    start: {
                                        line: 655,
                                        column: 12
                                    },
                                    end: {
                                        line: 655,
                                        column: 67
                                    }
                                },
                                '377': {
                                    start: {
                                        line: 656,
                                        column: 12
                                    },
                                    end: {
                                        line: 680,
                                        column: 13
                                    }
                                },
                                '378': {
                                    start: {
                                        line: 657,
                                        column: 27
                                    },
                                    end: {
                                        line: 657,
                                        column: 56
                                    }
                                },
                                '379': {
                                    start: {
                                        line: 658,
                                        column: 14
                                    },
                                    end: {
                                        line: 660,
                                        column: 15
                                    }
                                },
                                '380': {
                                    start: {
                                        line: 659,
                                        column: 16
                                    },
                                    end: {
                                        line: 659,
                                        column: 80
                                    }
                                },
                                '381': {
                                    start: {
                                        line: 661,
                                        column: 14
                                    },
                                    end: {
                                        line: 663,
                                        column: 15
                                    }
                                },
                                '382': {
                                    start: {
                                        line: 662,
                                        column: 16
                                    },
                                    end: {
                                        line: 662,
                                        column: 101
                                    }
                                },
                                '383': {
                                    start: {
                                        line: 664,
                                        column: 14
                                    },
                                    end: {
                                        line: 666,
                                        column: 15
                                    }
                                },
                                '384': {
                                    start: {
                                        line: 665,
                                        column: 16
                                    },
                                    end: {
                                        line: 665,
                                        column: 94
                                    }
                                },
                                '385': {
                                    start: {
                                        line: 667,
                                        column: 14
                                    },
                                    end: {
                                        line: 669,
                                        column: 15
                                    }
                                },
                                '386': {
                                    start: {
                                        line: 668,
                                        column: 16
                                    },
                                    end: {
                                        line: 668,
                                        column: 85
                                    }
                                },
                                '387': {
                                    start: {
                                        line: 670,
                                        column: 14
                                    },
                                    end: {
                                        line: 672,
                                        column: 15
                                    }
                                },
                                '388': {
                                    start: {
                                        line: 671,
                                        column: 16
                                    },
                                    end: {
                                        line: 671,
                                        column: 74
                                    }
                                },
                                '389': {
                                    start: {
                                        line: 673,
                                        column: 14
                                    },
                                    end: {
                                        line: 679,
                                        column: 15
                                    }
                                },
                                '390': {
                                    start: {
                                        line: 674,
                                        column: 42
                                    },
                                    end: {
                                        line: 674,
                                        column: 101
                                    }
                                },
                                '391': {
                                    start: {
                                        line: 675,
                                        column: 16
                                    },
                                    end: {
                                        line: 675,
                                        column: 120
                                    }
                                },
                                '392': {
                                    start: {
                                        line: 676,
                                        column: 16
                                    },
                                    end: {
                                        line: 678,
                                        column: 19
                                    }
                                },
                                '393': {
                                    start: {
                                        line: 677,
                                        column: 18
                                    },
                                    end: {
                                        line: 677,
                                        column: 81
                                    }
                                },
                                '394': {
                                    start: {
                                        line: 681,
                                        column: 12
                                    },
                                    end: {
                                        line: 683,
                                        column: 13
                                    }
                                },
                                '395': {
                                    start: {
                                        line: 682,
                                        column: 14
                                    },
                                    end: {
                                        line: 682,
                                        column: 62
                                    }
                                },
                                '396': {
                                    start: {
                                        line: 687,
                                        column: 10
                                    },
                                    end: {
                                        line: 692,
                                        column: 11
                                    }
                                },
                                '397': {
                                    start: {
                                        line: 688,
                                        column: 12
                                    },
                                    end: {
                                        line: 688,
                                        column: 33
                                    }
                                },
                                '398': {
                                    start: {
                                        line: 691,
                                        column: 12
                                    },
                                    end: {
                                        line: 691,
                                        column: 30
                                    }
                                },
                                '399': {
                                    start: {
                                        line: 695,
                                        column: 10
                                    },
                                    end: {
                                        line: 714,
                                        column: 11
                                    }
                                },
                                '400': {
                                    start: {
                                        line: 696,
                                        column: 12
                                    },
                                    end: {
                                        line: 698,
                                        column: 13
                                    }
                                },
                                '401': {
                                    start: {
                                        line: 697,
                                        column: 14
                                    },
                                    end: {
                                        line: 697,
                                        column: 57
                                    }
                                },
                                '402': {
                                    start: {
                                        line: 699,
                                        column: 12
                                    },
                                    end: {
                                        line: 709,
                                        column: 13
                                    }
                                },
                                '403': {
                                    start: {
                                        line: 700,
                                        column: 14
                                    },
                                    end: {
                                        line: 704,
                                        column: 15
                                    }
                                },
                                '404': {
                                    start: {
                                        line: 701,
                                        column: 37
                                    },
                                    end: {
                                        line: 701,
                                        column: 49
                                    }
                                },
                                '405': {
                                    start: {
                                        line: 702,
                                        column: 16
                                    },
                                    end: {
                                        line: 702,
                                        column: 74
                                    }
                                },
                                '406': {
                                    start: {
                                        line: 703,
                                        column: 16
                                    },
                                    end: {
                                        line: 703,
                                        column: 57
                                    }
                                },
                                '407': {
                                    start: {
                                        line: 705,
                                        column: 14
                                    },
                                    end: {
                                        line: 708,
                                        column: 15
                                    }
                                },
                                '408': {
                                    start: {
                                        line: 706,
                                        column: 16
                                    },
                                    end: {
                                        line: 707,
                                        column: 155
                                    }
                                },
                                '409': {
                                    start: {
                                        line: 710,
                                        column: 12
                                    },
                                    end: {
                                        line: 710,
                                        column: 38
                                    }
                                },
                                '410': {
                                    start: {
                                        line: 711,
                                        column: 12
                                    },
                                    end: {
                                        line: 711,
                                        column: 29
                                    }
                                },
                                '411': {
                                    start: {
                                        line: 712,
                                        column: 12
                                    },
                                    end: {
                                        line: 712,
                                        column: 27
                                    }
                                },
                                '412': {
                                    start: {
                                        line: 713,
                                        column: 12
                                    },
                                    end: {
                                        line: 713,
                                        column: 21
                                    }
                                },
                                '413': {
                                    start: {
                                        line: 715,
                                        column: 10
                                    },
                                    end: {
                                        line: 715,
                                        column: 41
                                    }
                                },
                                '414': {
                                    start: {
                                        line: 718,
                                        column: 10
                                    },
                                    end: {
                                        line: 718,
                                        column: 45
                                    }
                                },
                                '415': {
                                    start: {
                                        line: 721,
                                        column: 10
                                    },
                                    end: {
                                        line: 721,
                                        column: 22
                                    }
                                },
                                '416': {
                                    start: {
                                        line: 724,
                                        column: 6
                                    },
                                    end: {
                                        line: 724,
                                        column: 142
                                    }
                                },
                                '417': {
                                    start: {
                                        line: 725,
                                        column: 6
                                    },
                                    end: {
                                        line: 725,
                                        column: 19
                                    }
                                },
                                '418': {
                                    start: {
                                        line: 726,
                                        column: 6
                                    },
                                    end: {
                                        line: 726,
                                        column: 145
                                    }
                                },
                                '419': {
                                    start: {
                                        line: 727,
                                        column: 6
                                    },
                                    end: {
                                        line: 727,
                                        column: 23
                                    }
                                },
                                '420': {
                                    start: {
                                        line: 731,
                                        column: 27
                                    },
                                    end: {
                                        line: 731,
                                        column: 82
                                    }
                                },
                                '421': {
                                    start: {
                                        line: 732,
                                        column: 34
                                    },
                                    end: {
                                        line: 732,
                                        column: 79
                                    }
                                },
                                '422': {
                                    start: {
                                        line: 733,
                                        column: 40
                                    },
                                    end: {
                                        line: 766,
                                        column: 3
                                    }
                                },
                                '423': {
                                    start: {
                                        line: 769,
                                        column: 4
                                    },
                                    end: {
                                        line: 837,
                                        column: 5
                                    }
                                },
                                '424': {
                                    start: {
                                        line: 770,
                                        column: 19
                                    },
                                    end: {
                                        line: 770,
                                        column: 38
                                    }
                                },
                                '425': {
                                    start: {
                                        line: 771,
                                        column: 6
                                    },
                                    end: {
                                        line: 802,
                                        column: 7
                                    }
                                },
                                '426': {
                                    start: {
                                        line: 772,
                                        column: 8
                                    },
                                    end: {
                                        line: 790,
                                        column: 11
                                    }
                                },
                                '427': {
                                    start: {
                                        line: 773,
                                        column: 19
                                    },
                                    end: {
                                        line: 773,
                                        column: 34
                                    }
                                },
                                '428': {
                                    start: {
                                        line: 774,
                                        column: 21
                                    },
                                    end: {
                                        line: 774,
                                        column: 32
                                    }
                                },
                                '429': {
                                    start: {
                                        line: 775,
                                        column: 10
                                    },
                                    end: {
                                        line: 775,
                                        column: 54
                                    }
                                },
                                '430': {
                                    start: {
                                        line: 776,
                                        column: 10
                                    },
                                    end: {
                                        line: 776,
                                        column: 39
                                    }
                                },
                                '431': {
                                    start: {
                                        line: 777,
                                        column: 10
                                    },
                                    end: {
                                        line: 786,
                                        column: 12
                                    }
                                },
                                '432': {
                                    start: {
                                        line: 778,
                                        column: 12
                                    },
                                    end: {
                                        line: 778,
                                        column: 36
                                    }
                                },
                                '433': {
                                    start: {
                                        line: 779,
                                        column: 12
                                    },
                                    end: {
                                        line: 779,
                                        column: 41
                                    }
                                },
                                '434': {
                                    start: {
                                        line: 780,
                                        column: 12
                                    },
                                    end: {
                                        line: 785,
                                        column: 13
                                    }
                                },
                                '435': {
                                    start: {
                                        line: 781,
                                        column: 14
                                    },
                                    end: {
                                        line: 781,
                                        column: 35
                                    }
                                },
                                '436': {
                                    start: {
                                        line: 784,
                                        column: 14
                                    },
                                    end: {
                                        line: 784,
                                        column: 33
                                    }
                                },
                                '437': {
                                    start: {
                                        line: 787,
                                        column: 24
                                    },
                                    end: {
                                        line: 787,
                                        column: 160
                                    }
                                },
                                '438': {
                                    start: {
                                        line: 788,
                                        column: 10
                                    },
                                    end: {
                                        line: 788,
                                        column: 68
                                    }
                                },
                                '439': {
                                    start: {
                                        line: 794,
                                        column: 8
                                    },
                                    end: {
                                        line: 801,
                                        column: 11
                                    }
                                },
                                '440': {
                                    start: {
                                        line: 795,
                                        column: 10
                                    },
                                    end: {
                                        line: 800,
                                        column: 11
                                    }
                                },
                                '441': {
                                    start: {
                                        line: 796,
                                        column: 12
                                    },
                                    end: {
                                        line: 796,
                                        column: 137
                                    }
                                },
                                '442': {
                                    start: {
                                        line: 799,
                                        column: 12
                                    },
                                    end: {
                                        line: 799,
                                        column: 22
                                    }
                                },
                                '443': {
                                    start: {
                                        line: 806,
                                        column: 6
                                    },
                                    end: {
                                        line: 818,
                                        column: 7
                                    }
                                },
                                '444': {
                                    start: {
                                        line: 807,
                                        column: 8
                                    },
                                    end: {
                                        line: 807,
                                        column: 106
                                    }
                                },
                                '445': {
                                    start: {
                                        line: 811,
                                        column: 8
                                    },
                                    end: {
                                        line: 817,
                                        column: 9
                                    }
                                },
                                '446': {
                                    start: {
                                        line: 813,
                                        column: 10
                                    },
                                    end: {
                                        line: 813,
                                        column: 102
                                    }
                                },
                                '447': {
                                    start: {
                                        line: 816,
                                        column: 10
                                    },
                                    end: {
                                        line: 816,
                                        column: 18
                                    }
                                },
                                '448': {
                                    start: {
                                        line: 819,
                                        column: 28
                                    },
                                    end: {
                                        line: 819,
                                        column: 124
                                    }
                                },
                                '449': {
                                    start: {
                                        line: 820,
                                        column: 6
                                    },
                                    end: {
                                        line: 820,
                                        column: 108
                                    }
                                },
                                '450': {
                                    start: {
                                        line: 821,
                                        column: 29
                                    },
                                    end: {
                                        line: 821,
                                        column: 73
                                    }
                                },
                                '451': {
                                    start: {
                                        line: 822,
                                        column: 6
                                    },
                                    end: {
                                        line: 822,
                                        column: 47
                                    }
                                },
                                '452': {
                                    start: {
                                        line: 823,
                                        column: 6
                                    },
                                    end: {
                                        line: 823,
                                        column: 142
                                    }
                                },
                                '453': {
                                    start: {
                                        line: 824,
                                        column: 6
                                    },
                                    end: {
                                        line: 836,
                                        column: 7
                                    }
                                },
                                '454': {
                                    start: {
                                        line: 825,
                                        column: 25
                                    },
                                    end: {
                                        line: 825,
                                        column: 62
                                    }
                                },
                                '455': {
                                    start: {
                                        line: 826,
                                        column: 8
                                    },
                                    end: {
                                        line: 826,
                                        column: 50
                                    }
                                },
                                '456': {
                                    start: {
                                        line: 827,
                                        column: 8
                                    },
                                    end: {
                                        line: 827,
                                        column: 61
                                    }
                                },
                                '457': {
                                    start: {
                                        line: 828,
                                        column: 8
                                    },
                                    end: {
                                        line: 828,
                                        column: 65
                                    }
                                },
                                '458': {
                                    start: {
                                        line: 829,
                                        column: 21
                                    },
                                    end: {
                                        line: 829,
                                        column: 87
                                    }
                                },
                                '459': {
                                    start: {
                                        line: 830,
                                        column: 8
                                    },
                                    end: {
                                        line: 830,
                                        column: 54
                                    }
                                },
                                '460': {
                                    start: {
                                        line: 831,
                                        column: 25
                                    },
                                    end: {
                                        line: 831,
                                        column: 76
                                    }
                                },
                                '461': {
                                    start: {
                                        line: 832,
                                        column: 8
                                    },
                                    end: {
                                        line: 832,
                                        column: 47
                                    }
                                },
                                '462': {
                                    start: {
                                        line: 835,
                                        column: 8
                                    },
                                    end: {
                                        line: 835,
                                        column: 106
                                    }
                                },
                                '463': {
                                    start: {
                                        line: 840,
                                        column: 2
                                    },
                                    end: {
                                        line: 858,
                                        column: 4
                                    }
                                }
                            },
                            fnMap: {
                                '0': {
                                    name: '(anonymous_0)',
                                    decl: {
                                        start: {
                                            line: 6,
                                            column: 17
                                        },
                                        end: {
                                            line: 6,
                                            column: 18
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 6,
                                            column: 78
                                        },
                                        end: {
                                            line: 859,
                                            column: 1
                                        }
                                    },
                                    line: 6
                                },
                                '1': {
                                    name: 'getHookNameForServiceWorker',
                                    decl: {
                                        start: {
                                            line: 16,
                                            column: 11
                                        },
                                        end: {
                                            line: 16,
                                            column: 38
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 16,
                                            column: 41
                                        },
                                        end: {
                                            line: 18,
                                            column: 3
                                        }
                                    },
                                    line: 16
                                },
                                '2': {
                                    name: 'getContextGeneratorName',
                                    decl: {
                                        start: {
                                            line: 22,
                                            column: 11
                                        },
                                        end: {
                                            line: 22,
                                            column: 34
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 22,
                                            column: 37
                                        },
                                        end: {
                                            line: 24,
                                            column: 3
                                        }
                                    },
                                    line: 22
                                },
                                '3': {
                                    name: 'getDiscardHookErrors',
                                    decl: {
                                        start: {
                                            line: 28,
                                            column: 11
                                        },
                                        end: {
                                            line: 28,
                                            column: 31
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 28,
                                            column: 34
                                        },
                                        end: {
                                            line: 30,
                                            column: 3
                                        }
                                    },
                                    line: 28
                                },
                                '4': {
                                    name: 'getHookProperty',
                                    decl: {
                                        start: {
                                            line: 34,
                                            column: 11
                                        },
                                        end: {
                                            line: 34,
                                            column: 26
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 34,
                                            column: 29
                                        },
                                        end: {
                                            line: 36,
                                            column: 3
                                        }
                                    },
                                    line: 34
                                },
                                '5': {
                                    name: 'setHookProperty',
                                    decl: {
                                        start: {
                                            line: 38,
                                            column: 11
                                        },
                                        end: {
                                            line: 38,
                                            column: 26
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 38,
                                            column: 42
                                        },
                                        end: {
                                            line: 40,
                                            column: 3
                                        }
                                    },
                                    line: 38
                                },
                                '6': {
                                    name: 'getCompact',
                                    decl: {
                                        start: {
                                            line: 44,
                                            column: 11
                                        },
                                        end: {
                                            line: 44,
                                            column: 21
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 44,
                                            column: 24
                                        },
                                        end: {
                                            line: 46,
                                            column: 3
                                        }
                                    },
                                    line: 44
                                },
                                '7': {
                                    name: 'setCompact',
                                    decl: {
                                        start: {
                                            line: 48,
                                            column: 11
                                        },
                                        end: {
                                            line: 48,
                                            column: 21
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 48,
                                            column: 32
                                        },
                                        end: {
                                            line: 50,
                                            column: 3
                                        }
                                    },
                                    line: 48
                                },
                                '8': {
                                    name: 'getHookId',
                                    decl: {
                                        start: {
                                            line: 55,
                                            column: 11
                                        },
                                        end: {
                                            line: 55,
                                            column: 20
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 55,
                                            column: 27
                                        },
                                        end: {
                                            line: 59,
                                            column: 3
                                        }
                                    },
                                    line: 55
                                },
                                '9': {
                                    name: 'getHookWorkers',
                                    decl: {
                                        start: {
                                            line: 61,
                                            column: 11
                                        },
                                        end: {
                                            line: 61,
                                            column: 25
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 61,
                                            column: 28
                                        },
                                        end: {
                                            line: 63,
                                            column: 3
                                        }
                                    },
                                    line: 61
                                },
                                '10': {
                                    name: 'setHookWorkers',
                                    decl: {
                                        start: {
                                            line: 65,
                                            column: 11
                                        },
                                        end: {
                                            line: 65,
                                            column: 25
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 65,
                                            column: 40
                                        },
                                        end: {
                                            line: 95,
                                            column: 3
                                        }
                                    },
                                    line: 65
                                },
                                '11': {
                                    name: '(anonymous_11)',
                                    decl: {
                                        start: {
                                            line: 68,
                                            column: 24
                                        },
                                        end: {
                                            line: 68,
                                            column: 25
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 68,
                                            column: 42
                                        },
                                        end: {
                                            line: 94,
                                            column: 5
                                        }
                                    },
                                    line: 68
                                },
                                '12': {
                                    name: '(anonymous_12)',
                                    decl: {
                                        start: {
                                            line: 70,
                                            column: 30
                                        },
                                        end: {
                                            line: 70,
                                            column: 31
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 70,
                                            column: 47
                                        },
                                        end: {
                                            line: 93,
                                            column: 7
                                        }
                                    },
                                    line: 70
                                },
                                '13': {
                                    name: 'setupHookWorkers',
                                    decl: {
                                        start: {
                                            line: 97,
                                            column: 11
                                        },
                                        end: {
                                            line: 97,
                                            column: 27
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 97,
                                            column: 30
                                        },
                                        end: {
                                            line: 118,
                                            column: 3
                                        }
                                    },
                                    line: 97
                                },
                                '14': {
                                    name: '(anonymous_14)',
                                    decl: {
                                        start: {
                                            line: 114,
                                            column: 33
                                        },
                                        end: {
                                            line: 114,
                                            column: 34
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 114,
                                            column: 50
                                        },
                                        end: {
                                            line: 116,
                                            column: 7
                                        }
                                    },
                                    line: 114
                                },
                                '15': {
                                    name: 'getBestHookWorker',
                                    decl: {
                                        start: {
                                            line: 120,
                                            column: 11
                                        },
                                        end: {
                                            line: 120,
                                            column: 28
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 120,
                                            column: 31
                                        },
                                        end: {
                                            line: 135,
                                            column: 3
                                        }
                                    },
                                    line: 120
                                },
                                '16': {
                                    name: 'setScriptHookProperty',
                                    decl: {
                                        start: {
                                            line: 138,
                                            column: 11
                                        },
                                        end: {
                                            line: 138,
                                            column: 32
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 138,
                                            column: 46
                                        },
                                        end: {
                                            line: 170,
                                            column: 3
                                        }
                                    },
                                    line: 138
                                },
                                '17': {
                                    name: '_trimStartEndRaw',
                                    decl: {
                                        start: {
                                            line: 172,
                                            column: 11
                                        },
                                        end: {
                                            line: 172,
                                            column: 27
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 172,
                                            column: 33
                                        },
                                        end: {
                                            line: 194,
                                            column: 3
                                        }
                                    },
                                    line: 172
                                },
                                '18': {
                                    name: '_espreeParse',
                                    decl: {
                                        start: {
                                            line: 200,
                                            column: 11
                                        },
                                        end: {
                                            line: 200,
                                            column: 23
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 200,
                                            column: 49
                                        },
                                        end: {
                                            line: 205,
                                            column: 3
                                        }
                                    },
                                    line: 200
                                },
                                '19': {
                                    name: '_preprocess',
                                    decl: {
                                        start: {
                                            line: 207,
                                            column: 11
                                        },
                                        end: {
                                            line: 207,
                                            column: 22
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 207,
                                            column: 150
                                        },
                                        end: {
                                            line: 522,
                                            column: 3
                                        }
                                    },
                                    line: 207
                                },
                                '20': {
                                    name: '_trim',
                                    decl: {
                                        start: {
                                            line: 356,
                                            column: 41
                                        },
                                        end: {
                                            line: 356,
                                            column: 46
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 356,
                                            column: 54
                                        },
                                        end: {
                                            line: 366,
                                            column: 9
                                        }
                                    },
                                    line: 356
                                },
                                '21': {
                                    name: '(anonymous_21)',
                                    decl: {
                                        start: {
                                            line: 358,
                                            column: 63
                                        },
                                        end: {
                                            line: 358,
                                            column: 64
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 358,
                                            column: 74
                                        },
                                        end: {
                                            line: 358,
                                            column: 88
                                        }
                                    },
                                    line: 358
                                },
                                '22': {
                                    name: '(anonymous_22)',
                                    decl: {
                                        start: {
                                            line: 362,
                                            column: 76
                                        },
                                        end: {
                                            line: 362,
                                            column: 77
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 362,
                                            column: 84
                                        },
                                        end: {
                                            line: 364,
                                            column: 24
                                        }
                                    },
                                    line: 362
                                },
                                '23': {
                                    name: '(anonymous_23)',
                                    decl: {
                                        start: {
                                            line: 363,
                                            column: 21
                                        },
                                        end: {
                                            line: 363,
                                            column: 22
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 363,
                                            column: 32
                                        },
                                        end: {
                                            line: 363,
                                            column: 46
                                        }
                                    },
                                    line: 363
                                },
                                '24': {
                                    name: '_validateNoHookScript',
                                    decl: {
                                        start: {
                                            line: 524,
                                            column: 11
                                        },
                                        end: {
                                            line: 524,
                                            column: 32
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 524,
                                            column: 84
                                        },
                                        end: {
                                            line: 556,
                                            column: 3
                                        }
                                    },
                                    line: 524
                                },
                                '25': {
                                    name: '_preprocessHtml',
                                    decl: {
                                        start: {
                                            line: 558,
                                            column: 11
                                        },
                                        end: {
                                            line: 558,
                                            column: 26
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 558,
                                            column: 190
                                        },
                                        end: {
                                            line: 729,
                                            column: 3
                                        }
                                    },
                                    line: 558
                                },
                                '26': {
                                    name: '(anonymous_26)',
                                    decl: {
                                        start: {
                                            line: 562,
                                            column: 27
                                        },
                                        end: {
                                            line: 562,
                                            column: 28
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 562,
                                            column: 54
                                        },
                                        end: {
                                            line: 583,
                                            column: 9
                                        }
                                    },
                                    line: 562
                                },
                                '27': {
                                    name: 'callback',
                                    decl: {
                                        start: {
                                            line: 570,
                                            column: 47
                                        },
                                        end: {
                                            line: 570,
                                            column: 55
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 570,
                                            column: 62
                                        },
                                        end: {
                                            line: 580,
                                            column: 11
                                        }
                                    },
                                    line: 570
                                },
                                '28': {
                                    name: '(anonymous_28)',
                                    decl: {
                                        start: {
                                            line: 586,
                                            column: 27
                                        },
                                        end: {
                                            line: 586,
                                            column: 28
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 586,
                                            column: 54
                                        },
                                        end: {
                                            line: 593,
                                            column: 9
                                        }
                                    },
                                    line: 586
                                },
                                '29': {
                                    name: '(anonymous_29)',
                                    decl: {
                                        start: {
                                            line: 676,
                                            column: 44
                                        },
                                        end: {
                                            line: 676,
                                            column: 45
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 676,
                                            column: 54
                                        },
                                        end: {
                                            line: 678,
                                            column: 17
                                        }
                                    },
                                    line: 676
                                },
                                '30': {
                                    name: 'hook',
                                    decl: {
                                        start: {
                                            line: 768,
                                            column: 11
                                        },
                                        end: {
                                            line: 768,
                                            column: 15
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 768,
                                            column: 220
                                        },
                                        end: {
                                            line: 838,
                                            column: 3
                                        }
                                    },
                                    line: 768
                                },
                                '31': {
                                    name: '(anonymous_31)',
                                    decl: {
                                        start: {
                                            line: 772,
                                            column: 27
                                        },
                                        end: {
                                            line: 772,
                                            column: 28
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 772,
                                            column: 54
                                        },
                                        end: {
                                            line: 790,
                                            column: 9
                                        }
                                    },
                                    line: 772
                                },
                                '32': {
                                    name: 'callback',
                                    decl: {
                                        start: {
                                            line: 777,
                                            column: 47
                                        },
                                        end: {
                                            line: 777,
                                            column: 55
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 777,
                                            column: 62
                                        },
                                        end: {
                                            line: 786,
                                            column: 11
                                        }
                                    },
                                    line: 777
                                },
                                '33': {
                                    name: '(anonymous_33)',
                                    decl: {
                                        start: {
                                            line: 794,
                                            column: 27
                                        },
                                        end: {
                                            line: 794,
                                            column: 28
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 794,
                                            column: 54
                                        },
                                        end: {
                                            line: 801,
                                            column: 9
                                        }
                                    },
                                    line: 794
                                }
                            },
                            branchMap: {
                                '0': {
                                    loc: {
                                        start: {
                                            line: 74,
                                            column: 8
                                        },
                                        end: {
                                            line: 92,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 74,
                                                column: 8
                                            },
                                            end: {
                                                line: 92,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 74,
                                                column: 8
                                            },
                                            end: {
                                                line: 92,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 74
                                },
                                '1': {
                                    loc: {
                                        start: {
                                            line: 75,
                                            column: 10
                                        },
                                        end: {
                                            line: 88,
                                            column: 11
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 75,
                                                column: 10
                                            },
                                            end: {
                                                line: 88,
                                                column: 11
                                            }
                                        },
                                        {
                                            start: {
                                                line: 75,
                                                column: 10
                                            },
                                            end: {
                                                line: 88,
                                                column: 11
                                            }
                                        }
                                    ],
                                    line: 75
                                },
                                '2': {
                                    loc: {
                                        start: {
                                            line: 98,
                                            column: 4
                                        },
                                        end: {
                                            line: 117,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 98,
                                                column: 4
                                            },
                                            end: {
                                                line: 117,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 98,
                                                column: 4
                                            },
                                            end: {
                                                line: 117,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 98
                                },
                                '3': {
                                    loc: {
                                        start: {
                                            line: 98,
                                            column: 8
                                        },
                                        end: {
                                            line: 98,
                                            column: 62
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 98,
                                                column: 8
                                            },
                                            end: {
                                                line: 98,
                                                column: 32
                                            }
                                        },
                                        {
                                            start: {
                                                line: 98,
                                                column: 36
                                            },
                                            end: {
                                                line: 98,
                                                column: 62
                                            }
                                        }
                                    ],
                                    line: 98
                                },
                                '4': {
                                    loc: {
                                        start: {
                                            line: 122,
                                            column: 4
                                        },
                                        end: {
                                            line: 133,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 122,
                                                column: 4
                                            },
                                            end: {
                                                line: 133,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 122,
                                                column: 4
                                            },
                                            end: {
                                                line: 133,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 122
                                },
                                '5': {
                                    loc: {
                                        start: {
                                            line: 122,
                                            column: 8
                                        },
                                        end: {
                                            line: 122,
                                            column: 60
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 122,
                                                column: 8
                                            },
                                            end: {
                                                line: 122,
                                                column: 34
                                            }
                                        },
                                        {
                                            start: {
                                                line: 122,
                                                column: 38
                                            },
                                            end: {
                                                line: 122,
                                                column: 60
                                            }
                                        }
                                    ],
                                    line: 122
                                },
                                '6': {
                                    loc: {
                                        start: {
                                            line: 127,
                                            column: 8
                                        },
                                        end: {
                                            line: 130,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 127,
                                                column: 8
                                            },
                                            end: {
                                                line: 130,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 127,
                                                column: 8
                                            },
                                            end: {
                                                line: 130,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 127
                                },
                                '7': {
                                    loc: {
                                        start: {
                                            line: 139,
                                            column: 4
                                        },
                                        end: {
                                            line: 168,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 139,
                                                column: 4
                                            },
                                            end: {
                                                line: 168,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 139,
                                                column: 4
                                            },
                                            end: {
                                                line: 168,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 139
                                },
                                '8': {
                                    loc: {
                                        start: {
                                            line: 142,
                                            column: 6
                                        },
                                        end: {
                                            line: 152,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 142,
                                                column: 6
                                            },
                                            end: {
                                                line: 152,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 142,
                                                column: 6
                                            },
                                            end: {
                                                line: 152,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 142
                                },
                                '9': {
                                    loc: {
                                        start: {
                                            line: 143,
                                            column: 8
                                        },
                                        end: {
                                            line: 151,
                                            column: 9
                                        }
                                    },
                                    type: 'switch',
                                    locations: [
                                        {
                                            start: {
                                                line: 144,
                                                column: 8
                                            },
                                            end: {
                                                line: 144,
                                                column: 16
                                            }
                                        },
                                        {
                                            start: {
                                                line: 145,
                                                column: 8
                                            },
                                            end: {
                                                line: 147,
                                                column: 16
                                            }
                                        },
                                        {
                                            start: {
                                                line: 148,
                                                column: 8
                                            },
                                            end: {
                                                line: 150,
                                                column: 16
                                            }
                                        }
                                    ],
                                    line: 143
                                },
                                '10': {
                                    loc: {
                                        start: {
                                            line: 146,
                                            column: 18
                                        },
                                        end: {
                                            line: 146,
                                            column: 53
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 146,
                                                column: 38
                                            },
                                            end: {
                                                line: 146,
                                                column: 44
                                            }
                                        },
                                        {
                                            start: {
                                                line: 146,
                                                column: 47
                                            },
                                            end: {
                                                line: 146,
                                                column: 53
                                            }
                                        }
                                    ],
                                    line: 146
                                },
                                '11': {
                                    loc: {
                                        start: {
                                            line: 149,
                                            column: 18
                                        },
                                        end: {
                                            line: 149,
                                            column: 49
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 149,
                                                column: 38
                                            },
                                            end: {
                                                line: 149,
                                                column: 42
                                            }
                                        },
                                        {
                                            start: {
                                                line: 149,
                                                column: 45
                                            },
                                            end: {
                                                line: 149,
                                                column: 49
                                            }
                                        }
                                    ],
                                    line: 149
                                },
                                '12': {
                                    loc: {
                                        start: {
                                            line: 156,
                                            column: 6
                                        },
                                        end: {
                                            line: 166,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 156,
                                                column: 6
                                            },
                                            end: {
                                                line: 166,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 156,
                                                column: 6
                                            },
                                            end: {
                                                line: 166,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 156
                                },
                                '13': {
                                    loc: {
                                        start: {
                                            line: 157,
                                            column: 8
                                        },
                                        end: {
                                            line: 165,
                                            column: 9
                                        }
                                    },
                                    type: 'switch',
                                    locations: [
                                        {
                                            start: {
                                                line: 158,
                                                column: 8
                                            },
                                            end: {
                                                line: 158,
                                                column: 16
                                            }
                                        },
                                        {
                                            start: {
                                                line: 159,
                                                column: 8
                                            },
                                            end: {
                                                line: 161,
                                                column: 16
                                            }
                                        },
                                        {
                                            start: {
                                                line: 162,
                                                column: 8
                                            },
                                            end: {
                                                line: 164,
                                                column: 16
                                            }
                                        }
                                    ],
                                    line: 157
                                },
                                '14': {
                                    loc: {
                                        start: {
                                            line: 160,
                                            column: 19
                                        },
                                        end: {
                                            line: 160,
                                            column: 51
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 160,
                                                column: 34
                                            },
                                            end: {
                                                line: 160,
                                                column: 41
                                            }
                                        },
                                        {
                                            start: {
                                                line: 160,
                                                column: 44
                                            },
                                            end: {
                                                line: 160,
                                                column: 51
                                            }
                                        }
                                    ],
                                    line: 160
                                },
                                '15': {
                                    loc: {
                                        start: {
                                            line: 163,
                                            column: 19
                                        },
                                        end: {
                                            line: 163,
                                            column: 45
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 163,
                                                column: 34
                                            },
                                            end: {
                                                line: 163,
                                                column: 38
                                            }
                                        },
                                        {
                                            start: {
                                                line: 163,
                                                column: 41
                                            },
                                            end: {
                                                line: 163,
                                                column: 45
                                            }
                                        }
                                    ],
                                    line: 163
                                },
                                '16': {
                                    loc: {
                                        start: {
                                            line: 173,
                                            column: 4
                                        },
                                        end: {
                                            line: 177,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 173,
                                                column: 4
                                            },
                                            end: {
                                                line: 177,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 173,
                                                column: 4
                                            },
                                            end: {
                                                line: 177,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 173
                                },
                                '17': {
                                    loc: {
                                        start: {
                                            line: 173,
                                            column: 8
                                        },
                                        end: {
                                            line: 173,
                                            column: 38
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 173,
                                                column: 8
                                            },
                                            end: {
                                                line: 173,
                                                column: 11
                                            }
                                        },
                                        {
                                            start: {
                                                line: 173,
                                                column: 15
                                            },
                                            end: {
                                                line: 173,
                                                column: 38
                                            }
                                        }
                                    ],
                                    line: 173
                                },
                                '18': {
                                    loc: {
                                        start: {
                                            line: 179,
                                            column: 6
                                        },
                                        end: {
                                            line: 191,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 179,
                                                column: 6
                                            },
                                            end: {
                                                line: 191,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 179,
                                                column: 6
                                            },
                                            end: {
                                                line: 191,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 179
                                },
                                '19': {
                                    loc: {
                                        start: {
                                            line: 180,
                                            column: 8
                                        },
                                        end: {
                                            line: 190,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 180,
                                                column: 8
                                            },
                                            end: {
                                                line: 190,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 180,
                                                column: 8
                                            },
                                            end: {
                                                line: 190,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 180
                                },
                                '20': {
                                    loc: {
                                        start: {
                                            line: 183,
                                            column: 12
                                        },
                                        end: {
                                            line: 185,
                                            column: 13
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 183,
                                                column: 12
                                            },
                                            end: {
                                                line: 185,
                                                column: 13
                                            }
                                        },
                                        {
                                            start: {
                                                line: 183,
                                                column: 12
                                            },
                                            end: {
                                                line: 185,
                                                column: 13
                                            }
                                        }
                                    ],
                                    line: 183
                                },
                                '21': {
                                    loc: {
                                        start: {
                                            line: 183,
                                            column: 16
                                        },
                                        end: {
                                            line: 183,
                                            column: 48
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 183,
                                                column: 16
                                            },
                                            end: {
                                                line: 183,
                                                column: 20
                                            }
                                        },
                                        {
                                            start: {
                                                line: 183,
                                                column: 24
                                            },
                                            end: {
                                                line: 183,
                                                column: 48
                                            }
                                        }
                                    ],
                                    line: 183
                                },
                                '22': {
                                    loc: {
                                        start: {
                                            line: 188,
                                            column: 13
                                        },
                                        end: {
                                            line: 190,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 188,
                                                column: 13
                                            },
                                            end: {
                                                line: 190,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 188,
                                                column: 13
                                            },
                                            end: {
                                                line: 190,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 188
                                },
                                '23': {
                                    loc: {
                                        start: {
                                            line: 201,
                                            column: 4
                                        },
                                        end: {
                                            line: 203,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 201,
                                                column: 4
                                            },
                                            end: {
                                                line: 203,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 201,
                                                column: 4
                                            },
                                            end: {
                                                line: 203,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 201
                                },
                                '24': {
                                    loc: {
                                        start: {
                                            line: 207,
                                            column: 28
                                        },
                                        end: {
                                            line: 207,
                                            column: 49
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 207,
                                                column: 44
                                            },
                                            end: {
                                                line: 207,
                                                column: 49
                                            }
                                        }],
                                    line: 207
                                },
                                '25': {
                                    loc: {
                                        start: {
                                            line: 209,
                                            column: 4
                                        },
                                        end: {
                                            line: 501,
                                            column: 5
                                        }
                                    },
                                    type: 'switch',
                                    locations: [
                                        {
                                            start: {
                                                line: 210,
                                                column: 4
                                            },
                                            end: {
                                                line: 236,
                                                column: 12
                                            }
                                        },
                                        {
                                            start: {
                                                line: 237,
                                                column: 4
                                            },
                                            end: {
                                                line: 263,
                                                column: 12
                                            }
                                        },
                                        {
                                            start: {
                                                line: 264,
                                                column: 4
                                            },
                                            end: {
                                                line: 290,
                                                column: 12
                                            }
                                        },
                                        {
                                            start: {
                                                line: 291,
                                                column: 4
                                            },
                                            end: {
                                                line: 325,
                                                column: 12
                                            }
                                        },
                                        {
                                            start: {
                                                line: 326,
                                                column: 4
                                            },
                                            end: {
                                                line: 330,
                                                column: 12
                                            }
                                        },
                                        {
                                            start: {
                                                line: 331,
                                                column: 4
                                            },
                                            end: {
                                                line: 331,
                                                column: 31
                                            }
                                        },
                                        {
                                            start: {
                                                line: 332,
                                                column: 4
                                            },
                                            end: {
                                                line: 373,
                                                column: 12
                                            }
                                        },
                                        {
                                            start: {
                                                line: 374,
                                                column: 4
                                            },
                                            end: {
                                                line: 396,
                                                column: 12
                                            }
                                        },
                                        {
                                            start: {
                                                line: 397,
                                                column: 4
                                            },
                                            end: {
                                                line: 420,
                                                column: 12
                                            }
                                        },
                                        {
                                            start: {
                                                line: 421,
                                                column: 4
                                            },
                                            end: {
                                                line: 486,
                                                column: 12
                                            }
                                        },
                                        {
                                            start: {
                                                line: 487,
                                                column: 4
                                            },
                                            end: {
                                                line: 491,
                                                column: 12
                                            }
                                        },
                                        {
                                            start: {
                                                line: 492,
                                                column: 4
                                            },
                                            end: {
                                                line: 492,
                                                column: 26
                                            }
                                        },
                                        {
                                            start: {
                                                line: 493,
                                                column: 4
                                            },
                                            end: {
                                                line: 498,
                                                column: 12
                                            }
                                        },
                                        {
                                            start: {
                                                line: 499,
                                                column: 4
                                            },
                                            end: {
                                                line: 500,
                                                column: 12
                                            }
                                        }
                                    ],
                                    line: 209
                                },
                                '26': {
                                    loc: {
                                        start: {
                                            line: 211,
                                            column: 6
                                        },
                                        end: {
                                            line: 235,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 211,
                                                column: 6
                                            },
                                            end: {
                                                line: 235,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 211,
                                                column: 6
                                            },
                                            end: {
                                                line: 235,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 211
                                },
                                '27': {
                                    loc: {
                                        start: {
                                            line: 211,
                                            column: 10
                                        },
                                        end: {
                                            line: 214,
                                            column: 40
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 211,
                                                column: 10
                                            },
                                            end: {
                                                line: 211,
                                                column: 23
                                            }
                                        },
                                        {
                                            start: {
                                                line: 212,
                                                column: 8
                                            },
                                            end: {
                                                line: 212,
                                                column: 38
                                            }
                                        },
                                        {
                                            start: {
                                                line: 213,
                                                column: 8
                                            },
                                            end: {
                                                line: 213,
                                                column: 35
                                            }
                                        },
                                        {
                                            start: {
                                                line: 214,
                                                column: 8
                                            },
                                            end: {
                                                line: 214,
                                                column: 40
                                            }
                                        }
                                    ],
                                    line: 211
                                },
                                '28': {
                                    loc: {
                                        start: {
                                            line: 222,
                                            column: 8
                                        },
                                        end: {
                                            line: 230,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 222,
                                                column: 8
                                            },
                                            end: {
                                                line: 230,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 222,
                                                column: 8
                                            },
                                            end: {
                                                line: 230,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 222
                                },
                                '29': {
                                    loc: {
                                        start: {
                                            line: 238,
                                            column: 6
                                        },
                                        end: {
                                            line: 262,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 238,
                                                column: 6
                                            },
                                            end: {
                                                line: 262,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 238,
                                                column: 6
                                            },
                                            end: {
                                                line: 262,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 238
                                },
                                '30': {
                                    loc: {
                                        start: {
                                            line: 238,
                                            column: 10
                                        },
                                        end: {
                                            line: 242,
                                            column: 48
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 238,
                                                column: 10
                                            },
                                            end: {
                                                line: 238,
                                                column: 23
                                            }
                                        },
                                        {
                                            start: {
                                                line: 239,
                                                column: 8
                                            },
                                            end: {
                                                line: 239,
                                                column: 40
                                            }
                                        },
                                        {
                                            start: {
                                                line: 240,
                                                column: 8
                                            },
                                            end: {
                                                line: 240,
                                                column: 39
                                            }
                                        },
                                        {
                                            start: {
                                                line: 241,
                                                column: 8
                                            },
                                            end: {
                                                line: 241,
                                                column: 40
                                            }
                                        },
                                        {
                                            start: {
                                                line: 242,
                                                column: 8
                                            },
                                            end: {
                                                line: 242,
                                                column: 48
                                            }
                                        }
                                    ],
                                    line: 238
                                },
                                '31': {
                                    loc: {
                                        start: {
                                            line: 249,
                                            column: 31
                                        },
                                        end: {
                                            line: 249,
                                            column: 83
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 249,
                                                column: 44
                                            },
                                            end: {
                                                line: 249,
                                                column: 62
                                            }
                                        },
                                        {
                                            start: {
                                                line: 249,
                                                column: 65
                                            },
                                            end: {
                                                line: 249,
                                                column: 83
                                            }
                                        }
                                    ],
                                    line: 249
                                },
                                '32': {
                                    loc: {
                                        start: {
                                            line: 251,
                                            column: 8
                                        },
                                        end: {
                                            line: 257,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 251,
                                                column: 8
                                            },
                                            end: {
                                                line: 257,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 251,
                                                column: 8
                                            },
                                            end: {
                                                line: 257,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 251
                                },
                                '33': {
                                    loc: {
                                        start: {
                                            line: 265,
                                            column: 6
                                        },
                                        end: {
                                            line: 289,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 265,
                                                column: 6
                                            },
                                            end: {
                                                line: 289,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 265,
                                                column: 6
                                            },
                                            end: {
                                                line: 289,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 265
                                },
                                '34': {
                                    loc: {
                                        start: {
                                            line: 265,
                                            column: 10
                                        },
                                        end: {
                                            line: 269,
                                            column: 48
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 265,
                                                column: 10
                                            },
                                            end: {
                                                line: 265,
                                                column: 23
                                            }
                                        },
                                        {
                                            start: {
                                                line: 266,
                                                column: 8
                                            },
                                            end: {
                                                line: 266,
                                                column: 33
                                            }
                                        },
                                        {
                                            start: {
                                                line: 267,
                                                column: 8
                                            },
                                            end: {
                                                line: 267,
                                                column: 27
                                            }
                                        },
                                        {
                                            start: {
                                                line: 268,
                                                column: 8
                                            },
                                            end: {
                                                line: 268,
                                                column: 40
                                            }
                                        },
                                        {
                                            start: {
                                                line: 269,
                                                column: 8
                                            },
                                            end: {
                                                line: 269,
                                                column: 48
                                            }
                                        }
                                    ],
                                    line: 265
                                },
                                '35': {
                                    loc: {
                                        start: {
                                            line: 278,
                                            column: 8
                                        },
                                        end: {
                                            line: 284,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 278,
                                                column: 8
                                            },
                                            end: {
                                                line: 284,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 278,
                                                column: 8
                                            },
                                            end: {
                                                line: 284,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 278
                                },
                                '36': {
                                    loc: {
                                        start: {
                                            line: 292,
                                            column: 6
                                        },
                                        end: {
                                            line: 324,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 292,
                                                column: 6
                                            },
                                            end: {
                                                line: 324,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 292,
                                                column: 6
                                            },
                                            end: {
                                                line: 324,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 292
                                },
                                '37': {
                                    loc: {
                                        start: {
                                            line: 292,
                                            column: 10
                                        },
                                        end: {
                                            line: 296,
                                            column: 44
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 292,
                                                column: 10
                                            },
                                            end: {
                                                line: 292,
                                                column: 23
                                            }
                                        },
                                        {
                                            start: {
                                                line: 293,
                                                column: 8
                                            },
                                            end: {
                                                line: 293,
                                                column: 40
                                            }
                                        },
                                        {
                                            start: {
                                                line: 294,
                                                column: 8
                                            },
                                            end: {
                                                line: 294,
                                                column: 36
                                            }
                                        },
                                        {
                                            start: {
                                                line: 295,
                                                column: 8
                                            },
                                            end: {
                                                line: 295,
                                                column: 37
                                            }
                                        },
                                        {
                                            start: {
                                                line: 296,
                                                column: 8
                                            },
                                            end: {
                                                line: 296,
                                                column: 44
                                            }
                                        }
                                    ],
                                    line: 292
                                },
                                '38': {
                                    loc: {
                                        start: {
                                            line: 306,
                                            column: 8
                                        },
                                        end: {
                                            line: 314,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 306,
                                                column: 8
                                            },
                                            end: {
                                                line: 314,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 306,
                                                column: 8
                                            },
                                            end: {
                                                line: 314,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 306
                                },
                                '39': {
                                    loc: {
                                        start: {
                                            line: 327,
                                            column: 6
                                        },
                                        end: {
                                            line: 329,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 327,
                                                column: 6
                                            },
                                            end: {
                                                line: 329,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 327,
                                                column: 6
                                            },
                                            end: {
                                                line: 329,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 327
                                },
                                '40': {
                                    loc: {
                                        start: {
                                            line: 333,
                                            column: 6
                                        },
                                        end: {
                                            line: 372,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 333,
                                                column: 6
                                            },
                                            end: {
                                                line: 372,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 333,
                                                column: 6
                                            },
                                            end: {
                                                line: 372,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 333
                                },
                                '41': {
                                    loc: {
                                        start: {
                                            line: 336,
                                            column: 11
                                        },
                                        end: {
                                            line: 372,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 336,
                                                column: 11
                                            },
                                            end: {
                                                line: 372,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 336,
                                                column: 11
                                            },
                                            end: {
                                                line: 372,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 336
                                },
                                '42': {
                                    loc: {
                                        start: {
                                            line: 336,
                                            column: 15
                                        },
                                        end: {
                                            line: 340,
                                            column: 38
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 336,
                                                column: 15
                                            },
                                            end: {
                                                line: 336,
                                                column: 43
                                            }
                                        },
                                        {
                                            start: {
                                                line: 337,
                                                column: 10
                                            },
                                            end: {
                                                line: 337,
                                                column: 34
                                            }
                                        },
                                        {
                                            start: {
                                                line: 338,
                                                column: 10
                                            },
                                            end: {
                                                line: 338,
                                                column: 44
                                            }
                                        },
                                        {
                                            start: {
                                                line: 339,
                                                column: 10
                                            },
                                            end: {
                                                line: 339,
                                                column: 23
                                            }
                                        },
                                        {
                                            start: {
                                                line: 340,
                                                column: 10
                                            },
                                            end: {
                                                line: 340,
                                                column: 38
                                            }
                                        }
                                    ],
                                    line: 336
                                },
                                '43': {
                                    loc: {
                                        start: {
                                            line: 344,
                                            column: 32
                                        },
                                        end: {
                                            line: 348,
                                            column: 105
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 345,
                                                column: 12
                                            },
                                            end: {
                                                line: 345,
                                                column: 114
                                            }
                                        },
                                        {
                                            start: {
                                                line: 346,
                                                column: 12
                                            },
                                            end: {
                                                line: 348,
                                                column: 105
                                            }
                                        }
                                    ],
                                    line: 344
                                },
                                '44': {
                                    loc: {
                                        start: {
                                            line: 346,
                                            column: 12
                                        },
                                        end: {
                                            line: 348,
                                            column: 105
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 347,
                                                column: 14
                                            },
                                            end: {
                                                line: 347,
                                                column: 105
                                            }
                                        },
                                        {
                                            start: {
                                                line: 348,
                                                column: 14
                                            },
                                            end: {
                                                line: 348,
                                                column: 105
                                            }
                                        }
                                    ],
                                    line: 346
                                },
                                '45': {
                                    loc: {
                                        start: {
                                            line: 349,
                                            column: 12
                                        },
                                        end: {
                                            line: 351,
                                            column: 55
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 350,
                                                column: 12
                                            },
                                            end: {
                                                line: 350,
                                                column: 66
                                            }
                                        },
                                        {
                                            start: {
                                                line: 351,
                                                column: 12
                                            },
                                            end: {
                                                line: 351,
                                                column: 55
                                            }
                                        }
                                    ],
                                    line: 349
                                },
                                '46': {
                                    loc: {
                                        start: {
                                            line: 357,
                                            column: 17
                                        },
                                        end: {
                                            line: 365,
                                            column: 24
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 357,
                                                column: 17
                                            },
                                            end: {
                                                line: 357,
                                                column: 22
                                            }
                                        },
                                        {
                                            start: {
                                                line: 357,
                                                column: 27
                                            },
                                            end: {
                                                line: 365,
                                                column: 23
                                            }
                                        }
                                    ],
                                    line: 357
                                },
                                '47': {
                                    loc: {
                                        start: {
                                            line: 357,
                                            column: 27
                                        },
                                        end: {
                                            line: 365,
                                            column: 23
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 358,
                                                column: 14
                                            },
                                            end: {
                                                line: 358,
                                                column: 91
                                            }
                                        },
                                        {
                                            start: {
                                                line: 359,
                                                column: 14
                                            },
                                            end: {
                                                line: 365,
                                                column: 23
                                            }
                                        }
                                    ],
                                    line: 357
                                },
                                '48': {
                                    loc: {
                                        start: {
                                            line: 359,
                                            column: 14
                                        },
                                        end: {
                                            line: 365,
                                            column: 23
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 360,
                                                column: 16
                                            },
                                            end: {
                                                line: 360,
                                                column: 26
                                            }
                                        },
                                        {
                                            start: {
                                                line: 361,
                                                column: 16
                                            },
                                            end: {
                                                line: 365,
                                                column: 23
                                            }
                                        }
                                    ],
                                    line: 359
                                },
                                '49': {
                                    loc: {
                                        start: {
                                            line: 361,
                                            column: 16
                                        },
                                        end: {
                                            line: 365,
                                            column: 23
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 362,
                                                column: 18
                                            },
                                            end: {
                                                line: 364,
                                                column: 27
                                            }
                                        },
                                        {
                                            start: {
                                                line: 365,
                                                column: 18
                                            },
                                            end: {
                                                line: 365,
                                                column: 23
                                            }
                                        }
                                    ],
                                    line: 361
                                },
                                '50': {
                                    loc: {
                                        start: {
                                            line: 362,
                                            column: 84
                                        },
                                        end: {
                                            line: 364,
                                            column: 24
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 363,
                                                column: 20
                                            },
                                            end: {
                                                line: 363,
                                                column: 90
                                            }
                                        },
                                        {
                                            start: {
                                                line: 364,
                                                column: 20
                                            },
                                            end: {
                                                line: 364,
                                                column: 24
                                            }
                                        }
                                    ],
                                    line: 362
                                },
                                '51': {
                                    loc: {
                                        start: {
                                            line: 375,
                                            column: 6
                                        },
                                        end: {
                                            line: 395,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 375,
                                                column: 6
                                            },
                                            end: {
                                                line: 395,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 375,
                                                column: 6
                                            },
                                            end: {
                                                line: 395,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 375
                                },
                                '52': {
                                    loc: {
                                        start: {
                                            line: 379,
                                            column: 8
                                        },
                                        end: {
                                            line: 394,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 379,
                                                column: 8
                                            },
                                            end: {
                                                line: 394,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 379,
                                                column: 8
                                            },
                                            end: {
                                                line: 394,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 379
                                },
                                '53': {
                                    loc: {
                                        start: {
                                            line: 379,
                                            column: 12
                                        },
                                        end: {
                                            line: 380,
                                            column: 36
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 379,
                                                column: 12
                                            },
                                            end: {
                                                line: 379,
                                                column: 40
                                            }
                                        },
                                        {
                                            start: {
                                                line: 380,
                                                column: 12
                                            },
                                            end: {
                                                line: 380,
                                                column: 36
                                            }
                                        }
                                    ],
                                    line: 379
                                },
                                '54': {
                                    loc: {
                                        start: {
                                            line: 382,
                                            column: 34
                                        },
                                        end: {
                                            line: 386,
                                            column: 88
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 383,
                                                column: 14
                                            },
                                            end: {
                                                line: 383,
                                                column: 98
                                            }
                                        },
                                        {
                                            start: {
                                                line: 384,
                                                column: 14
                                            },
                                            end: {
                                                line: 386,
                                                column: 88
                                            }
                                        }
                                    ],
                                    line: 382
                                },
                                '55': {
                                    loc: {
                                        start: {
                                            line: 384,
                                            column: 14
                                        },
                                        end: {
                                            line: 386,
                                            column: 88
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 385,
                                                column: 16
                                            },
                                            end: {
                                                line: 385,
                                                column: 97
                                            }
                                        },
                                        {
                                            start: {
                                                line: 386,
                                                column: 16
                                            },
                                            end: {
                                                line: 386,
                                                column: 88
                                            }
                                        }
                                    ],
                                    line: 384
                                },
                                '56': {
                                    loc: {
                                        start: {
                                            line: 398,
                                            column: 6
                                        },
                                        end: {
                                            line: 419,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 398,
                                                column: 6
                                            },
                                            end: {
                                                line: 419,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 398,
                                                column: 6
                                            },
                                            end: {
                                                line: 419,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 398
                                },
                                '57': {
                                    loc: {
                                        start: {
                                            line: 398,
                                            column: 10
                                        },
                                        end: {
                                            line: 398,
                                            column: 69
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 398,
                                                column: 10
                                            },
                                            end: {
                                                line: 398,
                                                column: 21
                                            }
                                        },
                                        {
                                            start: {
                                                line: 398,
                                                column: 25
                                            },
                                            end: {
                                                line: 398,
                                                column: 35
                                            }
                                        },
                                        {
                                            start: {
                                                line: 398,
                                                column: 39
                                            },
                                            end: {
                                                line: 398,
                                                column: 69
                                            }
                                        }
                                    ],
                                    line: 398
                                },
                                '58': {
                                    loc: {
                                        start: {
                                            line: 404,
                                            column: 11
                                        },
                                        end: {
                                            line: 419,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 404,
                                                column: 11
                                            },
                                            end: {
                                                line: 419,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 404,
                                                column: 11
                                            },
                                            end: {
                                                line: 419,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 404
                                },
                                '59': {
                                    loc: {
                                        start: {
                                            line: 410,
                                            column: 8
                                        },
                                        end: {
                                            line: 415,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 410,
                                                column: 8
                                            },
                                            end: {
                                                line: 415,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 410,
                                                column: 8
                                            },
                                            end: {
                                                line: 415,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 410
                                },
                                '60': {
                                    loc: {
                                        start: {
                                            line: 422,
                                            column: 6
                                        },
                                        end: {
                                            line: 485,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 422,
                                                column: 6
                                            },
                                            end: {
                                                line: 485,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 422,
                                                column: 6
                                            },
                                            end: {
                                                line: 485,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 422
                                },
                                '61': {
                                    loc: {
                                        start: {
                                            line: 422,
                                            column: 10
                                        },
                                        end: {
                                            line: 428,
                                            column: 125
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 422,
                                                column: 10
                                            },
                                            end: {
                                                line: 422,
                                                column: 21
                                            }
                                        },
                                        {
                                            start: {
                                                line: 423,
                                                column: 10
                                            },
                                            end: {
                                                line: 423,
                                                column: 20
                                            }
                                        },
                                        {
                                            start: {
                                                line: 424,
                                                column: 10
                                            },
                                            end: {
                                                line: 424,
                                                column: 48
                                            }
                                        },
                                        {
                                            start: {
                                                line: 425,
                                                column: 10
                                            },
                                            end: {
                                                line: 425,
                                                column: 49
                                            }
                                        },
                                        {
                                            start: {
                                                line: 425,
                                                column: 53
                                            },
                                            end: {
                                                line: 425,
                                                column: 89
                                            }
                                        },
                                        {
                                            start: {
                                                line: 426,
                                                column: 12
                                            },
                                            end: {
                                                line: 426,
                                                column: 53
                                            }
                                        },
                                        {
                                            start: {
                                                line: 426,
                                                column: 57
                                            },
                                            end: {
                                                line: 426,
                                                column: 97
                                            }
                                        },
                                        {
                                            start: {
                                                line: 427,
                                                column: 12
                                            },
                                            end: {
                                                line: 427,
                                                column: 50
                                            }
                                        },
                                        {
                                            start: {
                                                line: 427,
                                                column: 54
                                            },
                                            end: {
                                                line: 427,
                                                column: 95
                                            }
                                        },
                                        {
                                            start: {
                                                line: 428,
                                                column: 10
                                            },
                                            end: {
                                                line: 428,
                                                column: 23
                                            }
                                        },
                                        {
                                            start: {
                                                line: 428,
                                                column: 27
                                            },
                                            end: {
                                                line: 428,
                                                column: 43
                                            }
                                        },
                                        {
                                            start: {
                                                line: 428,
                                                column: 47
                                            },
                                            end: {
                                                line: 428,
                                                column: 85
                                            }
                                        },
                                        {
                                            start: {
                                                line: 428,
                                                column: 89
                                            },
                                            end: {
                                                line: 428,
                                                column: 125
                                            }
                                        }
                                    ],
                                    line: 422
                                },
                                '62': {
                                    loc: {
                                        start: {
                                            line: 434,
                                            column: 11
                                        },
                                        end: {
                                            line: 485,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 434,
                                                column: 11
                                            },
                                            end: {
                                                line: 485,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 434,
                                                column: 11
                                            },
                                            end: {
                                                line: 485,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 434
                                },
                                '63': {
                                    loc: {
                                        start: {
                                            line: 434,
                                            column: 15
                                        },
                                        end: {
                                            line: 436,
                                            column: 146
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 434,
                                                column: 15
                                            },
                                            end: {
                                                line: 434,
                                                column: 26
                                            }
                                        },
                                        {
                                            start: {
                                                line: 435,
                                                column: 8
                                            },
                                            end: {
                                                line: 435,
                                                column: 18
                                            }
                                        },
                                        {
                                            start: {
                                                line: 435,
                                                column: 22
                                            },
                                            end: {
                                                line: 435,
                                                column: 54
                                            }
                                        },
                                        {
                                            start: {
                                                line: 435,
                                                column: 59
                                            },
                                            end: {
                                                line: 435,
                                                column: 91
                                            }
                                        },
                                        {
                                            start: {
                                                line: 435,
                                                column: 95
                                            },
                                            end: {
                                                line: 435,
                                                column: 128
                                            }
                                        },
                                        {
                                            start: {
                                                line: 436,
                                                column: 8
                                            },
                                            end: {
                                                line: 436,
                                                column: 21
                                            }
                                        },
                                        {
                                            start: {
                                                line: 436,
                                                column: 25
                                            },
                                            end: {
                                                line: 436,
                                                column: 41
                                            }
                                        },
                                        {
                                            start: {
                                                line: 436,
                                                column: 45
                                            },
                                            end: {
                                                line: 436,
                                                column: 91
                                            }
                                        },
                                        {
                                            start: {
                                                line: 436,
                                                column: 95
                                            },
                                            end: {
                                                line: 436,
                                                column: 146
                                            }
                                        }
                                    ],
                                    line: 434
                                },
                                '64': {
                                    loc: {
                                        start: {
                                            line: 442,
                                            column: 11
                                        },
                                        end: {
                                            line: 485,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 442,
                                                column: 11
                                            },
                                            end: {
                                                line: 485,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 442,
                                                column: 11
                                            },
                                            end: {
                                                line: 485,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 442
                                },
                                '65': {
                                    loc: {
                                        start: {
                                            line: 442,
                                            column: 15
                                        },
                                        end: {
                                            line: 442,
                                            column: 106
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 442,
                                                column: 15
                                            },
                                            end: {
                                                line: 442,
                                                column: 26
                                            }
                                        },
                                        {
                                            start: {
                                                line: 442,
                                                column: 30
                                            },
                                            end: {
                                                line: 442,
                                                column: 40
                                            }
                                        },
                                        {
                                            start: {
                                                line: 442,
                                                column: 44
                                            },
                                            end: {
                                                line: 442,
                                                column: 76
                                            }
                                        },
                                        {
                                            start: {
                                                line: 442,
                                                column: 80
                                            },
                                            end: {
                                                line: 442,
                                                column: 106
                                            }
                                        }
                                    ],
                                    line: 442
                                },
                                '66': {
                                    loc: {
                                        start: {
                                            line: 443,
                                            column: 8
                                        },
                                        end: {
                                            line: 460,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 443,
                                                column: 8
                                            },
                                            end: {
                                                line: 460,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 443,
                                                column: 8
                                            },
                                            end: {
                                                line: 460,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 443
                                },
                                '67': {
                                    loc: {
                                        start: {
                                            line: 451,
                                            column: 10
                                        },
                                        end: {
                                            line: 453,
                                            column: 11
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 451,
                                                column: 10
                                            },
                                            end: {
                                                line: 453,
                                                column: 11
                                            }
                                        },
                                        {
                                            start: {
                                                line: 451,
                                                column: 10
                                            },
                                            end: {
                                                line: 453,
                                                column: 11
                                            }
                                        }
                                    ],
                                    line: 451
                                },
                                '68': {
                                    loc: {
                                        start: {
                                            line: 455,
                                            column: 10
                                        },
                                        end: {
                                            line: 459,
                                            column: 11
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 455,
                                                column: 10
                                            },
                                            end: {
                                                line: 459,
                                                column: 11
                                            }
                                        },
                                        {
                                            start: {
                                                line: 455,
                                                column: 10
                                            },
                                            end: {
                                                line: 459,
                                                column: 11
                                            }
                                        }
                                    ],
                                    line: 455
                                },
                                '69': {
                                    loc: {
                                        start: {
                                            line: 462,
                                            column: 11
                                        },
                                        end: {
                                            line: 485,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 462,
                                                column: 11
                                            },
                                            end: {
                                                line: 485,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 462,
                                                column: 11
                                            },
                                            end: {
                                                line: 485,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 462
                                },
                                '70': {
                                    loc: {
                                        start: {
                                            line: 462,
                                            column: 15
                                        },
                                        end: {
                                            line: 462,
                                            column: 122
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 462,
                                                column: 15
                                            },
                                            end: {
                                                line: 462,
                                                column: 28
                                            }
                                        },
                                        {
                                            start: {
                                                line: 462,
                                                column: 32
                                            },
                                            end: {
                                                line: 462,
                                                column: 42
                                            }
                                        },
                                        {
                                            start: {
                                                line: 462,
                                                column: 46
                                            },
                                            end: {
                                                line: 462,
                                                column: 84
                                            }
                                        },
                                        {
                                            start: {
                                                line: 462,
                                                column: 88
                                            },
                                            end: {
                                                line: 462,
                                                column: 122
                                            }
                                        }
                                    ],
                                    line: 462
                                },
                                '71': {
                                    loc: {
                                        start: {
                                            line: 470,
                                            column: 8
                                        },
                                        end: {
                                            line: 476,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 470,
                                                column: 8
                                            },
                                            end: {
                                                line: 476,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 470,
                                                column: 8
                                            },
                                            end: {
                                                line: 476,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 470
                                },
                                '72': {
                                    loc: {
                                        start: {
                                            line: 504,
                                            column: 6
                                        },
                                        end: {
                                            line: 520,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 504,
                                                column: 6
                                            },
                                            end: {
                                                line: 520,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 504,
                                                column: 6
                                            },
                                            end: {
                                                line: 520,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 504
                                },
                                '73': {
                                    loc: {
                                        start: {
                                            line: 506,
                                            column: 8
                                        },
                                        end: {
                                            line: 518,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 506,
                                                column: 8
                                            },
                                            end: {
                                                line: 518,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 506,
                                                column: 8
                                            },
                                            end: {
                                                line: 518,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 506
                                },
                                '74': {
                                    loc: {
                                        start: {
                                            line: 509,
                                            column: 12
                                        },
                                        end: {
                                            line: 513,
                                            column: 13
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 509,
                                                column: 12
                                            },
                                            end: {
                                                line: 513,
                                                column: 13
                                            }
                                        },
                                        {
                                            start: {
                                                line: 509,
                                                column: 12
                                            },
                                            end: {
                                                line: 513,
                                                column: 13
                                            }
                                        }
                                    ],
                                    line: 509
                                },
                                '75': {
                                    loc: {
                                        start: {
                                            line: 509,
                                            column: 16
                                        },
                                        end: {
                                            line: 509,
                                            column: 81
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 509,
                                                column: 16
                                            },
                                            end: {
                                                line: 509,
                                                column: 20
                                            }
                                        },
                                        {
                                            start: {
                                                line: 509,
                                                column: 24
                                            },
                                            end: {
                                                line: 509,
                                                column: 48
                                            }
                                        },
                                        {
                                            start: {
                                                line: 509,
                                                column: 52
                                            },
                                            end: {
                                                line: 509,
                                                column: 81
                                            }
                                        }
                                    ],
                                    line: 509
                                },
                                '76': {
                                    loc: {
                                        start: {
                                            line: 516,
                                            column: 13
                                        },
                                        end: {
                                            line: 518,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 516,
                                                column: 13
                                            },
                                            end: {
                                                line: 518,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 516,
                                                column: 13
                                            },
                                            end: {
                                                line: 518,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 516
                                },
                                '77': {
                                    loc: {
                                        start: {
                                            line: 516,
                                            column: 17
                                        },
                                        end: {
                                            line: 516,
                                            column: 76
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 516,
                                                column: 17
                                            },
                                            end: {
                                                line: 516,
                                                column: 42
                                            }
                                        },
                                        {
                                            start: {
                                                line: 516,
                                                column: 46
                                            },
                                            end: {
                                                line: 516,
                                                column: 76
                                            }
                                        }
                                    ],
                                    line: 516
                                },
                                '78': {
                                    loc: {
                                        start: {
                                            line: 524,
                                            column: 46
                                        },
                                        end: {
                                            line: 524,
                                            column: 82
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 524,
                                                column: 77
                                            },
                                            end: {
                                                line: 524,
                                                column: 82
                                            }
                                        }],
                                    line: 524
                                },
                                '79': {
                                    loc: {
                                        start: {
                                            line: 528,
                                            column: 48
                                        },
                                        end: {
                                            line: 528,
                                            column: 95
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 528,
                                                column: 48
                                            },
                                            end: {
                                                line: 528,
                                                column: 89
                                            }
                                        },
                                        {
                                            start: {
                                                line: 528,
                                                column: 93
                                            },
                                            end: {
                                                line: 528,
                                                column: 95
                                            }
                                        }
                                    ],
                                    line: 528
                                },
                                '80': {
                                    loc: {
                                        start: {
                                            line: 529,
                                            column: 4
                                        },
                                        end: {
                                            line: 554,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 529,
                                                column: 4
                                            },
                                            end: {
                                                line: 554,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 529,
                                                column: 4
                                            },
                                            end: {
                                                line: 554,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 529
                                },
                                '81': {
                                    loc: {
                                        start: {
                                            line: 529,
                                            column: 8
                                        },
                                        end: {
                                            line: 531,
                                            column: 50
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 529,
                                                column: 8
                                            },
                                            end: {
                                                line: 529,
                                                column: 55
                                            }
                                        },
                                        {
                                            start: {
                                                line: 530,
                                                column: 9
                                            },
                                            end: {
                                                line: 530,
                                                column: 44
                                            }
                                        },
                                        {
                                            start: {
                                                line: 531,
                                                column: 8
                                            },
                                            end: {
                                                line: 531,
                                                column: 49
                                            }
                                        }
                                    ],
                                    line: 529
                                },
                                '82': {
                                    loc: {
                                        start: {
                                            line: 532,
                                            column: 6
                                        },
                                        end: {
                                            line: 545,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 532,
                                                column: 6
                                            },
                                            end: {
                                                line: 545,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 532,
                                                column: 6
                                            },
                                            end: {
                                                line: 545,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 532
                                },
                                '83': {
                                    loc: {
                                        start: {
                                            line: 532,
                                            column: 10
                                        },
                                        end: {
                                            line: 534,
                                            column: 121
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 532,
                                                column: 11
                                            },
                                            end: {
                                                line: 532,
                                                column: 47
                                            }
                                        },
                                        {
                                            start: {
                                                line: 532,
                                                column: 52
                                            },
                                            end: {
                                                line: 532,
                                                column: 87
                                            }
                                        },
                                        {
                                            start: {
                                                line: 532,
                                                column: 91
                                            },
                                            end: {
                                                line: 532,
                                                column: 135
                                            }
                                        },
                                        {
                                            start: {
                                                line: 533,
                                                column: 12
                                            },
                                            end: {
                                                line: 533,
                                                column: 47
                                            }
                                        },
                                        {
                                            start: {
                                                line: 533,
                                                column: 51
                                            },
                                            end: {
                                                line: 533,
                                                column: 99
                                            }
                                        },
                                        {
                                            start: {
                                                line: 534,
                                                column: 12
                                            },
                                            end: {
                                                line: 534,
                                                column: 59
                                            }
                                        },
                                        {
                                            start: {
                                                line: 534,
                                                column: 63
                                            },
                                            end: {
                                                line: 534,
                                                column: 119
                                            }
                                        }
                                    ],
                                    line: 532
                                },
                                '84': {
                                    loc: {
                                        start: {
                                            line: 535,
                                            column: 8
                                        },
                                        end: {
                                            line: 540,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 535,
                                                column: 8
                                            },
                                            end: {
                                                line: 540,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 535,
                                                column: 8
                                            },
                                            end: {
                                                line: 540,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 535
                                },
                                '85': {
                                    loc: {
                                        start: {
                                            line: 535,
                                            column: 12
                                        },
                                        end: {
                                            line: 535,
                                            column: 79
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 535,
                                                column: 12
                                            },
                                            end: {
                                                line: 535,
                                                column: 47
                                            }
                                        },
                                        {
                                            start: {
                                                line: 535,
                                                column: 51
                                            },
                                            end: {
                                                line: 535,
                                                column: 79
                                            }
                                        }
                                    ],
                                    line: 535
                                },
                                '86': {
                                    loc: {
                                        start: {
                                            line: 537,
                                            column: 54
                                        },
                                        end: {
                                            line: 537,
                                            column: 101
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 537,
                                                column: 54
                                            },
                                            end: {
                                                line: 537,
                                                column: 95
                                            }
                                        },
                                        {
                                            start: {
                                                line: 537,
                                                column: 99
                                            },
                                            end: {
                                                line: 537,
                                                column: 101
                                            }
                                        }
                                    ],
                                    line: 537
                                },
                                '87': {
                                    loc: {
                                        start: {
                                            line: 543,
                                            column: 11
                                        },
                                        end: {
                                            line: 545,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 543,
                                                column: 11
                                            },
                                            end: {
                                                line: 545,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 543,
                                                column: 11
                                            },
                                            end: {
                                                line: 545,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 543
                                },
                                '88': {
                                    loc: {
                                        start: {
                                            line: 543,
                                            column: 15
                                        },
                                        end: {
                                            line: 543,
                                            column: 142
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 543,
                                                column: 15
                                            },
                                            end: {
                                                line: 543,
                                                column: 62
                                            }
                                        },
                                        {
                                            start: {
                                                line: 543,
                                                column: 66
                                            },
                                            end: {
                                                line: 543,
                                                column: 142
                                            }
                                        }
                                    ],
                                    line: 543
                                },
                                '89': {
                                    loc: {
                                        start: {
                                            line: 549,
                                            column: 6
                                        },
                                        end: {
                                            line: 553,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 549,
                                                column: 6
                                            },
                                            end: {
                                                line: 553,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 549,
                                                column: 6
                                            },
                                            end: {
                                                line: 553,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 549
                                },
                                '90': {
                                    loc: {
                                        start: {
                                            line: 549,
                                            column: 10
                                        },
                                        end: {
                                            line: 550,
                                            column: 50
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 549,
                                                column: 10
                                            },
                                            end: {
                                                line: 549,
                                                column: 45
                                            }
                                        },
                                        {
                                            start: {
                                                line: 550,
                                                column: 10
                                            },
                                            end: {
                                                line: 550,
                                                column: 50
                                            }
                                        }
                                    ],
                                    line: 549
                                },
                                '91': {
                                    loc: {
                                        start: {
                                            line: 558,
                                            column: 108
                                        },
                                        end: {
                                            line: 558,
                                            column: 126
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 558,
                                                column: 122
                                            },
                                            end: {
                                                line: 558,
                                                column: 126
                                            }
                                        }],
                                    line: 558
                                },
                                '92': {
                                    loc: {
                                        start: {
                                            line: 558,
                                            column: 128
                                        },
                                        end: {
                                            line: 558,
                                            column: 144
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 558,
                                                column: 143
                                            },
                                            end: {
                                                line: 558,
                                                column: 144
                                            }
                                        }],
                                    line: 558
                                },
                                '93': {
                                    loc: {
                                        start: {
                                            line: 558,
                                            column: 146
                                        },
                                        end: {
                                            line: 558,
                                            column: 166
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 558,
                                                column: 162
                                            },
                                            end: {
                                                line: 558,
                                                column: 166
                                            }
                                        }],
                                    line: 558
                                },
                                '94': {
                                    loc: {
                                        start: {
                                            line: 558,
                                            column: 168
                                        },
                                        end: {
                                            line: 558,
                                            column: 188
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 558,
                                                column: 183
                                            },
                                            end: {
                                                line: 558,
                                                column: 188
                                            }
                                        }],
                                    line: 558
                                },
                                '95': {
                                    loc: {
                                        start: {
                                            line: 559,
                                            column: 4
                                        },
                                        end: {
                                            line: 728,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 559,
                                                column: 4
                                            },
                                            end: {
                                                line: 728,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 559,
                                                column: 4
                                            },
                                            end: {
                                                line: 728,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 559
                                },
                                '96': {
                                    loc: {
                                        start: {
                                            line: 561,
                                            column: 6
                                        },
                                        end: {
                                            line: 594,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 561,
                                                column: 6
                                            },
                                            end: {
                                                line: 594,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 561,
                                                column: 6
                                            },
                                            end: {
                                                line: 594,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 561
                                },
                                '97': {
                                    loc: {
                                        start: {
                                            line: 565,
                                            column: 10
                                        },
                                        end: {
                                            line: 567,
                                            column: 11
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 565,
                                                column: 10
                                            },
                                            end: {
                                                line: 567,
                                                column: 11
                                            }
                                        },
                                        {
                                            start: {
                                                line: 565,
                                                column: 10
                                            },
                                            end: {
                                                line: 567,
                                                column: 11
                                            }
                                        }
                                    ],
                                    line: 565
                                },
                                '98': {
                                    loc: {
                                        start: {
                                            line: 573,
                                            column: 12
                                        },
                                        end: {
                                            line: 579,
                                            column: 13
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 573,
                                                column: 12
                                            },
                                            end: {
                                                line: 579,
                                                column: 13
                                            }
                                        },
                                        {
                                            start: {
                                                line: 573,
                                                column: 12
                                            },
                                            end: {
                                                line: 579,
                                                column: 13
                                            }
                                        }
                                    ],
                                    line: 573
                                },
                                '99': {
                                    loc: {
                                        start: {
                                            line: 603,
                                            column: 6
                                        },
                                        end: {
                                            line: 605,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 603,
                                                column: 6
                                            },
                                            end: {
                                                line: 605,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 603,
                                                column: 6
                                            },
                                            end: {
                                                line: 605,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 603
                                },
                                '100': {
                                    loc: {
                                        start: {
                                            line: 614,
                                            column: 12
                                        },
                                        end: {
                                            line: 643,
                                            column: 13
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 614,
                                                column: 12
                                            },
                                            end: {
                                                line: 643,
                                                column: 13
                                            }
                                        },
                                        {
                                            start: {
                                                line: 614,
                                                column: 12
                                            },
                                            end: {
                                                line: 643,
                                                column: 13
                                            }
                                        }
                                    ],
                                    line: 614
                                },
                                '101': {
                                    loc: {
                                        start: {
                                            line: 614,
                                            column: 16
                                        },
                                        end: {
                                            line: 614,
                                            column: 63
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 614,
                                                column: 16
                                            },
                                            end: {
                                                line: 614,
                                                column: 43
                                            }
                                        },
                                        {
                                            start: {
                                                line: 614,
                                                column: 47
                                            },
                                            end: {
                                                line: 614,
                                                column: 63
                                            }
                                        }
                                    ],
                                    line: 614
                                },
                                '102': {
                                    loc: {
                                        start: {
                                            line: 616,
                                            column: 14
                                        },
                                        end: {
                                            line: 620,
                                            column: 15
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 616,
                                                column: 14
                                            },
                                            end: {
                                                line: 620,
                                                column: 15
                                            }
                                        },
                                        {
                                            start: {
                                                line: 616,
                                                column: 14
                                            },
                                            end: {
                                                line: 620,
                                                column: 15
                                            }
                                        }
                                    ],
                                    line: 616
                                },
                                '103': {
                                    loc: {
                                        start: {
                                            line: 621,
                                            column: 14
                                        },
                                        end: {
                                            line: 627,
                                            column: 15
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 621,
                                                column: 14
                                            },
                                            end: {
                                                line: 627,
                                                column: 15
                                            }
                                        },
                                        {
                                            start: {
                                                line: 621,
                                                column: 14
                                            },
                                            end: {
                                                line: 627,
                                                column: 15
                                            }
                                        }
                                    ],
                                    line: 621
                                },
                                '104': {
                                    loc: {
                                        start: {
                                            line: 624,
                                            column: 21
                                        },
                                        end: {
                                            line: 624,
                                            column: 51
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 624,
                                                column: 28
                                            },
                                            end: {
                                                line: 624,
                                                column: 36
                                            }
                                        },
                                        {
                                            start: {
                                                line: 624,
                                                column: 39
                                            },
                                            end: {
                                                line: 624,
                                                column: 51
                                            }
                                        }
                                    ],
                                    line: 624
                                },
                                '105': {
                                    loc: {
                                        start: {
                                            line: 625,
                                            column: 21
                                        },
                                        end: {
                                            line: 625,
                                            column: 105
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 625,
                                                column: 37
                                            },
                                            end: {
                                                line: 625,
                                                column: 56
                                            }
                                        },
                                        {
                                            start: {
                                                line: 625,
                                                column: 59
                                            },
                                            end: {
                                                line: 625,
                                                column: 105
                                            }
                                        }
                                    ],
                                    line: 625
                                },
                                '106': {
                                    loc: {
                                        start: {
                                            line: 625,
                                            column: 59
                                        },
                                        end: {
                                            line: 625,
                                            column: 105
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 625,
                                                column: 78
                                            },
                                            end: {
                                                line: 625,
                                                column: 100
                                            }
                                        },
                                        {
                                            start: {
                                                line: 625,
                                                column: 103
                                            },
                                            end: {
                                                line: 625,
                                                column: 105
                                            }
                                        }
                                    ],
                                    line: 625
                                },
                                '107': {
                                    loc: {
                                        start: {
                                            line: 629,
                                            column: 17
                                        },
                                        end: {
                                            line: 643,
                                            column: 13
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 629,
                                                column: 17
                                            },
                                            end: {
                                                line: 643,
                                                column: 13
                                            }
                                        },
                                        {
                                            start: {
                                                line: 629,
                                                column: 17
                                            },
                                            end: {
                                                line: 643,
                                                column: 13
                                            }
                                        }
                                    ],
                                    line: 629
                                },
                                '108': {
                                    loc: {
                                        start: {
                                            line: 629,
                                            column: 21
                                        },
                                        end: {
                                            line: 629,
                                            column: 86
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 629,
                                                column: 21
                                            },
                                            end: {
                                                line: 629,
                                                column: 37
                                            }
                                        },
                                        {
                                            start: {
                                                line: 629,
                                                column: 41
                                            },
                                            end: {
                                                line: 629,
                                                column: 86
                                            }
                                        }
                                    ],
                                    line: 629
                                },
                                '109': {
                                    loc: {
                                        start: {
                                            line: 631,
                                            column: 14
                                        },
                                        end: {
                                            line: 635,
                                            column: 15
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 631,
                                                column: 14
                                            },
                                            end: {
                                                line: 635,
                                                column: 15
                                            }
                                        },
                                        {
                                            start: {
                                                line: 631,
                                                column: 14
                                            },
                                            end: {
                                                line: 635,
                                                column: 15
                                            }
                                        }
                                    ],
                                    line: 631
                                },
                                '110': {
                                    loc: {
                                        start: {
                                            line: 636,
                                            column: 14
                                        },
                                        end: {
                                            line: 642,
                                            column: 15
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 636,
                                                column: 14
                                            },
                                            end: {
                                                line: 642,
                                                column: 15
                                            }
                                        },
                                        {
                                            start: {
                                                line: 636,
                                                column: 14
                                            },
                                            end: {
                                                line: 642,
                                                column: 15
                                            }
                                        }
                                    ],
                                    line: 636
                                },
                                '111': {
                                    loc: {
                                        start: {
                                            line: 639,
                                            column: 21
                                        },
                                        end: {
                                            line: 639,
                                            column: 51
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 639,
                                                column: 28
                                            },
                                            end: {
                                                line: 639,
                                                column: 36
                                            }
                                        },
                                        {
                                            start: {
                                                line: 639,
                                                column: 39
                                            },
                                            end: {
                                                line: 639,
                                                column: 51
                                            }
                                        }
                                    ],
                                    line: 639
                                },
                                '112': {
                                    loc: {
                                        start: {
                                            line: 640,
                                            column: 21
                                        },
                                        end: {
                                            line: 640,
                                            column: 105
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 640,
                                                column: 37
                                            },
                                            end: {
                                                line: 640,
                                                column: 56
                                            }
                                        },
                                        {
                                            start: {
                                                line: 640,
                                                column: 59
                                            },
                                            end: {
                                                line: 640,
                                                column: 105
                                            }
                                        }
                                    ],
                                    line: 640
                                },
                                '113': {
                                    loc: {
                                        start: {
                                            line: 640,
                                            column: 59
                                        },
                                        end: {
                                            line: 640,
                                            column: 105
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 640,
                                                column: 78
                                            },
                                            end: {
                                                line: 640,
                                                column: 100
                                            }
                                        },
                                        {
                                            start: {
                                                line: 640,
                                                column: 103
                                            },
                                            end: {
                                                line: 640,
                                                column: 105
                                            }
                                        }
                                    ],
                                    line: 640
                                },
                                '114': {
                                    loc: {
                                        start: {
                                            line: 644,
                                            column: 35
                                        },
                                        end: {
                                            line: 647,
                                            column: 52
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 645,
                                                column: 16
                                            },
                                            end: {
                                                line: 647,
                                                column: 47
                                            }
                                        },
                                        {
                                            start: {
                                                line: 647,
                                                column: 50
                                            },
                                            end: {
                                                line: 647,
                                                column: 52
                                            }
                                        }
                                    ],
                                    line: 644
                                },
                                '115': {
                                    loc: {
                                        start: {
                                            line: 645,
                                            column: 16
                                        },
                                        end: {
                                            line: 647,
                                            column: 47
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 646,
                                                column: 18
                                            },
                                            end: {
                                                line: 646,
                                                column: 49
                                            }
                                        },
                                        {
                                            start: {
                                                line: 647,
                                                column: 18
                                            },
                                            end: {
                                                line: 647,
                                                column: 47
                                            }
                                        }
                                    ],
                                    line: 645
                                },
                                '116': {
                                    loc: {
                                        start: {
                                            line: 650,
                                            column: 10
                                        },
                                        end: {
                                            line: 684,
                                            column: 11
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 650,
                                                column: 10
                                            },
                                            end: {
                                                line: 684,
                                                column: 11
                                            }
                                        },
                                        {
                                            start: {
                                                line: 650,
                                                column: 10
                                            },
                                            end: {
                                                line: 684,
                                                column: 11
                                            }
                                        }
                                    ],
                                    line: 650
                                },
                                '117': {
                                    loc: {
                                        start: {
                                            line: 656,
                                            column: 12
                                        },
                                        end: {
                                            line: 680,
                                            column: 13
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 656,
                                                column: 12
                                            },
                                            end: {
                                                line: 680,
                                                column: 13
                                            }
                                        },
                                        {
                                            start: {
                                                line: 656,
                                                column: 12
                                            },
                                            end: {
                                                line: 680,
                                                column: 13
                                            }
                                        }
                                    ],
                                    line: 656
                                },
                                '118': {
                                    loc: {
                                        start: {
                                            line: 656,
                                            column: 16
                                        },
                                        end: {
                                            line: 656,
                                            column: 55
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 656,
                                                column: 16
                                            },
                                            end: {
                                                line: 656,
                                                column: 19
                                            }
                                        },
                                        {
                                            start: {
                                                line: 656,
                                                column: 23
                                            },
                                            end: {
                                                line: 656,
                                                column: 55
                                            }
                                        }
                                    ],
                                    line: 656
                                },
                                '119': {
                                    loc: {
                                        start: {
                                            line: 658,
                                            column: 14
                                        },
                                        end: {
                                            line: 660,
                                            column: 15
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 658,
                                                column: 14
                                            },
                                            end: {
                                                line: 660,
                                                column: 15
                                            }
                                        },
                                        {
                                            start: {
                                                line: 658,
                                                column: 14
                                            },
                                            end: {
                                                line: 660,
                                                column: 15
                                            }
                                        }
                                    ],
                                    line: 658
                                },
                                '120': {
                                    loc: {
                                        start: {
                                            line: 661,
                                            column: 14
                                        },
                                        end: {
                                            line: 663,
                                            column: 15
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 661,
                                                column: 14
                                            },
                                            end: {
                                                line: 663,
                                                column: 15
                                            }
                                        },
                                        {
                                            start: {
                                                line: 661,
                                                column: 14
                                            },
                                            end: {
                                                line: 663,
                                                column: 15
                                            }
                                        }
                                    ],
                                    line: 661
                                },
                                '121': {
                                    loc: {
                                        start: {
                                            line: 662,
                                            column: 39
                                        },
                                        end: {
                                            line: 662,
                                            column: 100
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 662,
                                                column: 39
                                            },
                                            end: {
                                                line: 662,
                                                column: 88
                                            }
                                        },
                                        {
                                            start: {
                                                line: 662,
                                                column: 92
                                            },
                                            end: {
                                                line: 662,
                                                column: 100
                                            }
                                        }
                                    ],
                                    line: 662
                                },
                                '122': {
                                    loc: {
                                        start: {
                                            line: 664,
                                            column: 14
                                        },
                                        end: {
                                            line: 666,
                                            column: 15
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 664,
                                                column: 14
                                            },
                                            end: {
                                                line: 666,
                                                column: 15
                                            }
                                        },
                                        {
                                            start: {
                                                line: 664,
                                                column: 14
                                            },
                                            end: {
                                                line: 666,
                                                column: 15
                                            }
                                        }
                                    ],
                                    line: 664
                                },
                                '123': {
                                    loc: {
                                        start: {
                                            line: 667,
                                            column: 14
                                        },
                                        end: {
                                            line: 669,
                                            column: 15
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 667,
                                                column: 14
                                            },
                                            end: {
                                                line: 669,
                                                column: 15
                                            }
                                        },
                                        {
                                            start: {
                                                line: 667,
                                                column: 14
                                            },
                                            end: {
                                                line: 669,
                                                column: 15
                                            }
                                        }
                                    ],
                                    line: 667
                                },
                                '124': {
                                    loc: {
                                        start: {
                                            line: 670,
                                            column: 14
                                        },
                                        end: {
                                            line: 672,
                                            column: 15
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 670,
                                                column: 14
                                            },
                                            end: {
                                                line: 672,
                                                column: 15
                                            }
                                        },
                                        {
                                            start: {
                                                line: 670,
                                                column: 14
                                            },
                                            end: {
                                                line: 672,
                                                column: 15
                                            }
                                        }
                                    ],
                                    line: 670
                                },
                                '125': {
                                    loc: {
                                        start: {
                                            line: 673,
                                            column: 14
                                        },
                                        end: {
                                            line: 679,
                                            column: 15
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 673,
                                                column: 14
                                            },
                                            end: {
                                                line: 679,
                                                column: 15
                                            }
                                        },
                                        {
                                            start: {
                                                line: 673,
                                                column: 14
                                            },
                                            end: {
                                                line: 679,
                                                column: 15
                                            }
                                        }
                                    ],
                                    line: 673
                                },
                                '126': {
                                    loc: {
                                        start: {
                                            line: 675,
                                            column: 66
                                        },
                                        end: {
                                            line: 675,
                                            column: 119
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 675,
                                                column: 66
                                            },
                                            end: {
                                                line: 675,
                                                column: 113
                                            }
                                        },
                                        {
                                            start: {
                                                line: 675,
                                                column: 117
                                            },
                                            end: {
                                                line: 675,
                                                column: 119
                                            }
                                        }
                                    ],
                                    line: 675
                                },
                                '127': {
                                    loc: {
                                        start: {
                                            line: 681,
                                            column: 12
                                        },
                                        end: {
                                            line: 683,
                                            column: 13
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 681,
                                                column: 12
                                            },
                                            end: {
                                                line: 683,
                                                column: 13
                                            }
                                        },
                                        {
                                            start: {
                                                line: 681,
                                                column: 12
                                            },
                                            end: {
                                                line: 683,
                                                column: 13
                                            }
                                        }
                                    ],
                                    line: 681
                                },
                                '128': {
                                    loc: {
                                        start: {
                                            line: 681,
                                            column: 16
                                        },
                                        end: {
                                            line: 681,
                                            column: 76
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 681,
                                                column: 16
                                            },
                                            end: {
                                                line: 681,
                                                column: 25
                                            }
                                        },
                                        {
                                            start: {
                                                line: 681,
                                                column: 29
                                            },
                                            end: {
                                                line: 681,
                                                column: 69
                                            }
                                        },
                                        {
                                            start: {
                                                line: 681,
                                                column: 73
                                            },
                                            end: {
                                                line: 681,
                                                column: 76
                                            }
                                        }
                                    ],
                                    line: 681
                                },
                                '129': {
                                    loc: {
                                        start: {
                                            line: 687,
                                            column: 10
                                        },
                                        end: {
                                            line: 692,
                                            column: 11
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 687,
                                                column: 10
                                            },
                                            end: {
                                                line: 692,
                                                column: 11
                                            }
                                        },
                                        {
                                            start: {
                                                line: 687,
                                                column: 10
                                            },
                                            end: {
                                                line: 692,
                                                column: 11
                                            }
                                        }
                                    ],
                                    line: 687
                                },
                                '130': {
                                    loc: {
                                        start: {
                                            line: 695,
                                            column: 10
                                        },
                                        end: {
                                            line: 714,
                                            column: 11
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 695,
                                                column: 10
                                            },
                                            end: {
                                                line: 714,
                                                column: 11
                                            }
                                        },
                                        {
                                            start: {
                                                line: 695,
                                                column: 10
                                            },
                                            end: {
                                                line: 714,
                                                column: 11
                                            }
                                        }
                                    ],
                                    line: 695
                                },
                                '131': {
                                    loc: {
                                        start: {
                                            line: 695,
                                            column: 14
                                        },
                                        end: {
                                            line: 695,
                                            column: 43
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 695,
                                                column: 14
                                            },
                                            end: {
                                                line: 695,
                                                column: 31
                                            }
                                        },
                                        {
                                            start: {
                                                line: 695,
                                                column: 35
                                            },
                                            end: {
                                                line: 695,
                                                column: 43
                                            }
                                        }
                                    ],
                                    line: 695
                                },
                                '132': {
                                    loc: {
                                        start: {
                                            line: 696,
                                            column: 12
                                        },
                                        end: {
                                            line: 698,
                                            column: 13
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 696,
                                                column: 12
                                            },
                                            end: {
                                                line: 698,
                                                column: 13
                                            }
                                        },
                                        {
                                            start: {
                                                line: 696,
                                                column: 12
                                            },
                                            end: {
                                                line: 698,
                                                column: 13
                                            }
                                        }
                                    ],
                                    line: 696
                                },
                                '133': {
                                    loc: {
                                        start: {
                                            line: 696,
                                            column: 16
                                        },
                                        end: {
                                            line: 696,
                                            column: 85
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 696,
                                                column: 16
                                            },
                                            end: {
                                                line: 696,
                                                column: 25
                                            }
                                        },
                                        {
                                            start: {
                                                line: 696,
                                                column: 29
                                            },
                                            end: {
                                                line: 696,
                                                column: 69
                                            }
                                        },
                                        {
                                            start: {
                                                line: 696,
                                                column: 73
                                            },
                                            end: {
                                                line: 696,
                                                column: 85
                                            }
                                        }
                                    ],
                                    line: 696
                                },
                                '134': {
                                    loc: {
                                        start: {
                                            line: 699,
                                            column: 12
                                        },
                                        end: {
                                            line: 709,
                                            column: 13
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 699,
                                                column: 12
                                            },
                                            end: {
                                                line: 709,
                                                column: 13
                                            }
                                        },
                                        {
                                            start: {
                                                line: 699,
                                                column: 12
                                            },
                                            end: {
                                                line: 709,
                                                column: 13
                                            }
                                        }
                                    ],
                                    line: 699
                                },
                                '135': {
                                    loc: {
                                        start: {
                                            line: 700,
                                            column: 14
                                        },
                                        end: {
                                            line: 704,
                                            column: 15
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 700,
                                                column: 14
                                            },
                                            end: {
                                                line: 704,
                                                column: 15
                                            }
                                        },
                                        {
                                            start: {
                                                line: 700,
                                                column: 14
                                            },
                                            end: {
                                                line: 704,
                                                column: 15
                                            }
                                        }
                                    ],
                                    line: 700
                                },
                                '136': {
                                    loc: {
                                        start: {
                                            line: 705,
                                            column: 14
                                        },
                                        end: {
                                            line: 708,
                                            column: 15
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 705,
                                                column: 14
                                            },
                                            end: {
                                                line: 708,
                                                column: 15
                                            }
                                        },
                                        {
                                            start: {
                                                line: 705,
                                                column: 14
                                            },
                                            end: {
                                                line: 708,
                                                column: 15
                                            }
                                        }
                                    ],
                                    line: 705
                                },
                                '137': {
                                    loc: {
                                        start: {
                                            line: 707,
                                            column: 21
                                        },
                                        end: {
                                            line: 707,
                                            column: 51
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 707,
                                                column: 28
                                            },
                                            end: {
                                                line: 707,
                                                column: 36
                                            }
                                        },
                                        {
                                            start: {
                                                line: 707,
                                                column: 39
                                            },
                                            end: {
                                                line: 707,
                                                column: 51
                                            }
                                        }
                                    ],
                                    line: 707
                                },
                                '138': {
                                    loc: {
                                        start: {
                                            line: 768,
                                            column: 22
                                        },
                                        end: {
                                            line: 768,
                                            column: 43
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 768,
                                                column: 33
                                            },
                                            end: {
                                                line: 768,
                                                column: 43
                                            }
                                        }],
                                    line: 768
                                },
                                '139': {
                                    loc: {
                                        start: {
                                            line: 768,
                                            column: 45
                                        },
                                        end: {
                                            line: 768,
                                            column: 64
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 768,
                                                column: 62
                                            },
                                            end: {
                                                line: 768,
                                                column: 64
                                            }
                                        }],
                                    line: 768
                                },
                                '140': {
                                    loc: {
                                        start: {
                                            line: 768,
                                            column: 66
                                        },
                                        end: {
                                            line: 768,
                                            column: 97
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 768,
                                                column: 89
                                            },
                                            end: {
                                                line: 768,
                                                column: 97
                                            }
                                        }],
                                    line: 768
                                },
                                '141': {
                                    loc: {
                                        start: {
                                            line: 768,
                                            column: 99
                                        },
                                        end: {
                                            line: 768,
                                            column: 117
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 768,
                                                column: 113
                                            },
                                            end: {
                                                line: 768,
                                                column: 117
                                            }
                                        }],
                                    line: 768
                                },
                                '142': {
                                    loc: {
                                        start: {
                                            line: 768,
                                            column: 119
                                        },
                                        end: {
                                            line: 768,
                                            column: 152
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 768,
                                                column: 135
                                            },
                                            end: {
                                                line: 768,
                                                column: 152
                                            }
                                        }],
                                    line: 768
                                },
                                '143': {
                                    loc: {
                                        start: {
                                            line: 768,
                                            column: 154
                                        },
                                        end: {
                                            line: 768,
                                            column: 171
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 768,
                                                column: 167
                                            },
                                            end: {
                                                line: 768,
                                                column: 171
                                            }
                                        }],
                                    line: 768
                                },
                                '144': {
                                    loc: {
                                        start: {
                                            line: 768,
                                            column: 173
                                        },
                                        end: {
                                            line: 768,
                                            column: 193
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 768,
                                                column: 188
                                            },
                                            end: {
                                                line: 768,
                                                column: 193
                                            }
                                        }],
                                    line: 768
                                },
                                '145': {
                                    loc: {
                                        start: {
                                            line: 768,
                                            column: 195
                                        },
                                        end: {
                                            line: 768,
                                            column: 218
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 768,
                                                column: 206
                                            },
                                            end: {
                                                line: 768,
                                                column: 218
                                            }
                                        }],
                                    line: 768
                                },
                                '146': {
                                    loc: {
                                        start: {
                                            line: 769,
                                            column: 4
                                        },
                                        end: {
                                            line: 837,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 769,
                                                column: 4
                                            },
                                            end: {
                                                line: 837,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 769,
                                                column: 4
                                            },
                                            end: {
                                                line: 837,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 769
                                },
                                '147': {
                                    loc: {
                                        start: {
                                            line: 771,
                                            column: 6
                                        },
                                        end: {
                                            line: 802,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 771,
                                                column: 6
                                            },
                                            end: {
                                                line: 802,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 771,
                                                column: 6
                                            },
                                            end: {
                                                line: 802,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 771
                                },
                                '148': {
                                    loc: {
                                        start: {
                                            line: 780,
                                            column: 12
                                        },
                                        end: {
                                            line: 785,
                                            column: 13
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 780,
                                                column: 12
                                            },
                                            end: {
                                                line: 785,
                                                column: 13
                                            }
                                        },
                                        {
                                            start: {
                                                line: 780,
                                                column: 12
                                            },
                                            end: {
                                                line: 785,
                                                column: 13
                                            }
                                        }
                                    ],
                                    line: 780
                                },
                                '149': {
                                    loc: {
                                        start: {
                                            line: 807,
                                            column: 39
                                        },
                                        end: {
                                            line: 807,
                                            column: 104
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 807,
                                                column: 50
                                            },
                                            end: {
                                                line: 807,
                                                column: 79
                                            }
                                        },
                                        {
                                            start: {
                                                line: 807,
                                                column: 82
                                            },
                                            end: {
                                                line: 807,
                                                column: 104
                                            }
                                        }
                                    ],
                                    line: 807
                                },
                                '150': {
                                    loc: {
                                        start: {
                                            line: 811,
                                            column: 8
                                        },
                                        end: {
                                            line: 817,
                                            column: 9
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 811,
                                                column: 8
                                            },
                                            end: {
                                                line: 817,
                                                column: 9
                                            }
                                        },
                                        {
                                            start: {
                                                line: 811,
                                                column: 8
                                            },
                                            end: {
                                                line: 817,
                                                column: 9
                                            }
                                        }
                                    ],
                                    line: 811
                                },
                                '151': {
                                    loc: {
                                        start: {
                                            line: 811,
                                            column: 12
                                        },
                                        end: {
                                            line: 812,
                                            column: 94
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 811,
                                                column: 12
                                            },
                                            end: {
                                                line: 811,
                                                column: 36
                                            }
                                        },
                                        {
                                            start: {
                                                line: 812,
                                                column: 12
                                            },
                                            end: {
                                                line: 812,
                                                column: 94
                                            }
                                        }
                                    ],
                                    line: 811
                                },
                                '152': {
                                    loc: {
                                        start: {
                                            line: 813,
                                            column: 41
                                        },
                                        end: {
                                            line: 813,
                                            column: 100
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 813,
                                                column: 52
                                            },
                                            end: {
                                                line: 813,
                                                column: 78
                                            }
                                        },
                                        {
                                            start: {
                                                line: 813,
                                                column: 81
                                            },
                                            end: {
                                                line: 813,
                                                column: 100
                                            }
                                        }
                                    ],
                                    line: 813
                                },
                                '153': {
                                    loc: {
                                        start: {
                                            line: 819,
                                            column: 28
                                        },
                                        end: {
                                            line: 819,
                                            column: 124
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 819,
                                                column: 39
                                            },
                                            end: {
                                                line: 819,
                                                column: 48
                                            }
                                        },
                                        {
                                            start: {
                                                line: 819,
                                                column: 51
                                            },
                                            end: {
                                                line: 819,
                                                column: 124
                                            }
                                        }
                                    ],
                                    line: 819
                                },
                                '154': {
                                    loc: {
                                        start: {
                                            line: 820,
                                            column: 29
                                        },
                                        end: {
                                            line: 820,
                                            column: 107
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 820,
                                                column: 76
                                            },
                                            end: {
                                                line: 820,
                                                column: 96
                                            }
                                        },
                                        {
                                            start: {
                                                line: 820,
                                                column: 99
                                            },
                                            end: {
                                                line: 820,
                                                column: 107
                                            }
                                        }
                                    ],
                                    line: 820
                                },
                                '155': {
                                    loc: {
                                        start: {
                                            line: 824,
                                            column: 6
                                        },
                                        end: {
                                            line: 836,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 824,
                                                column: 6
                                            },
                                            end: {
                                                line: 836,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 824,
                                                column: 6
                                            },
                                            end: {
                                                line: 836,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 824
                                },
                                '156': {
                                    loc: {
                                        start: {
                                            line: 824,
                                            column: 10
                                        },
                                        end: {
                                            line: 824,
                                            column: 90
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 824,
                                                column: 10
                                            },
                                            end: {
                                                line: 824,
                                                column: 19
                                            }
                                        },
                                        {
                                            start: {
                                                line: 824,
                                                column: 23
                                            },
                                            end: {
                                                line: 824,
                                                column: 33
                                            }
                                        },
                                        {
                                            start: {
                                                line: 824,
                                                column: 37
                                            },
                                            end: {
                                                line: 824,
                                                column: 67
                                            }
                                        },
                                        {
                                            start: {
                                                line: 824,
                                                column: 71
                                            },
                                            end: {
                                                line: 824,
                                                column: 90
                                            }
                                        }
                                    ],
                                    line: 824
                                },
                                '157': {
                                    loc: {
                                        start: {
                                            line: 835,
                                            column: 51
                                        },
                                        end: {
                                            line: 835,
                                            column: 104
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 835,
                                                column: 62
                                            },
                                            end: {
                                                line: 835,
                                                column: 85
                                            }
                                        },
                                        {
                                            start: {
                                                line: 835,
                                                column: 88
                                            },
                                            end: {
                                                line: 835,
                                                column: 104
                                            }
                                        }
                                    ],
                                    line: 835
                                }
                            },
                            s: {
                                '0': 0,
                                '1': 0,
                                '2': 0,
                                '3': 0,
                                '4': 0,
                                '5': 0,
                                '6': 0,
                                '7': 0,
                                '8': 0,
                                '9': 0,
                                '10': 0,
                                '11': 0,
                                '12': 0,
                                '13': 0,
                                '14': 0,
                                '15': 0,
                                '16': 0,
                                '17': 0,
                                '18': 0,
                                '19': 0,
                                '20': 0,
                                '21': 0,
                                '22': 0,
                                '23': 0,
                                '24': 0,
                                '25': 0,
                                '26': 0,
                                '27': 0,
                                '28': 0,
                                '29': 0,
                                '30': 0,
                                '31': 0,
                                '32': 0,
                                '33': 0,
                                '34': 0,
                                '35': 0,
                                '36': 0,
                                '37': 0,
                                '38': 0,
                                '39': 0,
                                '40': 0,
                                '41': 0,
                                '42': 0,
                                '43': 0,
                                '44': 0,
                                '45': 0,
                                '46': 0,
                                '47': 0,
                                '48': 0,
                                '49': 0,
                                '50': 0,
                                '51': 0,
                                '52': 0,
                                '53': 0,
                                '54': 0,
                                '55': 0,
                                '56': 0,
                                '57': 0,
                                '58': 0,
                                '59': 0,
                                '60': 0,
                                '61': 0,
                                '62': 0,
                                '63': 0,
                                '64': 0,
                                '65': 0,
                                '66': 0,
                                '67': 0,
                                '68': 0,
                                '69': 0,
                                '70': 0,
                                '71': 0,
                                '72': 0,
                                '73': 0,
                                '74': 0,
                                '75': 0,
                                '76': 0,
                                '77': 0,
                                '78': 0,
                                '79': 0,
                                '80': 0,
                                '81': 0,
                                '82': 0,
                                '83': 0,
                                '84': 0,
                                '85': 0,
                                '86': 0,
                                '87': 0,
                                '88': 0,
                                '89': 0,
                                '90': 0,
                                '91': 0,
                                '92': 0,
                                '93': 0,
                                '94': 0,
                                '95': 0,
                                '96': 0,
                                '97': 0,
                                '98': 0,
                                '99': 0,
                                '100': 0,
                                '101': 0,
                                '102': 0,
                                '103': 0,
                                '104': 0,
                                '105': 0,
                                '106': 0,
                                '107': 0,
                                '108': 0,
                                '109': 0,
                                '110': 0,
                                '111': 0,
                                '112': 0,
                                '113': 0,
                                '114': 0,
                                '115': 0,
                                '116': 0,
                                '117': 0,
                                '118': 0,
                                '119': 0,
                                '120': 0,
                                '121': 0,
                                '122': 0,
                                '123': 0,
                                '124': 0,
                                '125': 0,
                                '126': 0,
                                '127': 0,
                                '128': 0,
                                '129': 0,
                                '130': 0,
                                '131': 0,
                                '132': 0,
                                '133': 0,
                                '134': 0,
                                '135': 0,
                                '136': 0,
                                '137': 0,
                                '138': 0,
                                '139': 0,
                                '140': 0,
                                '141': 0,
                                '142': 0,
                                '143': 0,
                                '144': 0,
                                '145': 0,
                                '146': 0,
                                '147': 0,
                                '148': 0,
                                '149': 0,
                                '150': 0,
                                '151': 0,
                                '152': 0,
                                '153': 0,
                                '154': 0,
                                '155': 0,
                                '156': 0,
                                '157': 0,
                                '158': 0,
                                '159': 0,
                                '160': 0,
                                '161': 0,
                                '162': 0,
                                '163': 0,
                                '164': 0,
                                '165': 0,
                                '166': 0,
                                '167': 0,
                                '168': 0,
                                '169': 0,
                                '170': 0,
                                '171': 0,
                                '172': 0,
                                '173': 0,
                                '174': 0,
                                '175': 0,
                                '176': 0,
                                '177': 0,
                                '178': 0,
                                '179': 0,
                                '180': 0,
                                '181': 0,
                                '182': 0,
                                '183': 0,
                                '184': 0,
                                '185': 0,
                                '186': 0,
                                '187': 0,
                                '188': 0,
                                '189': 0,
                                '190': 0,
                                '191': 0,
                                '192': 0,
                                '193': 0,
                                '194': 0,
                                '195': 0,
                                '196': 0,
                                '197': 0,
                                '198': 0,
                                '199': 0,
                                '200': 0,
                                '201': 0,
                                '202': 0,
                                '203': 0,
                                '204': 0,
                                '205': 0,
                                '206': 0,
                                '207': 0,
                                '208': 0,
                                '209': 0,
                                '210': 0,
                                '211': 0,
                                '212': 0,
                                '213': 0,
                                '214': 0,
                                '215': 0,
                                '216': 0,
                                '217': 0,
                                '218': 0,
                                '219': 0,
                                '220': 0,
                                '221': 0,
                                '222': 0,
                                '223': 0,
                                '224': 0,
                                '225': 0,
                                '226': 0,
                                '227': 0,
                                '228': 0,
                                '229': 0,
                                '230': 0,
                                '231': 0,
                                '232': 0,
                                '233': 0,
                                '234': 0,
                                '235': 0,
                                '236': 0,
                                '237': 0,
                                '238': 0,
                                '239': 0,
                                '240': 0,
                                '241': 0,
                                '242': 0,
                                '243': 0,
                                '244': 0,
                                '245': 0,
                                '246': 0,
                                '247': 0,
                                '248': 0,
                                '249': 0,
                                '250': 0,
                                '251': 0,
                                '252': 0,
                                '253': 0,
                                '254': 0,
                                '255': 0,
                                '256': 0,
                                '257': 0,
                                '258': 0,
                                '259': 0,
                                '260': 0,
                                '261': 0,
                                '262': 0,
                                '263': 0,
                                '264': 0,
                                '265': 0,
                                '266': 0,
                                '267': 0,
                                '268': 0,
                                '269': 0,
                                '270': 0,
                                '271': 0,
                                '272': 0,
                                '273': 0,
                                '274': 0,
                                '275': 0,
                                '276': 0,
                                '277': 0,
                                '278': 0,
                                '279': 0,
                                '280': 0,
                                '281': 0,
                                '282': 0,
                                '283': 0,
                                '284': 0,
                                '285': 0,
                                '286': 0,
                                '287': 0,
                                '288': 0,
                                '289': 0,
                                '290': 0,
                                '291': 0,
                                '292': 0,
                                '293': 0,
                                '294': 0,
                                '295': 0,
                                '296': 0,
                                '297': 0,
                                '298': 0,
                                '299': 0,
                                '300': 0,
                                '301': 0,
                                '302': 0,
                                '303': 0,
                                '304': 0,
                                '305': 0,
                                '306': 0,
                                '307': 0,
                                '308': 0,
                                '309': 0,
                                '310': 0,
                                '311': 0,
                                '312': 0,
                                '313': 0,
                                '314': 0,
                                '315': 0,
                                '316': 0,
                                '317': 0,
                                '318': 0,
                                '319': 0,
                                '320': 0,
                                '321': 0,
                                '322': 0,
                                '323': 0,
                                '324': 0,
                                '325': 0,
                                '326': 0,
                                '327': 0,
                                '328': 0,
                                '329': 0,
                                '330': 0,
                                '331': 0,
                                '332': 0,
                                '333': 0,
                                '334': 0,
                                '335': 0,
                                '336': 0,
                                '337': 0,
                                '338': 0,
                                '339': 0,
                                '340': 0,
                                '341': 0,
                                '342': 0,
                                '343': 0,
                                '344': 0,
                                '345': 0,
                                '346': 0,
                                '347': 0,
                                '348': 0,
                                '349': 0,
                                '350': 0,
                                '351': 0,
                                '352': 0,
                                '353': 0,
                                '354': 0,
                                '355': 0,
                                '356': 0,
                                '357': 0,
                                '358': 0,
                                '359': 0,
                                '360': 0,
                                '361': 0,
                                '362': 0,
                                '363': 0,
                                '364': 0,
                                '365': 0,
                                '366': 0,
                                '367': 0,
                                '368': 0,
                                '369': 0,
                                '370': 0,
                                '371': 0,
                                '372': 0,
                                '373': 0,
                                '374': 0,
                                '375': 0,
                                '376': 0,
                                '377': 0,
                                '378': 0,
                                '379': 0,
                                '380': 0,
                                '381': 0,
                                '382': 0,
                                '383': 0,
                                '384': 0,
                                '385': 0,
                                '386': 0,
                                '387': 0,
                                '388': 0,
                                '389': 0,
                                '390': 0,
                                '391': 0,
                                '392': 0,
                                '393': 0,
                                '394': 0,
                                '395': 0,
                                '396': 0,
                                '397': 0,
                                '398': 0,
                                '399': 0,
                                '400': 0,
                                '401': 0,
                                '402': 0,
                                '403': 0,
                                '404': 0,
                                '405': 0,
                                '406': 0,
                                '407': 0,
                                '408': 0,
                                '409': 0,
                                '410': 0,
                                '411': 0,
                                '412': 0,
                                '413': 0,
                                '414': 0,
                                '415': 0,
                                '416': 0,
                                '417': 0,
                                '418': 0,
                                '419': 0,
                                '420': 0,
                                '421': 0,
                                '422': 0,
                                '423': 0,
                                '424': 0,
                                '425': 0,
                                '426': 0,
                                '427': 0,
                                '428': 0,
                                '429': 0,
                                '430': 0,
                                '431': 0,
                                '432': 0,
                                '433': 0,
                                '434': 0,
                                '435': 0,
                                '436': 0,
                                '437': 0,
                                '438': 0,
                                '439': 0,
                                '440': 0,
                                '441': 0,
                                '442': 0,
                                '443': 0,
                                '444': 0,
                                '445': 0,
                                '446': 0,
                                '447': 0,
                                '448': 0,
                                '449': 0,
                                '450': 0,
                                '451': 0,
                                '452': 0,
                                '453': 0,
                                '454': 0,
                                '455': 0,
                                '456': 0,
                                '457': 0,
                                '458': 0,
                                '459': 0,
                                '460': 0,
                                '461': 0,
                                '462': 0,
                                '463': 0
                            },
                            f: {
                                '0': 0,
                                '1': 0,
                                '2': 0,
                                '3': 0,
                                '4': 0,
                                '5': 0,
                                '6': 0,
                                '7': 0,
                                '8': 0,
                                '9': 0,
                                '10': 0,
                                '11': 0,
                                '12': 0,
                                '13': 0,
                                '14': 0,
                                '15': 0,
                                '16': 0,
                                '17': 0,
                                '18': 0,
                                '19': 0,
                                '20': 0,
                                '21': 0,
                                '22': 0,
                                '23': 0,
                                '24': 0,
                                '25': 0,
                                '26': 0,
                                '27': 0,
                                '28': 0,
                                '29': 0,
                                '30': 0,
                                '31': 0,
                                '32': 0,
                                '33': 0
                            },
                            b: {
                                '0': [
                                    0,
                                    0
                                ],
                                '1': [
                                    0,
                                    0
                                ],
                                '2': [
                                    0,
                                    0
                                ],
                                '3': [
                                    0,
                                    0
                                ],
                                '4': [
                                    0,
                                    0
                                ],
                                '5': [
                                    0,
                                    0
                                ],
                                '6': [
                                    0,
                                    0
                                ],
                                '7': [
                                    0,
                                    0
                                ],
                                '8': [
                                    0,
                                    0
                                ],
                                '9': [
                                    0,
                                    0,
                                    0
                                ],
                                '10': [
                                    0,
                                    0
                                ],
                                '11': [
                                    0,
                                    0
                                ],
                                '12': [
                                    0,
                                    0
                                ],
                                '13': [
                                    0,
                                    0,
                                    0
                                ],
                                '14': [
                                    0,
                                    0
                                ],
                                '15': [
                                    0,
                                    0
                                ],
                                '16': [
                                    0,
                                    0
                                ],
                                '17': [
                                    0,
                                    0
                                ],
                                '18': [
                                    0,
                                    0
                                ],
                                '19': [
                                    0,
                                    0
                                ],
                                '20': [
                                    0,
                                    0
                                ],
                                '21': [
                                    0,
                                    0
                                ],
                                '22': [
                                    0,
                                    0
                                ],
                                '23': [
                                    0,
                                    0
                                ],
                                '24': [0],
                                '25': [
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                '26': [
                                    0,
                                    0
                                ],
                                '27': [
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                '28': [
                                    0,
                                    0
                                ],
                                '29': [
                                    0,
                                    0
                                ],
                                '30': [
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                '31': [
                                    0,
                                    0
                                ],
                                '32': [
                                    0,
                                    0
                                ],
                                '33': [
                                    0,
                                    0
                                ],
                                '34': [
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                '35': [
                                    0,
                                    0
                                ],
                                '36': [
                                    0,
                                    0
                                ],
                                '37': [
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                '38': [
                                    0,
                                    0
                                ],
                                '39': [
                                    0,
                                    0
                                ],
                                '40': [
                                    0,
                                    0
                                ],
                                '41': [
                                    0,
                                    0
                                ],
                                '42': [
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                '43': [
                                    0,
                                    0
                                ],
                                '44': [
                                    0,
                                    0
                                ],
                                '45': [
                                    0,
                                    0
                                ],
                                '46': [
                                    0,
                                    0
                                ],
                                '47': [
                                    0,
                                    0
                                ],
                                '48': [
                                    0,
                                    0
                                ],
                                '49': [
                                    0,
                                    0
                                ],
                                '50': [
                                    0,
                                    0
                                ],
                                '51': [
                                    0,
                                    0
                                ],
                                '52': [
                                    0,
                                    0
                                ],
                                '53': [
                                    0,
                                    0
                                ],
                                '54': [
                                    0,
                                    0
                                ],
                                '55': [
                                    0,
                                    0
                                ],
                                '56': [
                                    0,
                                    0
                                ],
                                '57': [
                                    0,
                                    0,
                                    0
                                ],
                                '58': [
                                    0,
                                    0
                                ],
                                '59': [
                                    0,
                                    0
                                ],
                                '60': [
                                    0,
                                    0
                                ],
                                '61': [
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                '62': [
                                    0,
                                    0
                                ],
                                '63': [
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                '64': [
                                    0,
                                    0
                                ],
                                '65': [
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                '66': [
                                    0,
                                    0
                                ],
                                '67': [
                                    0,
                                    0
                                ],
                                '68': [
                                    0,
                                    0
                                ],
                                '69': [
                                    0,
                                    0
                                ],
                                '70': [
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                '71': [
                                    0,
                                    0
                                ],
                                '72': [
                                    0,
                                    0
                                ],
                                '73': [
                                    0,
                                    0
                                ],
                                '74': [
                                    0,
                                    0
                                ],
                                '75': [
                                    0,
                                    0,
                                    0
                                ],
                                '76': [
                                    0,
                                    0
                                ],
                                '77': [
                                    0,
                                    0
                                ],
                                '78': [0],
                                '79': [
                                    0,
                                    0
                                ],
                                '80': [
                                    0,
                                    0
                                ],
                                '81': [
                                    0,
                                    0,
                                    0
                                ],
                                '82': [
                                    0,
                                    0
                                ],
                                '83': [
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                '84': [
                                    0,
                                    0
                                ],
                                '85': [
                                    0,
                                    0
                                ],
                                '86': [
                                    0,
                                    0
                                ],
                                '87': [
                                    0,
                                    0
                                ],
                                '88': [
                                    0,
                                    0
                                ],
                                '89': [
                                    0,
                                    0
                                ],
                                '90': [
                                    0,
                                    0
                                ],
                                '91': [0],
                                '92': [0],
                                '93': [0],
                                '94': [0],
                                '95': [
                                    0,
                                    0
                                ],
                                '96': [
                                    0,
                                    0
                                ],
                                '97': [
                                    0,
                                    0
                                ],
                                '98': [
                                    0,
                                    0
                                ],
                                '99': [
                                    0,
                                    0
                                ],
                                '100': [
                                    0,
                                    0
                                ],
                                '101': [
                                    0,
                                    0
                                ],
                                '102': [
                                    0,
                                    0
                                ],
                                '103': [
                                    0,
                                    0
                                ],
                                '104': [
                                    0,
                                    0
                                ],
                                '105': [
                                    0,
                                    0
                                ],
                                '106': [
                                    0,
                                    0
                                ],
                                '107': [
                                    0,
                                    0
                                ],
                                '108': [
                                    0,
                                    0
                                ],
                                '109': [
                                    0,
                                    0
                                ],
                                '110': [
                                    0,
                                    0
                                ],
                                '111': [
                                    0,
                                    0
                                ],
                                '112': [
                                    0,
                                    0
                                ],
                                '113': [
                                    0,
                                    0
                                ],
                                '114': [
                                    0,
                                    0
                                ],
                                '115': [
                                    0,
                                    0
                                ],
                                '116': [
                                    0,
                                    0
                                ],
                                '117': [
                                    0,
                                    0
                                ],
                                '118': [
                                    0,
                                    0
                                ],
                                '119': [
                                    0,
                                    0
                                ],
                                '120': [
                                    0,
                                    0
                                ],
                                '121': [
                                    0,
                                    0
                                ],
                                '122': [
                                    0,
                                    0
                                ],
                                '123': [
                                    0,
                                    0
                                ],
                                '124': [
                                    0,
                                    0
                                ],
                                '125': [
                                    0,
                                    0
                                ],
                                '126': [
                                    0,
                                    0
                                ],
                                '127': [
                                    0,
                                    0
                                ],
                                '128': [
                                    0,
                                    0,
                                    0
                                ],
                                '129': [
                                    0,
                                    0
                                ],
                                '130': [
                                    0,
                                    0
                                ],
                                '131': [
                                    0,
                                    0
                                ],
                                '132': [
                                    0,
                                    0
                                ],
                                '133': [
                                    0,
                                    0,
                                    0
                                ],
                                '134': [
                                    0,
                                    0
                                ],
                                '135': [
                                    0,
                                    0
                                ],
                                '136': [
                                    0,
                                    0
                                ],
                                '137': [
                                    0,
                                    0
                                ],
                                '138': [0],
                                '139': [0],
                                '140': [0],
                                '141': [0],
                                '142': [0],
                                '143': [0],
                                '144': [0],
                                '145': [0],
                                '146': [
                                    0,
                                    0
                                ],
                                '147': [
                                    0,
                                    0
                                ],
                                '148': [
                                    0,
                                    0
                                ],
                                '149': [
                                    0,
                                    0
                                ],
                                '150': [
                                    0,
                                    0
                                ],
                                '151': [
                                    0,
                                    0
                                ],
                                '152': [
                                    0,
                                    0
                                ],
                                '153': [
                                    0,
                                    0
                                ],
                                '154': [
                                    0,
                                    0
                                ],
                                '155': [
                                    0,
                                    0
                                ],
                                '156': [
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                '157': [
                                    0,
                                    0
                                ]
                            },
                            _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
                        }, coverage = global[gcv] || (global[gcv] = {});
                    if (coverage[path] && coverage[path].hash === hash) {
                        return coverage[path];
                    }
                    coverageData.hash = hash;
                    return coverage[path] = coverageData;
                }();
                cov_83ujap16b.s[0]++;
                module.exports = function (espree, escodegen, htmlparser, createHash, convert) {
                    cov_83ujap16b.f[0]++;
                    const espreeOptionsForTarget = (cov_83ujap16b.s[1]++, {
                        loc: true,
                        range: true,
                        tokens: true,
                        comment: true,
                        ecmaVersion: 8
                    });
                    const espreeOptionsForTargetCompact = (cov_83ujap16b.s[2]++, {
                        loc: false,
                        range: false,
                        tokens: false,
                        comment: false,
                        ecmaVersion: 8
                    });
                    const espreeOptions = (cov_83ujap16b.s[3]++, {
                        loc: false,
                        range: false,
                        tokens: false,
                        comment: false,
                        ecmaVersion: 8
                    });
                    const espreeModuleOptions = (cov_83ujap16b.s[4]++, {
                        loc: true,
                        range: true,
                        tokens: true,
                        comment: true,
                        ecmaVersion: 8,
                        sourceType: 'module'
                    });
                    const espreeModuleOptionsCompact = (cov_83ujap16b.s[5]++, {
                        loc: false,
                        range: false,
                        tokens: false,
                        comment: false,
                        ecmaVersion: 8,
                        sourceType: 'module'
                    });
                    let hookNameForServiceWorker = (cov_83ujap16b.s[6]++, '__hook__');
                    function getHookNameForServiceWorker() {
                        cov_83ujap16b.f[1]++;
                        cov_83ujap16b.s[7]++;
                        return hookNameForServiceWorker;
                    }
                    let contextGeneratorName = (cov_83ujap16b.s[8]++, 'method');
                    function getContextGeneratorName() {
                        cov_83ujap16b.f[2]++;
                        cov_83ujap16b.s[9]++;
                        return contextGeneratorName;
                    }
                    let discardHookErrors = (cov_83ujap16b.s[10]++, true);
                    function getDiscardHookErrors() {
                        cov_83ujap16b.f[3]++;
                        cov_83ujap16b.s[11]++;
                        return discardHookErrors;
                    }
                    let hookProperty = (cov_83ujap16b.s[12]++, true);
                    function getHookProperty() {
                        cov_83ujap16b.f[4]++;
                        cov_83ujap16b.s[13]++;
                        return hookProperty;
                    }
                    function setHookProperty(_hookProperty) {
                        cov_83ujap16b.f[5]++;
                        cov_83ujap16b.s[14]++;
                        return hookProperty = _hookProperty;
                    }
                    let compact = (cov_83ujap16b.s[15]++, false);
                    function getCompact() {
                        cov_83ujap16b.f[6]++;
                        cov_83ujap16b.s[16]++;
                        return compact;
                    }
                    function setCompact(_compact) {
                        cov_83ujap16b.f[7]++;
                        cov_83ujap16b.s[17]++;
                        return compact = _compact;
                    }
                    let hookWorkers = (cov_83ujap16b.s[18]++, []);
                    let hookWorkerCount = (cov_83ujap16b.s[19]++, 4);
                    function getHookId(seed) {
                        cov_83ujap16b.f[8]++;
                        let hash = (cov_83ujap16b.s[20]++, hook.utils.createHash('sha256'));
                        cov_83ujap16b.s[21]++;
                        hash.update(Math.random() + seed);
                        cov_83ujap16b.s[22]++;
                        return hash.digest('hex');
                    }
                    function getHookWorkers() {
                        cov_83ujap16b.f[9]++;
                        cov_83ujap16b.s[23]++;
                        return hookWorkers;
                    }
                    function setHookWorkers(_hookWorkers) {
                        cov_83ujap16b.f[10]++;
                        cov_83ujap16b.s[24]++;
                        hookWorkers = _hookWorkers;
                        cov_83ujap16b.s[25]++;
                        console.log('setHookWorkers', hookWorkers);
                        cov_83ujap16b.s[26]++;
                        hookWorkers.forEach(function (worker) {
                            cov_83ujap16b.f[11]++;
                            cov_83ujap16b.s[27]++;
                            worker.tasks = {};
                            cov_83ujap16b.s[28]++;
                            worker.port.onmessage = function (event) {
                                cov_83ujap16b.f[12]++;
                                let message = (cov_83ujap16b.s[29]++, JSON.parse(event.data));
                                let id = (cov_83ujap16b.s[30]++, message[0]);
                                let status = (cov_83ujap16b.s[31]++, message[1]);
                                cov_83ujap16b.s[32]++;
                                if (typeof worker.tasks[id] === 'object') {
                                    cov_83ujap16b.b[0][0]++;
                                    cov_83ujap16b.s[33]++;
                                    if (status === 'success') {
                                        cov_83ujap16b.b[1][0]++;
                                        let result = (cov_83ujap16b.s[34]++, message[2]);
                                        cov_83ujap16b.s[35]++;
                                        worker.tasks[id].status = status;
                                        cov_83ujap16b.s[36]++;
                                        worker.tasks[id].result = result;
                                        cov_83ujap16b.s[37]++;
                                        worker.tasks[id].callback(worker.tasks[id]);
                                    } else {
                                        cov_83ujap16b.b[1][1]++;
                                        let error = (cov_83ujap16b.s[38]++, message[2]);
                                        cov_83ujap16b.s[39]++;
                                        worker.tasks[id].status = status;
                                        cov_83ujap16b.s[40]++;
                                        worker.tasks[id].error = error;
                                        cov_83ujap16b.s[41]++;
                                        console.error('response from Hook Worker for ' + id + ':' + status + ':' + error);
                                        cov_83ujap16b.s[42]++;
                                        worker.tasks[id].callback(worker.tasks[id]);
                                    }
                                } else {
                                    cov_83ujap16b.b[0][1]++;
                                    cov_83ujap16b.s[43]++;
                                    console.error('response with unknown id ' + id + ' from Hook Worker');
                                }
                            };
                        });
                    }
                    function setupHookWorkers() {
                        cov_83ujap16b.f[13]++;
                        cov_83ujap16b.s[44]++;
                        if ((cov_83ujap16b.b[3][0]++, hookWorkers.length === 0) && (cov_83ujap16b.b[3][1]++, hook.parameters.hookWorker)) {
                            cov_83ujap16b.b[2][0]++;
                            let transferChannels = (cov_83ujap16b.s[45]++, []);
                            cov_83ujap16b.s[46]++;
                            for (let i = 0; i < hookWorkerCount; i++) {
                                let worker = (cov_83ujap16b.s[47]++, {
                                    worker: new Worker(hook.parameters.hookWorker),
                                    channel: new MessageChannel()
                                });
                                cov_83ujap16b.s[48]++;
                                worker.worker.postMessage('channel', [worker.channel.port2]);
                                cov_83ujap16b.s[49]++;
                                hookWorkers.push(worker);
                                cov_83ujap16b.s[50]++;
                                transferChannels.push(worker.channel.port1);
                            }
                            cov_83ujap16b.s[51]++;
                            navigator.serviceWorker.controller.postMessage('channel', transferChannels);
                            cov_83ujap16b.s[52]++;
                            addEventListener('unload', function (event) {
                                cov_83ujap16b.f[14]++;
                                cov_83ujap16b.s[53]++;
                                navigator.serviceWorker.controller.postMessage('unload');
                            });
                        } else {
                            cov_83ujap16b.b[2][1]++;
                        }
                    }
                    function getBestHookWorker() {
                        cov_83ujap16b.f[15]++;
                        let worker = (cov_83ujap16b.s[54]++, null);
                        cov_83ujap16b.s[55]++;
                        if ((cov_83ujap16b.b[5][0]++, Array.isArray(hookWorkers)) && (cov_83ujap16b.b[5][1]++, hookWorkers.length > 0)) {
                            cov_83ujap16b.b[4][0]++;
                            let minIndex = (cov_83ujap16b.s[56]++, 0);
                            let minTaskQueueSize = (cov_83ujap16b.s[57]++, hookWorkers[minIndex].taskQueueSize);
                            cov_83ujap16b.s[58]++;
                            for (let i = minIndex; i < hookWorkers.length; i++) {
                                cov_83ujap16b.s[59]++;
                                if (hookWorkers[i].taskQueueSize < minTaskQueueSize) {
                                    cov_83ujap16b.b[6][0]++;
                                    cov_83ujap16b.s[60]++;
                                    minIndex = i;
                                    cov_83ujap16b.s[61]++;
                                    minTaskQueueSize = hookWorkers[i].taskQueueSize;
                                } else {
                                    cov_83ujap16b.b[6][1]++;
                                }
                            }
                            cov_83ujap16b.s[62]++;
                            worker = hookWorkers[minIndex];
                        } else {
                            cov_83ujap16b.b[4][1]++;
                        }
                        cov_83ujap16b.s[63]++;
                        return worker;
                    }
                    function setScriptHookProperty(script, url) {
                        cov_83ujap16b.f[16]++;
                        cov_83ujap16b.s[64]++;
                        if (url.href.match(/\/hook[.]min[.]js/)) {
                            cov_83ujap16b.b[7][0]++;
                            let match = (cov_83ujap16b.s[65]++, script.match(/let[ ]hookProperty[ ]?=[ ]?([^;]*);/));
                            let value = (cov_83ujap16b.s[66]++, 'true');
                            cov_83ujap16b.s[67]++;
                            if (match) {
                                cov_83ujap16b.b[8][0]++;
                                cov_83ujap16b.s[68]++;
                                switch (match[1]) {
                                default:
                                    cov_83ujap16b.b[9][0]++;
                                case 'true':
                                    cov_83ujap16b.b[9][1]++;
                                    cov_83ujap16b.s[69]++;
                                    value = getHookProperty() ? (cov_83ujap16b.b[10][0]++, 'true') : (cov_83ujap16b.b[10][1]++, '!!!1');
                                    cov_83ujap16b.s[70]++;
                                    break;
                                case '!0':
                                    cov_83ujap16b.b[9][2]++;
                                    cov_83ujap16b.s[71]++;
                                    value = getHookProperty() ? (cov_83ujap16b.b[11][0]++, '!0') : (cov_83ujap16b.b[11][1]++, '!1');
                                    cov_83ujap16b.s[72]++;
                                    break;
                                }
                            } else {
                                cov_83ujap16b.b[8][1]++;
                            }
                            cov_83ujap16b.s[73]++;
                            script = script.replace(/let([ ])hookProperty([ ]?)=([ ]?)([^;]*);/g, 'let' + '$1hookProperty$2=$3' + value + ';');
                            let match2 = (cov_83ujap16b.s[74]++, script.match(/let[ ]compact[ ]?=[ ]?([^;]*);/));
                            let value2 = (cov_83ujap16b.s[75]++, 'false');
                            cov_83ujap16b.s[76]++;
                            if (match2) {
                                cov_83ujap16b.b[12][0]++;
                                cov_83ujap16b.s[77]++;
                                switch (match2[1]) {
                                default:
                                    cov_83ujap16b.b[13][0]++;
                                case 'false':
                                    cov_83ujap16b.b[13][1]++;
                                    cov_83ujap16b.s[78]++;
                                    value2 = getCompact() ? (cov_83ujap16b.b[14][0]++, 'true ') : (cov_83ujap16b.b[14][1]++, 'false');
                                    cov_83ujap16b.s[79]++;
                                    break;
                                case '!1':
                                    cov_83ujap16b.b[13][2]++;
                                    cov_83ujap16b.s[80]++;
                                    value2 = getCompact() ? (cov_83ujap16b.b[15][0]++, '!0') : (cov_83ujap16b.b[15][1]++, '!1');
                                    cov_83ujap16b.s[81]++;
                                    break;
                                }
                            } else {
                                cov_83ujap16b.b[12][1]++;
                            }
                            cov_83ujap16b.s[82]++;
                            script = script.replace(/let([ ])compact([ ]?)=([ ]?)([^;]*);/g, 'let' + '$1compact$2=$3' + value2 + ';');
                        } else {
                            cov_83ujap16b.b[7][1]++;
                        }
                        cov_83ujap16b.s[83]++;
                        return script;
                    }
                    function _trimStartEndRaw(ast) {
                        cov_83ujap16b.f[17]++;
                        cov_83ujap16b.s[84]++;
                        if ((cov_83ujap16b.b[17][0]++, ast) && (cov_83ujap16b.b[17][1]++, typeof ast === 'object')) {
                            cov_83ujap16b.b[16][0]++;
                            cov_83ujap16b.s[85]++;
                            delete ast.start;
                            cov_83ujap16b.s[86]++;
                            delete ast.end;
                            cov_83ujap16b.s[87]++;
                            delete ast.raw;
                        } else {
                            cov_83ujap16b.b[16][1]++;
                        }
                        cov_83ujap16b.s[88]++;
                        for (let target in ast) {
                            cov_83ujap16b.s[89]++;
                            if (ast[target]) {
                                cov_83ujap16b.b[18][0]++;
                                cov_83ujap16b.s[90]++;
                                if (Array.isArray(ast[target])) {
                                    cov_83ujap16b.b[19][0]++;
                                    cov_83ujap16b.s[91]++;
                                    for (let i = 0; i < ast[target].length; i++) {
                                        let item = (cov_83ujap16b.s[92]++, ast[target][i]);
                                        cov_83ujap16b.s[93]++;
                                        if ((cov_83ujap16b.b[21][0]++, item) && (cov_83ujap16b.b[21][1]++, typeof item === 'object')) {
                                            cov_83ujap16b.b[20][0]++;
                                            cov_83ujap16b.s[94]++;
                                            _trimStartEndRaw(ast[target][i]);
                                        } else {
                                            cov_83ujap16b.b[20][1]++;
                                        }
                                    }
                                } else {
                                    cov_83ujap16b.b[19][1]++;
                                    cov_83ujap16b.s[95]++;
                                    if (typeof ast[target] === 'object') {
                                        cov_83ujap16b.b[22][0]++;
                                        cov_83ujap16b.s[96]++;
                                        _trimStartEndRaw(ast[target]);
                                    } else {
                                        cov_83ujap16b.b[22][1]++;
                                    }
                                }
                            } else {
                                cov_83ujap16b.b[18][1]++;
                            }
                        }
                        cov_83ujap16b.s[97]++;
                        return ast;
                    }
                    let _espreeCache = (cov_83ujap16b.s[98]++, {});
                    const baseHookName = (cov_83ujap16b.s[99]++, '_X_hookName_X_');
                    const baseContext = (cov_83ujap16b.s[100]++, 'X_X_XcontextX_X_X');
                    function _espreeParse(code, hookName, context) {
                        cov_83ujap16b.f[18]++;
                        cov_83ujap16b.s[101]++;
                        if (!_espreeCache[code]) {
                            cov_83ujap16b.b[23][0]++;
                            cov_83ujap16b.s[102]++;
                            _espreeCache[code] = JSON.stringify(_trimStartEndRaw(espree.parse(code, espreeOptions).body[0]), null, 0);
                        } else {
                            cov_83ujap16b.b[23][1]++;
                        }
                        cov_83ujap16b.s[103]++;
                        return JSON.parse(_espreeCache[code].replace(baseHookName, hookName).replace(baseContext, context));
                    }
                    function _preprocess(ast, isConstructor = (cov_83ujap16b.b[24][0]++, false), hookName, astPath, contextGeneratorName, contextGenerator, metaHooking, _hookProperty, _sourceMap) {
                        cov_83ujap16b.f[19]++;
                        let context, template, f, params, body, wrapper, target, child, t, index, l, item;
                        cov_83ujap16b.s[104]++;
                        switch (ast.type) {
                        case 'MemberExpression':
                            cov_83ujap16b.b[25][0]++;
                            cov_83ujap16b.s[105]++;
                            if ((cov_83ujap16b.b[27][0]++, _hookProperty) && (cov_83ujap16b.b[27][1]++, typeof ast.object === 'object') && (cov_83ujap16b.b[27][2]++, ast.object.type !== 'Super') && (cov_83ujap16b.b[27][3]++, typeof ast.property === 'object')) {
                                cov_83ujap16b.b[26][0]++;
                                cov_83ujap16b.s[106]++;
                                context = contextGenerator(astPath).replace(/\'/g, '\\\'');
                                cov_83ujap16b.s[107]++;
                                template = _espreeParse('_X_hookName_X_(\'.\', o, [\'p\'], \'X_X_XcontextX_X_X\')', hookName, context);
                                cov_83ujap16b.s[108]++;
                                f = template.expression;
                                cov_83ujap16b.s[109]++;
                                params = f.arguments[2].elements;
                                cov_83ujap16b.s[110]++;
                                f.arguments[1] = ast.object;
                                cov_83ujap16b.s[111]++;
                                if (ast.computed) {
                                    cov_83ujap16b.b[28][0]++;
                                    cov_83ujap16b.s[112]++;
                                    params[0] = ast.property;
                                } else {
                                    cov_83ujap16b.b[28][1]++;
                                    cov_83ujap16b.s[113]++;
                                    params[0].value = ast.property.name;
                                    cov_83ujap16b.s[114]++;
                                    params[0].start = ast.property.start;
                                    cov_83ujap16b.s[115]++;
                                    params[0].end = ast.property.end;
                                    cov_83ujap16b.s[116]++;
                                    delete params[0].raw;
                                }
                                cov_83ujap16b.s[117]++;
                                delete ast.object;
                                cov_83ujap16b.s[118]++;
                                delete ast.property;
                                cov_83ujap16b.s[119]++;
                                delete ast.computed;
                                cov_83ujap16b.s[120]++;
                                Object.assign(ast, f);
                            } else {
                                cov_83ujap16b.b[26][1]++;
                            }
                            cov_83ujap16b.s[121]++;
                            break;
                        case 'UpdateExpression':
                            cov_83ujap16b.b[25][1]++;
                            cov_83ujap16b.s[122]++;
                            if ((cov_83ujap16b.b[30][0]++, _hookProperty) && (cov_83ujap16b.b[30][1]++, typeof ast.operator === 'string') && (cov_83ujap16b.b[30][2]++, typeof ast.prefix === 'boolean') && (cov_83ujap16b.b[30][3]++, typeof ast.argument === 'object') && (cov_83ujap16b.b[30][4]++, ast.argument.type === 'MemberExpression')) {
                                cov_83ujap16b.b[29][0]++;
                                cov_83ujap16b.s[123]++;
                                context = contextGenerator(astPath).replace(/\'/g, '\\\'');
                                cov_83ujap16b.s[124]++;
                                template = _espreeParse('_X_hookName_X_(\'op\', o, [\'p\'], \'X_X_XcontextX_X_X\')', hookName, context);
                                cov_83ujap16b.s[125]++;
                                f = template.expression;
                                cov_83ujap16b.s[126]++;
                                params = f.arguments[2].elements;
                                cov_83ujap16b.s[127]++;
                                f.arguments[0].value = ast.prefix ? (cov_83ujap16b.b[31][0]++, ast.operator + 'p') : (cov_83ujap16b.b[31][1]++, 'p' + ast.operator);
                                cov_83ujap16b.s[128]++;
                                f.arguments[1] = ast.argument.object;
                                cov_83ujap16b.s[129]++;
                                if (ast.argument.computed) {
                                    cov_83ujap16b.b[32][0]++;
                                    cov_83ujap16b.s[130]++;
                                    params[0] = ast.argument.property;
                                } else {
                                    cov_83ujap16b.b[32][1]++;
                                    cov_83ujap16b.s[131]++;
                                    params[0].value = ast.argument.property.name;
                                    cov_83ujap16b.s[132]++;
                                    delete params[0].raw;
                                }
                                cov_83ujap16b.s[133]++;
                                delete ast.operator;
                                cov_83ujap16b.s[134]++;
                                delete ast.prefix;
                                cov_83ujap16b.s[135]++;
                                delete ast.argument;
                                cov_83ujap16b.s[136]++;
                                Object.assign(ast, f);
                            } else {
                                cov_83ujap16b.b[29][1]++;
                            }
                            cov_83ujap16b.s[137]++;
                            break;
                        case 'UnaryExpression':
                            cov_83ujap16b.b[25][2]++;
                            cov_83ujap16b.s[138]++;
                            if ((cov_83ujap16b.b[34][0]++, _hookProperty) && (cov_83ujap16b.b[34][1]++, ast.operator === 'delete') && (cov_83ujap16b.b[34][2]++, ast.prefix === true) && (cov_83ujap16b.b[34][3]++, typeof ast.argument === 'object') && (cov_83ujap16b.b[34][4]++, ast.argument.type === 'MemberExpression')) {
                                cov_83ujap16b.b[33][0]++;
                                cov_83ujap16b.s[139]++;
                                context = contextGenerator(astPath).replace(/\'/g, '\\\'');
                                cov_83ujap16b.s[140]++;
                                template = _espreeParse('_X_hookName_X_(\'op\', o, [\'p\'], \'X_X_XcontextX_X_X\')', hookName, context);
                                cov_83ujap16b.s[141]++;
                                f = template.expression;
                                cov_83ujap16b.s[142]++;
                                params = f.arguments[2].elements;
                                cov_83ujap16b.s[143]++;
                                f.arguments[0].value = ast.operator;
                                cov_83ujap16b.s[144]++;
                                f.arguments[1] = ast.argument.object;
                                cov_83ujap16b.s[145]++;
                                if (ast.argument.computed) {
                                    cov_83ujap16b.b[35][0]++;
                                    cov_83ujap16b.s[146]++;
                                    params[0] = ast.argument.property;
                                } else {
                                    cov_83ujap16b.b[35][1]++;
                                    cov_83ujap16b.s[147]++;
                                    params[0].value = ast.argument.property.name;
                                    cov_83ujap16b.s[148]++;
                                    delete params[0].raw;
                                }
                                cov_83ujap16b.s[149]++;
                                delete ast.operator;
                                cov_83ujap16b.s[150]++;
                                delete ast.prefix;
                                cov_83ujap16b.s[151]++;
                                delete ast.argument;
                                cov_83ujap16b.s[152]++;
                                Object.assign(ast, f);
                            } else {
                                cov_83ujap16b.b[33][1]++;
                            }
                            cov_83ujap16b.s[153]++;
                            break;
                        case 'AssignmentExpression':
                            cov_83ujap16b.b[25][3]++;
                            cov_83ujap16b.s[154]++;
                            if ((cov_83ujap16b.b[37][0]++, _hookProperty) && (cov_83ujap16b.b[37][1]++, typeof ast.operator === 'string') && (cov_83ujap16b.b[37][2]++, typeof ast.left === 'object') && (cov_83ujap16b.b[37][3]++, typeof ast.right === 'object') && (cov_83ujap16b.b[37][4]++, ast.left.type === 'MemberExpression')) {
                                cov_83ujap16b.b[36][0]++;
                                cov_83ujap16b.s[155]++;
                                context = contextGenerator(astPath).replace(/\'/g, '\\\'');
                                cov_83ujap16b.s[156]++;
                                template = _espreeParse('_X_hookName_X_(\'op\', o, [\'p\', v], \'X_X_XcontextX_X_X\')', hookName, context);
                                cov_83ujap16b.s[157]++;
                                f = template.expression;
                                cov_83ujap16b.s[158]++;
                                params = f.arguments[2].elements;
                                cov_83ujap16b.s[159]++;
                                f.arguments[0].value = ast.operator;
                                cov_83ujap16b.s[160]++;
                                delete f.arguments[0].raw;
                                cov_83ujap16b.s[161]++;
                                f.arguments[1] = ast.left.object;
                                cov_83ujap16b.s[162]++;
                                if (ast.left.computed) {
                                    cov_83ujap16b.b[38][0]++;
                                    cov_83ujap16b.s[163]++;
                                    params[0] = ast.left.property;
                                } else {
                                    cov_83ujap16b.b[38][1]++;
                                    cov_83ujap16b.s[164]++;
                                    params[0].value = ast.left.property.name;
                                    cov_83ujap16b.s[165]++;
                                    params[0].start = ast.left.property.start;
                                    cov_83ujap16b.s[166]++;
                                    params[0].end = ast.left.property.end;
                                    cov_83ujap16b.s[167]++;
                                    delete params[0].raw;
                                }
                                cov_83ujap16b.s[168]++;
                                params[1] = ast.right;
                                cov_83ujap16b.s[169]++;
                                f.callee.start = ast.left.start;
                                cov_83ujap16b.s[170]++;
                                f.callee.end = ast.left.end;
                                cov_83ujap16b.s[171]++;
                                f.callee.loc = ast.left.loc;
                                cov_83ujap16b.s[172]++;
                                f.callee.range = ast.left.range;
                                cov_83ujap16b.s[173]++;
                                delete ast.operator;
                                cov_83ujap16b.s[174]++;
                                delete ast.left;
                                cov_83ujap16b.s[175]++;
                                delete ast.right;
                                cov_83ujap16b.s[176]++;
                                Object.assign(ast, f);
                            } else {
                                cov_83ujap16b.b[36][1]++;
                            }
                            cov_83ujap16b.s[177]++;
                            break;
                        case 'MethodDefinition':
                            cov_83ujap16b.b[25][4]++;
                            cov_83ujap16b.s[178]++;
                            if (ast.kind === 'constructor') {
                                cov_83ujap16b.b[39][0]++;
                                cov_83ujap16b.s[179]++;
                                isConstructor = true;
                            } else {
                                cov_83ujap16b.b[39][1]++;
                            }
                            cov_83ujap16b.s[180]++;
                            break;
                        case 'FunctionDeclaration':
                            cov_83ujap16b.b[25][5]++;
                        case 'FunctionExpression':
                            cov_83ujap16b.b[25][6]++;
                            cov_83ujap16b.s[181]++;
                            if (ast.__hooked__) {
                                cov_83ujap16b.b[40][0]++;
                                cov_83ujap16b.s[182]++;
                                delete ast.__hooked__;
                            } else {
                                cov_83ujap16b.b[40][1]++;
                                cov_83ujap16b.s[183]++;
                                if ((cov_83ujap16b.b[42][0]++, typeof ast.body === 'object') && (cov_83ujap16b.b[42][1]++, !Array.isArray(ast.body)) && (cov_83ujap16b.b[42][2]++, ast.body.type === 'BlockStatement') && (cov_83ujap16b.b[42][3]++, ast.body.body) && (cov_83ujap16b.b[42][4]++, Array.isArray(ast.body.body))) {
                                    cov_83ujap16b.b[41][0]++;
                                    cov_83ujap16b.s[184]++;
                                    params = ast.params;
                                    cov_83ujap16b.s[185]++;
                                    body = ast.body.body;
                                    cov_83ujap16b.s[186]++;
                                    context = contextGenerator(astPath).replace(/\'/g, '\\\'');
                                    cov_83ujap16b.s[187]++;
                                    template = _espreeParse(ast.generator ? (cov_83ujap16b.b[43][0]++, 'function * f() { yield * _X_hookName_X_(function * () {}, this, arguments, \'X_X_XcontextX_X_X\'); }') : (cov_83ujap16b.b[43][1]++, isConstructor ? (cov_83ujap16b.b[44][0]++, 'function f() { return _X_hookName_X_(() => {}, null, arguments, \'X_X_XcontextX_X_X\'); }') : (cov_83ujap16b.b[44][1]++, 'function f() { return _X_hookName_X_(() => {}, this, arguments, \'X_X_XcontextX_X_X\'); }')), hookName, context);
                                    cov_83ujap16b.s[188]++;
                                    f = ast.generator ? (cov_83ujap16b.b[45][0]++, template.body.body[0].expression.argument.arguments[0]) : (cov_83ujap16b.b[45][1]++, template.body.body[0].argument.arguments[0]);
                                    cov_83ujap16b.s[189]++;
                                    f.async = ast.async;
                                    cov_83ujap16b.s[190]++;
                                    f.params = ast.params;
                                    cov_83ujap16b.s[191]++;
                                    f.body.body = body;
                                    cov_83ujap16b.s[192]++;
                                    f.__hooked__ = true;
                                    cov_83ujap16b.s[193]++;
                                    ast.params = params.map(function _trim(param) {
                                        cov_83ujap16b.f[20]++;
                                        cov_83ujap16b.s[194]++;
                                        return (cov_83ujap16b.b[46][0]++, param) && (cov_83ujap16b.b[46][1]++, param.type === 'ArrayPattern' ? (cov_83ujap16b.b[47][0]++, {
                                            type: param.type,
                                            elements: param.elements.map(element => {
                                                cov_83ujap16b.f[21]++;
                                                cov_83ujap16b.s[195]++;
                                                return _trim(element);
                                            })
                                        }) : (cov_83ujap16b.b[47][1]++, param.type === 'AssignmentPattern' ? (cov_83ujap16b.b[48][0]++, param.left) : (cov_83ujap16b.b[48][1]++, param.type === 'ObjectPattern' ? (cov_83ujap16b.b[49][0]++, {
                                            type: 'ObjectPattern',
                                            properties: param.properties.map(prop => {
                                                cov_83ujap16b.f[22]++;
                                                cov_83ujap16b.s[196]++;
                                                return prop.value.type === 'AssignmentPattern' ? (cov_83ujap16b.b[50][0]++, ((p, v) => {
                                                    cov_83ujap16b.f[23]++;
                                                    cov_83ujap16b.s[197]++;
                                                    return p.value = v, p;
                                                })(Object.assign({}, prop), prop.value.left)) : (cov_83ujap16b.b[50][1]++, prop);
                                            })
                                        }) : (cov_83ujap16b.b[49][1]++, param))));
                                    });
                                    cov_83ujap16b.s[198]++;
                                    template.body.start = ast.body.start;
                                    cov_83ujap16b.s[199]++;
                                    template.body.end = ast.body.end;
                                    cov_83ujap16b.s[200]++;
                                    template.body.loc = ast.body.loc;
                                    cov_83ujap16b.s[201]++;
                                    template.body.range = ast.body.range;
                                    cov_83ujap16b.s[202]++;
                                    ast.body = template.body;
                                } else {
                                    cov_83ujap16b.b[41][1]++;
                                }
                            }
                            cov_83ujap16b.s[203]++;
                            break;
                        case 'ArrowFunctionExpression':
                            cov_83ujap16b.b[25][7]++;
                            cov_83ujap16b.s[204]++;
                            if (ast.__hooked__) {
                                cov_83ujap16b.b[51][0]++;
                                cov_83ujap16b.s[205]++;
                                delete ast.__hooked__;
                            } else {
                                cov_83ujap16b.b[51][1]++;
                                cov_83ujap16b.s[206]++;
                                if ((cov_83ujap16b.b[53][0]++, typeof ast.body === 'object') && (cov_83ujap16b.b[53][1]++, !Array.isArray(ast.body))) {
                                    cov_83ujap16b.b[52][0]++;
                                    cov_83ujap16b.s[207]++;
                                    context = contextGenerator(astPath).replace(/\'/g, '\\\'');
                                    cov_83ujap16b.s[208]++;
                                    template = _espreeParse(ast.body.type === 'BlockStatement' ? (cov_83ujap16b.b[54][0]++, '(...args) => _X_hookName_X_(p => { return p; }, this, args, \'X_X_XcontextX_X_X\')') : (cov_83ujap16b.b[54][1]++, ast.body.type === 'ObjectExpression' ? (cov_83ujap16b.b[55][0]++, '(...args) => _X_hookName_X_(p => ({ p: p }), this, args, \'X_X_XcontextX_X_X\')') : (cov_83ujap16b.b[55][1]++, '(...args) => _X_hookName_X_(p => p, this, args, \'X_X_XcontextX_X_X\')')), hookName, context).expression;
                                    cov_83ujap16b.s[209]++;
                                    f = template.body.arguments[0];
                                    cov_83ujap16b.s[210]++;
                                    f.async = ast.async;
                                    cov_83ujap16b.s[211]++;
                                    f.params = ast.params;
                                    cov_83ujap16b.s[212]++;
                                    f.body = ast.body;
                                    cov_83ujap16b.s[213]++;
                                    f.__hooked__ = true;
                                    cov_83ujap16b.s[214]++;
                                    ast.params = template.params;
                                    cov_83ujap16b.s[215]++;
                                    ast.body = template.body;
                                } else {
                                    cov_83ujap16b.b[52][1]++;
                                }
                            }
                            cov_83ujap16b.s[216]++;
                            break;
                        case 'NewExpression':
                            cov_83ujap16b.b[25][8]++;
                            cov_83ujap16b.s[217]++;
                            if ((cov_83ujap16b.b[57][0]++, metaHooking) && (cov_83ujap16b.b[57][1]++, ast.callee) && (cov_83ujap16b.b[57][2]++, ast.callee.name === 'Function')) {
                                cov_83ujap16b.b[56][0]++;
                                cov_83ujap16b.s[218]++;
                                context = contextGenerator(astPath).replace(/\'/g, '\\\'');
                                cov_83ujap16b.s[219]++;
                                template = _espreeParse('new (hook.Function(\'_X_hookName_X_\', [[\'X_X_XcontextX_X_X\', {}]], \'' + contextGeneratorName + '\'))(\'1\');', hookName, context).expression;
                                cov_83ujap16b.s[220]++;
                                ast.callee = template.callee;
                            } else {
                                cov_83ujap16b.b[56][1]++;
                                cov_83ujap16b.s[221]++;
                                if (_hookProperty) {
                                    cov_83ujap16b.b[58][0]++;
                                    cov_83ujap16b.s[222]++;
                                    context = contextGenerator(astPath).replace(/\'/g, '\\\'');
                                    cov_83ujap16b.s[223]++;
                                    template = _espreeParse('_X_hookName_X_(ctor, null, [], \'X_X_XcontextX_X_X\', true)', hookName, context);
                                    cov_83ujap16b.s[224]++;
                                    f = template.expression;
                                    cov_83ujap16b.s[225]++;
                                    f.arguments[0] = ast.callee;
                                    cov_83ujap16b.s[226]++;
                                    f.arguments[2].elements = ast.arguments;
                                    cov_83ujap16b.s[227]++;
                                    if (_sourceMap) {
                                        cov_83ujap16b.b[59][0]++;
                                        cov_83ujap16b.s[228]++;
                                        f.callee.start = ast.callee.start;
                                        cov_83ujap16b.s[229]++;
                                        f.callee.end = ast.callee.end;
                                        cov_83ujap16b.s[230]++;
                                        f.callee.loc = ast.callee.loc;
                                        cov_83ujap16b.s[231]++;
                                        f.callee.range = ast.callee.range;
                                    } else {
                                        cov_83ujap16b.b[59][1]++;
                                    }
                                    cov_83ujap16b.s[232]++;
                                    delete ast.callee;
                                    cov_83ujap16b.s[233]++;
                                    delete ast.arguments;
                                    cov_83ujap16b.s[234]++;
                                    Object.assign(ast, f);
                                } else {
                                    cov_83ujap16b.b[58][1]++;
                                }
                            }
                            cov_83ujap16b.s[235]++;
                            break;
                        case 'CallExpression':
                            cov_83ujap16b.b[25][9]++;
                            cov_83ujap16b.s[236]++;
                            if ((cov_83ujap16b.b[61][0]++, metaHooking) && (cov_83ujap16b.b[61][1]++, ast.callee) && (cov_83ujap16b.b[61][2]++, ast.callee.type === 'MemberExpression') && (cov_83ujap16b.b[61][3]++, ast.callee.object.type === 'Identifier') && (cov_83ujap16b.b[61][4]++, ast.callee.object.name === 'Reflect') && ((cov_83ujap16b.b[61][5]++, ast.callee.property.type === 'Identifier') && (cov_83ujap16b.b[61][6]++, ast.callee.property.name === 'construct') || (cov_83ujap16b.b[61][7]++, ast.callee.property.type === 'Literal') && (cov_83ujap16b.b[61][8]++, ast.callee.property.value === 'construct')) && (cov_83ujap16b.b[61][9]++, ast.arguments) && (cov_83ujap16b.b[61][10]++, ast.arguments[0]) && (cov_83ujap16b.b[61][11]++, ast.arguments[0].type === 'Identifier') && (cov_83ujap16b.b[61][12]++, ast.arguments[0].name === 'Function')) {
                                cov_83ujap16b.b[60][0]++;
                                cov_83ujap16b.s[237]++;
                                context = contextGenerator(astPath).replace(/\'/g, '\\\'');
                                cov_83ujap16b.s[238]++;
                                template = _espreeParse('new (hook.Function(\'_X_hookName_X_\', [[\'X_X_XcontextX_X_X\', {}]], \'' + contextGeneratorName + '\'))(\'1\');', hookName, context).expression;
                                cov_83ujap16b.s[239]++;
                                ast.arguments[0] = template.callee;
                            } else {
                                cov_83ujap16b.b[60][1]++;
                                cov_83ujap16b.s[240]++;
                                if ((cov_83ujap16b.b[63][0]++, metaHooking) && (cov_83ujap16b.b[63][1]++, ast.callee) && (cov_83ujap16b.b[63][2]++, ast.callee.type === 'Identifier') && ((cov_83ujap16b.b[63][3]++, ast.callee.name === 'setTimeout') || (cov_83ujap16b.b[63][4]++, ast.callee.name === 'setInterval')) && (cov_83ujap16b.b[63][5]++, ast.arguments) && (cov_83ujap16b.b[63][6]++, ast.arguments[0]) && (cov_83ujap16b.b[63][7]++, ast.arguments[0].type !== 'FunctionExpression') && (cov_83ujap16b.b[63][8]++, ast.arguments[0].type !== 'ArrowFunctionExpression')) {
                                    cov_83ujap16b.b[62][0]++;
                                    cov_83ujap16b.s[241]++;
                                    context = contextGenerator(astPath).replace(/\'/g, '\\\'');
                                    cov_83ujap16b.s[242]++;
                                    template = _espreeParse('hook.' + ast.callee.name + '(\'_X_hookName_X_\', [[\'X_X_XcontextX_X_X\', {}]], \'' + contextGeneratorName + '\')', hookName, context).expression;
                                    cov_83ujap16b.s[243]++;
                                    ast.callee = template;
                                } else {
                                    cov_83ujap16b.b[62][1]++;
                                    cov_83ujap16b.s[244]++;
                                    if ((cov_83ujap16b.b[65][0]++, metaHooking) && (cov_83ujap16b.b[65][1]++, ast.callee) && (cov_83ujap16b.b[65][2]++, ast.callee.type === 'Identifier') && (cov_83ujap16b.b[65][3]++, ast.callee.name === 'eval')) {
                                        cov_83ujap16b.b[64][0]++;
                                        cov_83ujap16b.s[245]++;
                                        if (ast.__hooked__) {
                                            cov_83ujap16b.b[66][0]++;
                                            cov_83ujap16b.s[246]++;
                                            delete ast.__hooked__;
                                        } else {
                                            cov_83ujap16b.b[66][1]++;
                                            cov_83ujap16b.s[247]++;
                                            context = contextGenerator(astPath).replace(/\'/g, '\\\'');
                                            cov_83ujap16b.s[248]++;
                                            template = _espreeParse('hook.' + ast.callee.name + '(\'_X_hookName_X_\', [[\'X_X_XcontextX_X_X\', {}]], \'' + contextGeneratorName + '\')', hookName, context).expression;
                                            cov_83ujap16b.s[249]++;
                                            wrapper = _espreeParse('(script, eval) => eval(script)', hookName, context).expression;
                                            cov_83ujap16b.s[250]++;
                                            if (_sourceMap) {
                                                cov_83ujap16b.b[67][0]++;
                                                cov_83ujap16b.s[251]++;
                                                _trimStartEndRaw(template);
                                            } else {
                                                cov_83ujap16b.b[67][1]++;
                                            }
                                            cov_83ujap16b.s[252]++;
                                            ast.callee = template;
                                            cov_83ujap16b.s[253]++;
                                            if (ast.arguments.length === 1) {
                                                cov_83ujap16b.b[68][0]++;
                                                cov_83ujap16b.s[254]++;
                                                wrapper.__hooked__ = true;
                                                cov_83ujap16b.s[255]++;
                                                wrapper.body.__hooked__ = true;
                                                cov_83ujap16b.s[256]++;
                                                ast.arguments.push(wrapper);
                                            } else {
                                                cov_83ujap16b.b[68][1]++;
                                            }
                                        }
                                    } else {
                                        cov_83ujap16b.b[64][1]++;
                                        cov_83ujap16b.s[257]++;
                                        if ((cov_83ujap16b.b[70][0]++, _hookProperty) && (cov_83ujap16b.b[70][1]++, ast.callee) && (cov_83ujap16b.b[70][2]++, ast.callee.type === 'MemberExpression') && (cov_83ujap16b.b[70][3]++, ast.callee.object.type !== 'Super')) {
                                            cov_83ujap16b.b[69][0]++;
                                            cov_83ujap16b.s[258]++;
                                            context = contextGenerator(astPath).replace(/\'/g, '\\\'');
                                            cov_83ujap16b.s[259]++;
                                            template = _espreeParse('_X_hookName_X_(\'()\', o, [\'p\', args], \'X_X_XcontextX_X_X\')', hookName, context);
                                            cov_83ujap16b.s[260]++;
                                            f = template.expression;
                                            cov_83ujap16b.s[261]++;
                                            params = f.arguments[2].elements;
                                            cov_83ujap16b.s[262]++;
                                            f.arguments[1] = ast.callee.object;
                                            cov_83ujap16b.s[263]++;
                                            if (ast.callee.computed) {
                                                cov_83ujap16b.b[71][0]++;
                                                cov_83ujap16b.s[264]++;
                                                params[0] = ast.callee.property;
                                            } else {
                                                cov_83ujap16b.b[71][1]++;
                                                cov_83ujap16b.s[265]++;
                                                params[0].value = ast.callee.property.name;
                                                cov_83ujap16b.s[266]++;
                                                delete params[0].raw;
                                            }
                                            cov_83ujap16b.s[267]++;
                                            params[1] = {
                                                'type': 'ArrayExpression',
                                                'elements': ast.arguments
                                            };
                                            cov_83ujap16b.s[268]++;
                                            f.callee.start = ast.callee.start;
                                            cov_83ujap16b.s[269]++;
                                            f.callee.end = ast.callee.end;
                                            cov_83ujap16b.s[270]++;
                                            f.callee.loc = ast.callee.loc;
                                            cov_83ujap16b.s[271]++;
                                            f.callee.range = ast.callee.range;
                                            cov_83ujap16b.s[272]++;
                                            delete ast.callee;
                                            cov_83ujap16b.s[273]++;
                                            delete ast.arguments;
                                            cov_83ujap16b.s[274]++;
                                            Object.assign(ast, f);
                                        } else {
                                            cov_83ujap16b.b[69][1]++;
                                        }
                                    }
                                }
                            }
                            cov_83ujap16b.s[275]++;
                            break;
                        case 'MetaProperty':
                            cov_83ujap16b.b[25][10]++;
                            cov_83ujap16b.s[276]++;
                            ast.meta = ast.meta.name;
                            cov_83ujap16b.s[277]++;
                            ast.property = ast.property.name;
                            cov_83ujap16b.s[278]++;
                            break;
                        case 'BlockStatement':
                            cov_83ujap16b.b[25][11]++;
                        case 'SwitchCase':
                            cov_83ujap16b.b[25][12]++;
                            cov_83ujap16b.s[279]++;
                            delete ast.start;
                            cov_83ujap16b.s[280]++;
                            delete ast.end;
                            cov_83ujap16b.s[281]++;
                            delete ast.loc;
                            cov_83ujap16b.s[282]++;
                            delete ast.range;
                            cov_83ujap16b.s[283]++;
                            break;
                        default:
                            cov_83ujap16b.b[25][13]++;
                            cov_83ujap16b.s[284]++;
                            break;
                        }
                        cov_83ujap16b.s[285]++;
                        for (target in ast) {
                            cov_83ujap16b.s[286]++;
                            child = ast[target];
                            cov_83ujap16b.s[287]++;
                            if (child) {
                                cov_83ujap16b.b[72][0]++;
                                cov_83ujap16b.s[288]++;
                                astPath.push([
                                    target,
                                    child
                                ]);
                                cov_83ujap16b.s[289]++;
                                if (Array.isArray(child)) {
                                    cov_83ujap16b.b[73][0]++;
                                    cov_83ujap16b.s[290]++;
                                    for (t = child, index = 0, l = t.length; index < l; index++) {
                                        cov_83ujap16b.s[291]++;
                                        item = t[index];
                                        cov_83ujap16b.s[292]++;
                                        if ((cov_83ujap16b.b[75][0]++, item) && (cov_83ujap16b.b[75][1]++, typeof item === 'object') && (cov_83ujap16b.b[75][2]++, typeof item.type === 'string')) {
                                            cov_83ujap16b.b[74][0]++;
                                            cov_83ujap16b.s[293]++;
                                            astPath.push([
                                                index,
                                                item
                                            ]);
                                            cov_83ujap16b.s[294]++;
                                            _preprocess(item, false, hookName, astPath, contextGeneratorName, contextGenerator, metaHooking, _hookProperty, _sourceMap);
                                            cov_83ujap16b.s[295]++;
                                            astPath.pop();
                                        } else {
                                            cov_83ujap16b.b[74][1]++;
                                        }
                                    }
                                } else {
                                    cov_83ujap16b.b[73][1]++;
                                    cov_83ujap16b.s[296]++;
                                    if ((cov_83ujap16b.b[77][0]++, typeof child === 'object') && (cov_83ujap16b.b[77][1]++, typeof child.type === 'string')) {
                                        cov_83ujap16b.b[76][0]++;
                                        cov_83ujap16b.s[297]++;
                                        _preprocess(child, isConstructor, hookName, astPath, contextGeneratorName, contextGenerator, metaHooking, _hookProperty, _sourceMap);
                                    } else {
                                        cov_83ujap16b.b[76][1]++;
                                    }
                                }
                                cov_83ujap16b.s[298]++;
                                astPath.pop();
                            } else {
                                cov_83ujap16b.b[72][1]++;
                            }
                        }
                    }
                    function _validateNoHookScript(script, url, isContextGeneratorValidation = (cov_83ujap16b.b[78][0]++, false)) {
                        cov_83ujap16b.f[24]++;
                        let hash = (cov_83ujap16b.s[299]++, createHash('sha256'));
                        cov_83ujap16b.s[300]++;
                        hash.update(script);
                        let ticket = (cov_83ujap16b.s[301]++, hash.digest('hex'));
                        cov_83ujap16b.s[302]++;
                        hook.parameters.noHookAuthorizationPassed = (cov_83ujap16b.b[79][0]++, hook.parameters.noHookAuthorizationPassed) || (cov_83ujap16b.b[79][1]++, {});
                        cov_83ujap16b.s[303]++;
                        if ((cov_83ujap16b.b[81][0]++, hook.parameters.noHookAuthorizationPreValidated) || (cov_83ujap16b.b[81][1]++, hook.parameters.noHookAuthorization) && (cov_83ujap16b.b[81][2]++, !hook.parameters.noHookAuthorization['*'])) {
                            cov_83ujap16b.b[80][0]++;
                            cov_83ujap16b.s[304]++;
                            if (((cov_83ujap16b.b[83][0]++, !hook.parameters.noHookAuthorization) || (cov_83ujap16b.b[83][1]++, hook.parameters.noHookAuthorization) && (cov_83ujap16b.b[83][2]++, !hook.parameters.noHookAuthorization[ticket])) && ((cov_83ujap16b.b[83][3]++, hook.parameters.noHookAuthorization) && (cov_83ujap16b.b[83][4]++, !hook.parameters.noHookAuthorizationPreValidated) || (cov_83ujap16b.b[83][5]++, hook.parameters.noHookAuthorizationPreValidated) && (cov_83ujap16b.b[83][6]++, !hook.parameters.noHookAuthorizationPreValidated[ticket]))) {
                                cov_83ujap16b.b[82][0]++;
                                cov_83ujap16b.s[305]++;
                                if ((cov_83ujap16b.b[85][0]++, hook.parameters.noHookAuthorization) || (cov_83ujap16b.b[85][1]++, isContextGeneratorValidation)) {
                                    cov_83ujap16b.b[84][0]++;
                                    cov_83ujap16b.s[306]++;
                                    console.error('invalidate no-hook for ' + url.href + ' ticket = ' + ticket, script);
                                    cov_83ujap16b.s[307]++;
                                    hook.parameters.noHookAuthorizationFailed = (cov_83ujap16b.b[86][0]++, hook.parameters.noHookAuthorizationFailed) || (cov_83ujap16b.b[86][1]++, {});
                                    cov_83ujap16b.s[308]++;
                                    hook.parameters.noHookAuthorizationFailed[ticket] = true;
                                    cov_83ujap16b.s[309]++;
                                    console.error('hook.parameters.noHookAuthorizationFailed = ', JSON.stringify(hook.parameters.noHookAuthorizationFailed, null, 2));
                                } else {
                                    cov_83ujap16b.b[84][1]++;
                                }
                                cov_83ujap16b.s[310]++;
                                script = '/* invalidated unauthorized no-hook script */';
                            } else {
                                cov_83ujap16b.b[82][1]++;
                                cov_83ujap16b.s[311]++;
                                if ((cov_83ujap16b.b[88][0]++, hook.parameters.noHookAuthorizationPreValidated) && (cov_83ujap16b.b[88][1]++, hook.parameters.noHookAuthorizationPreValidated['log-no-hook-authorization'])) {
                                    cov_83ujap16b.b[87][0]++;
                                    cov_83ujap16b.s[312]++;
                                    console.log('validate no-hook for ' + url.href + ' ticket = ' + ticket, script.substr(0, 100));
                                } else {
                                    cov_83ujap16b.b[87][1]++;
                                }
                            }
                        } else {
                            cov_83ujap16b.b[80][1]++;
                            cov_83ujap16b.s[313]++;
                            hook.parameters.noHookAuthorizationPassed[ticket] = true;
                            cov_83ujap16b.s[314]++;
                            if ((cov_83ujap16b.b[90][0]++, hook.parameters.noHookAuthorization) && (cov_83ujap16b.b[90][1]++, hook.parameters.noHookAuthorization['*'])) {
                                cov_83ujap16b.b[89][0]++;
                                cov_83ujap16b.s[315]++;
                                console.warn('no hooking ticket for ' + url.href + ' = ' + ticket, script.substr(0, 100));
                                cov_83ujap16b.s[316]++;
                                console.warn('hook.parameters.noHookAuthorizationPassed = ', JSON.stringify(hook.parameters.noHookAuthorizationPassed, null, 2));
                            } else {
                                cov_83ujap16b.b[89][1]++;
                            }
                        }
                        cov_83ujap16b.s[317]++;
                        return script;
                    }
                    function _preprocessHtml(html, hookName, url, cors, contextGenerator, contextGeneratorScripts, isDecoded, metaHooking = (cov_83ujap16b.b[91][0]++, true), scriptOffset = (cov_83ujap16b.b[92][0]++, 0), _hookProperty = (cov_83ujap16b.b[93][0]++, true), asynchronous = (cov_83ujap16b.b[94][0]++, false)) {
                        cov_83ujap16b.f[25]++;
                        cov_83ujap16b.s[318]++;
                        if (asynchronous) {
                            cov_83ujap16b.b[95][0]++;
                            let worker = (cov_83ujap16b.s[319]++, getBestHookWorker());
                            cov_83ujap16b.s[320]++;
                            if (worker) {
                                cov_83ujap16b.b[96][0]++;
                                cov_83ujap16b.s[321]++;
                                return new Promise(function (resolve, reject) {
                                    cov_83ujap16b.f[26]++;
                                    let id = (cov_83ujap16b.s[322]++, getHookId(html));
                                    let size = (cov_83ujap16b.s[323]++, html.length);
                                    cov_83ujap16b.s[324]++;
                                    if (url instanceof URL) {
                                        cov_83ujap16b.b[97][0]++;
                                        cov_83ujap16b.s[325]++;
                                        url = url.href;
                                    } else {
                                        cov_83ujap16b.b[97][1]++;
                                    }
                                    cov_83ujap16b.s[326]++;
                                    worker.tasks[id] = { status: 'requesting' };
                                    cov_83ujap16b.s[327]++;
                                    worker.taskQueueSize += size;
                                    cov_83ujap16b.s[328]++;
                                    worker.tasks[id].callback = function callback(task) {
                                        cov_83ujap16b.f[27]++;
                                        cov_83ujap16b.s[329]++;
                                        delete worker.tasks[id];
                                        cov_83ujap16b.s[330]++;
                                        worker.taskQueueSize -= size;
                                        cov_83ujap16b.s[331]++;
                                        if (task.status === 'success') {
                                            cov_83ujap16b.b[98][0]++;
                                            cov_83ujap16b.s[332]++;
                                            resolve(task.result);
                                        } else {
                                            cov_83ujap16b.b[98][1]++;
                                            cov_83ujap16b.s[333]++;
                                            reject(task.error);
                                        }
                                    };
                                    let message = (cov_83ujap16b.s[334]++, [
                                        id,
                                        'text/html',
                                        html,
                                        hookName,
                                        url,
                                        cors,
                                        contextGenerator,
                                        contextGeneratorScripts,
                                        isDecoded,
                                        metaHooking,
                                        scriptOffset,
                                        _hookProperty,
                                        false
                                    ]);
                                    cov_83ujap16b.s[335]++;
                                    worker.port.postMessage(JSON.stringify(message, null, 0));
                                });
                            } else {
                                cov_83ujap16b.b[96][1]++;
                                cov_83ujap16b.s[336]++;
                                return new Promise(function (resolve, reject) {
                                    cov_83ujap16b.f[28]++;
                                    cov_83ujap16b.s[337]++;
                                    try {
                                        cov_83ujap16b.s[338]++;
                                        resolve(_preprocessHtml(html, hookName, url, cors, contextGenerator, contextGeneratorScripts, isDecoded, metaHooking, scriptOffset, _hookProperty, false));
                                    } catch (e) {
                                        cov_83ujap16b.s[339]++;
                                        reject(e);
                                    }
                                });
                            }
                        } else {
                            cov_83ujap16b.b[95][1]++;
                            let processed = (cov_83ujap16b.s[340]++, '');
                            let inScript = (cov_83ujap16b.s[341]++, false);
                            let noHook = (cov_83ujap16b.s[342]++, false);
                            let contextGeneratorAttr = (cov_83ujap16b.s[343]++, false);
                            let src = (cov_83ujap16b.s[344]++, '');
                            let inlineScript = (cov_83ujap16b.s[345]++, '');
                            cov_83ujap16b.s[346]++;
                            if (typeof url === 'string') {
                                cov_83ujap16b.b[99][0]++;
                                cov_83ujap16b.s[347]++;
                                url = new URL(url);
                            } else {
                                cov_83ujap16b.b[99][1]++;
                            }
                            let stream = (cov_83ujap16b.s[348]++, new htmlparser.WritableStream({
                                onprocessinginstruction(name, data) {
                                    cov_83ujap16b.s[349]++;
                                    processed += '<' + data + '>';
                                },
                                onopentag(name, attributes) {
                                    let attrs = (cov_83ujap16b.s[350]++, '');
                                    let attrNoHook = (cov_83ujap16b.s[351]++, typeof attributes['no-hook'] === 'string');
                                    cov_83ujap16b.s[352]++;
                                    for (let attr in attributes) {
                                        cov_83ujap16b.s[353]++;
                                        if ((cov_83ujap16b.b[101][0]++, attr.match(/^on[a-z]{1,}$/)) && (cov_83ujap16b.b[101][1]++, attributes[attr])) {
                                            cov_83ujap16b.b[100][0]++;
                                            let _attrNoHook = (cov_83ujap16b.s[354]++, attrNoHook);
                                            cov_83ujap16b.s[355]++;
                                            if (_attrNoHook) {
                                                cov_83ujap16b.b[102][0]++;
                                                let originalScript = (cov_83ujap16b.s[356]++, attributes[attr]);
                                                cov_83ujap16b.s[357]++;
                                                attributes[attr] = _validateNoHookScript(originalScript, url);
                                                cov_83ujap16b.s[358]++;
                                                _attrNoHook = originalScript === attributes[attr];
                                            } else {
                                                cov_83ujap16b.b[102][1]++;
                                            }
                                            cov_83ujap16b.s[359]++;
                                            if (!_attrNoHook) {
                                                cov_83ujap16b.b[103][0]++;
                                                cov_83ujap16b.s[360]++;
                                                attributes[attr] = 'return ' + hook('(() => { ' + attributes[attr] + '})()', hookNameForServiceWorker, [[
                                                        (cors ? (cov_83ujap16b.b[104][0]++, url.href) : (cov_83ujap16b.b[104][1]++, url.pathname)) + ',' + name + (attributes.id ? (cov_83ujap16b.b[105][0]++, '#' + attributes.id) : (cov_83ujap16b.b[105][1]++, attributes.class ? (cov_83ujap16b.b[106][0]++, '.' + attributes.class) : (cov_83ujap16b.b[106][1]++, ''))) + ',' + attr + '@' + (scriptOffset + processed.length),
                                                        {}
                                                    ]], contextGenerator, metaHooking, _hookProperty);
                                            } else {
                                                cov_83ujap16b.b[103][1]++;
                                            }
                                        } else {
                                            cov_83ujap16b.b[100][1]++;
                                            cov_83ujap16b.s[361]++;
                                            if ((cov_83ujap16b.b[108][0]++, attributes[attr]) && (cov_83ujap16b.b[108][1]++, attributes[attr].indexOf('javascript:') === 0)) {
                                                cov_83ujap16b.b[107][0]++;
                                                let _attrNoHook = (cov_83ujap16b.s[362]++, attrNoHook);
                                                cov_83ujap16b.s[363]++;
                                                if (_attrNoHook) {
                                                    cov_83ujap16b.b[109][0]++;
                                                    let originalScript = (cov_83ujap16b.s[364]++, attributes[attr].substr(11));
                                                    cov_83ujap16b.s[365]++;
                                                    attributes[attr] = 'javascript:' + _validateNoHookScript(originalScript, url);
                                                    cov_83ujap16b.s[366]++;
                                                    _attrNoHook = originalScript === attributes[attr];
                                                } else {
                                                    cov_83ujap16b.b[109][1]++;
                                                }
                                                cov_83ujap16b.s[367]++;
                                                if (!_attrNoHook) {
                                                    cov_83ujap16b.b[110][0]++;
                                                    cov_83ujap16b.s[368]++;
                                                    attributes[attr] = 'javascript:' + hook('(() => { ' + attributes[attr].substr(11) + '})()', hookNameForServiceWorker, [[
                                                            (cors ? (cov_83ujap16b.b[111][0]++, url.href) : (cov_83ujap16b.b[111][1]++, url.pathname)) + ',' + name + (attributes.id ? (cov_83ujap16b.b[112][0]++, '#' + attributes.id) : (cov_83ujap16b.b[112][1]++, attributes.class ? (cov_83ujap16b.b[113][0]++, '.' + attributes.class) : (cov_83ujap16b.b[113][1]++, ''))) + ',' + attr + '@' + (scriptOffset + processed.length),
                                                            {}
                                                        ]], contextGenerator, metaHooking, _hookProperty);
                                                } else {
                                                    cov_83ujap16b.b[110][1]++;
                                                }
                                            } else {
                                                cov_83ujap16b.b[107][1]++;
                                            }
                                        }
                                        cov_83ujap16b.s[369]++;
                                        attrs += ' ' + attr + (attributes[attr] ? (cov_83ujap16b.b[114][0]++, attributes[attr].indexOf('"') >= 0 ? (cov_83ujap16b.b[115][0]++, '=\'' + attributes[attr] + '\'') : (cov_83ujap16b.b[115][1]++, '="' + attributes[attr] + '"')) : (cov_83ujap16b.b[114][1]++, ''));
                                    }
                                    cov_83ujap16b.s[370]++;
                                    processed += '<' + name + attrs + '>';
                                    cov_83ujap16b.s[371]++;
                                    if (name === 'script') {
                                        cov_83ujap16b.b[116][0]++;
                                        cov_83ujap16b.s[372]++;
                                        inScript = true;
                                        cov_83ujap16b.s[373]++;
                                        noHook = attrNoHook;
                                        cov_83ujap16b.s[374]++;
                                        src = attributes.src;
                                        cov_83ujap16b.s[375]++;
                                        inlineScript = '';
                                        cov_83ujap16b.s[376]++;
                                        contextGeneratorAttr = attributes['context-generator'];
                                        cov_83ujap16b.s[377]++;
                                        if ((cov_83ujap16b.b[118][0]++, src) && (cov_83ujap16b.b[118][1]++, src.match(/\/hook[.]min[.]js\?/))) {
                                            cov_83ujap16b.b[117][0]++;
                                            let srcUrl = (cov_83ujap16b.s[378]++, new URL(src, 'https://host/'));
                                            cov_83ujap16b.s[379]++;
                                            if (srcUrl.searchParams.has('hook-name')) {
                                                cov_83ujap16b.b[119][0]++;
                                                cov_83ujap16b.s[380]++;
                                                hookNameForServiceWorker = srcUrl.searchParams.get('hook-name');
                                            } else {
                                                cov_83ujap16b.b[119][1]++;
                                            }
                                            cov_83ujap16b.s[381]++;
                                            if (srcUrl.searchParams.has('context-generator-name')) {
                                                cov_83ujap16b.b[120][0]++;
                                                cov_83ujap16b.s[382]++;
                                                contextGeneratorName = (cov_83ujap16b.b[121][0]++, srcUrl.searchParams.get('context-generator-name')) || (cov_83ujap16b.b[121][1]++, 'method');
                                            } else {
                                                cov_83ujap16b.b[120][1]++;
                                            }
                                            cov_83ujap16b.s[383]++;
                                            if (srcUrl.searchParams.has('discard-hook-errors')) {
                                                cov_83ujap16b.b[122][0]++;
                                                cov_83ujap16b.s[384]++;
                                                discardHookErrors = srcUrl.searchParams.get('discard-hook-errors') === 'true';
                                            } else {
                                                cov_83ujap16b.b[122][1]++;
                                            }
                                            cov_83ujap16b.s[385]++;
                                            if (srcUrl.searchParams.has('hook-property')) {
                                                cov_83ujap16b.b[123][0]++;
                                                cov_83ujap16b.s[386]++;
                                                setHookProperty(srcUrl.searchParams.get('hook-property') === 'true');
                                            } else {
                                                cov_83ujap16b.b[123][1]++;
                                            }
                                            cov_83ujap16b.s[387]++;
                                            if (srcUrl.searchParams.has('compact')) {
                                                cov_83ujap16b.b[124][0]++;
                                                cov_83ujap16b.s[388]++;
                                                setCompact(srcUrl.searchParams.get('compact') === 'true');
                                            } else {
                                                cov_83ujap16b.b[124][1]++;
                                            }
                                            cov_83ujap16b.s[389]++;
                                            if (srcUrl.searchParams.has('no-hook-authorization')) {
                                                cov_83ujap16b.b[125][0]++;
                                                let noHookAuthorization = (cov_83ujap16b.s[390]++, srcUrl.searchParams.get('no-hook-authorization').split(/,/));
                                                cov_83ujap16b.s[391]++;
                                                hook.parameters.noHookAuthorizationPreValidated = (cov_83ujap16b.b[126][0]++, hook.parameters.noHookAuthorizationPreValidated) || (cov_83ujap16b.b[126][1]++, {});
                                                cov_83ujap16b.s[392]++;
                                                noHookAuthorization.forEach(ticket => {
                                                    cov_83ujap16b.f[29]++;
                                                    cov_83ujap16b.s[393]++;
                                                    hook.parameters.noHookAuthorizationPreValidated[ticket] = true;
                                                });
                                            } else {
                                                cov_83ujap16b.b[125][1]++;
                                            }
                                        } else {
                                            cov_83ujap16b.b[117][1]++;
                                        }
                                        cov_83ujap16b.s[394]++;
                                        if ((cov_83ujap16b.b[128][0]++, isDecoded) && (cov_83ujap16b.b[128][1]++, typeof contextGeneratorAttr === 'string') && (cov_83ujap16b.b[128][2]++, src)) {
                                            cov_83ujap16b.b[127][0]++;
                                            cov_83ujap16b.s[395]++;
                                            contextGeneratorScripts.push(new URL(src, url));
                                        } else {
                                            cov_83ujap16b.b[127][1]++;
                                        }
                                    } else {
                                        cov_83ujap16b.b[116][1]++;
                                    }
                                },
                                ontext(text) {
                                    cov_83ujap16b.s[396]++;
                                    if (inScript) {
                                        cov_83ujap16b.b[129][0]++;
                                        cov_83ujap16b.s[397]++;
                                        inlineScript += text;
                                    } else {
                                        cov_83ujap16b.b[129][1]++;
                                        cov_83ujap16b.s[398]++;
                                        processed += text;
                                    }
                                },
                                onclosetag(name) {
                                    cov_83ujap16b.s[399]++;
                                    if ((cov_83ujap16b.b[131][0]++, name === 'script') && (cov_83ujap16b.b[131][1]++, inScript)) {
                                        cov_83ujap16b.b[130][0]++;
                                        cov_83ujap16b.s[400]++;
                                        if ((cov_83ujap16b.b[133][0]++, isDecoded) && (cov_83ujap16b.b[133][1]++, typeof contextGeneratorAttr === 'string') && (cov_83ujap16b.b[133][2]++, inlineScript)) {
                                            cov_83ujap16b.b[132][0]++;
                                            cov_83ujap16b.s[401]++;
                                            contextGeneratorScripts.push(inlineScript);
                                        } else {
                                            cov_83ujap16b.b[132][1]++;
                                        }
                                        cov_83ujap16b.s[402]++;
                                        if (inlineScript) {
                                            cov_83ujap16b.b[134][0]++;
                                            cov_83ujap16b.s[403]++;
                                            if (noHook) {
                                                cov_83ujap16b.b[135][0]++;
                                                let originalScript = (cov_83ujap16b.s[404]++, inlineScript);
                                                cov_83ujap16b.s[405]++;
                                                inlineScript = _validateNoHookScript(originalScript, url);
                                                cov_83ujap16b.s[406]++;
                                                noHook = originalScript === inlineScript;
                                            } else {
                                                cov_83ujap16b.b[135][1]++;
                                            }
                                            cov_83ujap16b.s[407]++;
                                            if (!noHook) {
                                                cov_83ujap16b.b[136][0]++;
                                                cov_83ujap16b.s[408]++;
                                                inlineScript = hook(inlineScript, hookNameForServiceWorker, [[
                                                        (cors ? (cov_83ujap16b.b[137][0]++, url.href) : (cov_83ujap16b.b[137][1]++, url.pathname)) + ',script@' + (scriptOffset + processed.length),
                                                        {}
                                                    ]], contextGenerator, metaHooking, _hookProperty);
                                            } else {
                                                cov_83ujap16b.b[136][1]++;
                                            }
                                        } else {
                                            cov_83ujap16b.b[134][1]++;
                                        }
                                        cov_83ujap16b.s[409]++;
                                        processed += inlineScript;
                                        cov_83ujap16b.s[410]++;
                                        inScript = false;
                                        cov_83ujap16b.s[411]++;
                                        noHook = false;
                                        cov_83ujap16b.s[412]++;
                                        src = '';
                                    } else {
                                        cov_83ujap16b.b[130][1]++;
                                    }
                                    cov_83ujap16b.s[413]++;
                                    processed += '</' + name + '>';
                                },
                                oncomment(data) {
                                    cov_83ujap16b.s[414]++;
                                    processed += '<!--' + data + '-->';
                                },
                                onerror(error) {
                                    cov_83ujap16b.s[415]++;
                                    throw error;
                                }
                            }));
                            cov_83ujap16b.s[416]++;
                            stream.write(html.replace(/\n/g, '\0').replace(/(<\/[\s]{1,})script([\s]*>)/g, '$1-closing-script-in-process-$2').replace(/\0/g, '\n'));
                            cov_83ujap16b.s[417]++;
                            stream.end();
                            cov_83ujap16b.s[418]++;
                            processed = processed.replace(/\n/g, '\0').replace(/(<\/[\s]{1,})-closing-script-in-process-([\s]*>)/g, '$1script$2').replace(/\0/g, '\n');
                            cov_83ujap16b.s[419]++;
                            return processed;
                        }
                    }
                    const escodegenOptions = (cov_83ujap16b.s[420]++, {
                        format: { indent: { style: '  ' } },
                        comment: true
                    });
                    const escodegenOptionsCompact = (cov_83ujap16b.s[421]++, {
                        format: { compact: true },
                        comment: false
                    });
                    const escodegenOptionsWithSourceMap = (cov_83ujap16b.s[422]++, {
                        format: {
                            indent: {
                                style: '  ',
                                base: 0,
                                adjustMultilineComment: false
                            },
                            newline: '\n',
                            space: ' ',
                            json: false,
                            renumber: false,
                            hexadecimal: false,
                            quotes: 'single',
                            escapeless: false,
                            compact: false,
                            parentheses: true,
                            semicolons: true,
                            safeConcatenation: false
                        },
                        moz: {
                            starlessGenerator: false,
                            parenthesizedComprehensionBlock: false,
                            comprehensionExpressionStartsWithAssignment: false
                        },
                        parse: null,
                        comment: true,
                        sourceMap: 'source.js',
                        sourceMapRoot: 'src',
                        sourceMapWithCode: true,
                        file: 'source.js.map',
                        sourceContent: '',
                        directive: false,
                        verbatim: undefined
                    });
                    function hook(code, hookName = (cov_83ujap16b.b[138][0]++, '__hook__'), initialContext = (cov_83ujap16b.b[139][0]++, []), contextGeneratorName = (cov_83ujap16b.b[140][0]++, 'method'), metaHooking = (cov_83ujap16b.b[141][0]++, true), _hookProperty = (cov_83ujap16b.b[142][0]++, getHookProperty()), _sourceMap = (cov_83ujap16b.b[143][0]++, null), asynchronous = (cov_83ujap16b.b[144][0]++, false), _compact = (cov_83ujap16b.b[145][0]++, getCompact())) {
                        cov_83ujap16b.f[30]++;
                        cov_83ujap16b.s[423]++;
                        if (asynchronous) {
                            cov_83ujap16b.b[146][0]++;
                            let worker = (cov_83ujap16b.s[424]++, getBestHookWorker());
                            cov_83ujap16b.s[425]++;
                            if (worker) {
                                cov_83ujap16b.b[147][0]++;
                                cov_83ujap16b.s[426]++;
                                return new Promise(function (resolve, reject) {
                                    cov_83ujap16b.f[31]++;
                                    let id = (cov_83ujap16b.s[427]++, getHookId(code));
                                    let size = (cov_83ujap16b.s[428]++, code.length);
                                    cov_83ujap16b.s[429]++;
                                    worker.tasks[id] = { status: 'requesting' };
                                    cov_83ujap16b.s[430]++;
                                    worker.taskQueueSize += size;
                                    cov_83ujap16b.s[431]++;
                                    worker.tasks[id].callback = function callback(task) {
                                        cov_83ujap16b.f[32]++;
                                        cov_83ujap16b.s[432]++;
                                        delete worker.tasks[id];
                                        cov_83ujap16b.s[433]++;
                                        worker.taskQueueSize -= size;
                                        cov_83ujap16b.s[434]++;
                                        if (task.status === 'success') {
                                            cov_83ujap16b.b[148][0]++;
                                            cov_83ujap16b.s[435]++;
                                            resolve(task.result);
                                        } else {
                                            cov_83ujap16b.b[148][1]++;
                                            cov_83ujap16b.s[436]++;
                                            reject(task.error);
                                        }
                                    };
                                    let message = (cov_83ujap16b.s[437]++, [
                                        id,
                                        'text/javascript',
                                        code,
                                        hookName,
                                        initialContext,
                                        contextGeneratorName,
                                        metaHooking,
                                        _hookProperty,
                                        _sourceMap,
                                        false,
                                        _compact
                                    ]);
                                    cov_83ujap16b.s[438]++;
                                    worker.port.postMessage(JSON.stringify(message, null, 0));
                                });
                            } else {
                                cov_83ujap16b.b[147][1]++;
                                cov_83ujap16b.s[439]++;
                                return new Promise(function (resolve, reject) {
                                    cov_83ujap16b.f[33]++;
                                    cov_83ujap16b.s[440]++;
                                    try {
                                        cov_83ujap16b.s[441]++;
                                        resolve(hook(code, hookName, initialContext, contextGeneratorName, metaHooking, _hookProperty, _sourceMap, false, _compact));
                                    } catch (e) {
                                        cov_83ujap16b.s[442]++;
                                        reject(e);
                                    }
                                });
                            }
                        } else {
                            cov_83ujap16b.b[146][1]++;
                            let targetAst;
                            cov_83ujap16b.s[443]++;
                            try {
                                cov_83ujap16b.s[444]++;
                                targetAst = espree.parse(code, _compact ? (cov_83ujap16b.b[149][0]++, espreeOptionsForTargetCompact) : (cov_83ujap16b.b[149][1]++, espreeOptionsForTarget));
                            } catch (e) {
                                cov_83ujap16b.s[445]++;
                                if ((cov_83ujap16b.b[151][0]++, e.name === 'SyntaxError') && (cov_83ujap16b.b[151][1]++, e.message.match(/'import' and 'export' may appear only with 'sourceType: module'/))) {
                                    cov_83ujap16b.b[150][0]++;
                                    cov_83ujap16b.s[446]++;
                                    targetAst = espree.parse(code, _compact ? (cov_83ujap16b.b[152][0]++, espreeModuleOptionsCompact) : (cov_83ujap16b.b[152][1]++, espreeModuleOptions));
                                } else {
                                    cov_83ujap16b.b[150][1]++;
                                    cov_83ujap16b.s[447]++;
                                    throw e;
                                }
                            }
                            let astWithComments = (cov_83ujap16b.s[448]++, _compact ? (cov_83ujap16b.b[153][0]++, targetAst) : (cov_83ujap16b.b[153][1]++, escodegen.attachComments(targetAst, targetAst.comments, targetAst.tokens)));
                            cov_83ujap16b.s[449]++;
                            contextGeneratorName = hook.contextGenerators[contextGeneratorName] ? (cov_83ujap16b.b[154][0]++, contextGeneratorName) : (cov_83ujap16b.b[154][1]++, 'method');
                            let contextGenerator = (cov_83ujap16b.s[450]++, hook.contextGenerators[contextGeneratorName]);
                            cov_83ujap16b.s[451]++;
                            initialContext.push([
                                'root',
                                targetAst
                            ]);
                            cov_83ujap16b.s[452]++;
                            _preprocess(targetAst, false, hookName, initialContext, contextGeneratorName, contextGenerator, metaHooking, _hookProperty, _sourceMap);
                            cov_83ujap16b.s[453]++;
                            if ((cov_83ujap16b.b[156][0]++, !_compact) && (cov_83ujap16b.b[156][1]++, _sourceMap) && (cov_83ujap16b.b[156][2]++, typeof _sourceMap === 'object') && (cov_83ujap16b.b[156][3]++, _sourceMap.pathname)) {
                                cov_83ujap16b.b[155][0]++;
                                let sourcePath = (cov_83ujap16b.s[454]++, _sourceMap.pathname.split(/\//).pop());
                                cov_83ujap16b.s[455]++;
                                escodegenOptionsWithSourceMap.code = code;
                                cov_83ujap16b.s[456]++;
                                escodegenOptionsWithSourceMap.sourceMap = sourcePath;
                                cov_83ujap16b.s[457]++;
                                escodegenOptionsWithSourceMap.file = sourcePath + '.map';
                                let output = (cov_83ujap16b.s[458]++, escodegen.generate(astWithComments, escodegenOptionsWithSourceMap));
                                cov_83ujap16b.s[459]++;
                                output.map.setSourceContent(sourcePath, code);
                                let mapComment = (cov_83ujap16b.s[460]++, convert.fromJSON(output.map.toString()).toComment());
                                cov_83ujap16b.s[461]++;
                                return output.code + '\n' + mapComment;
                            } else {
                                cov_83ujap16b.b[155][1]++;
                                cov_83ujap16b.s[462]++;
                                return escodegen.generate(astWithComments, _compact ? (cov_83ujap16b.b[157][0]++, escodegenOptionsCompact) : (cov_83ujap16b.b[157][1]++, escodegenOptions));
                            }
                        }
                    }
                    cov_83ujap16b.s[463]++;
                    return {
                        hook: hook,
                        _preprocessHtml: _preprocessHtml,
                        _validateNoHookScript: _validateNoHookScript,
                        getHookNameForServiceWorker: getHookNameForServiceWorker,
                        getContextGeneratorName: getContextGeneratorName,
                        getDiscardHookErrors: getDiscardHookErrors,
                        getHookProperty: getHookProperty,
                        setHookProperty: setHookProperty,
                        setScriptHookProperty: setScriptHookProperty,
                        getCompact: getCompact,
                        setCompact: setCompact,
                        getHookWorkers: getHookWorkers,
                        setHookWorkers: setHookWorkers,
                        setupHookWorkers: setupHookWorkers,
                        public: { hookHtml: _preprocessHtml }
                    };
                };
            },
            {}
        ],
        104: [
            function (require, module, exports) {
                var cov_5zdhhrftg = function () {
                    var path = '/home/fedora/WebComponents/components/thin-hook/lib/service-worker.js', hash = '416a567527efa3220c23e9deda81a7675c5195ce', global = new Function('return this')(), gcv = '__coverage__', coverageData = {
                            path: '/home/fedora/WebComponents/components/thin-hook/lib/service-worker.js',
                            statementMap: {
                                '0': {
                                    start: {
                                        line: 6,
                                        column: 0
                                    },
                                    end: {
                                        line: 362,
                                        column: 1
                                    }
                                },
                                '1': {
                                    start: {
                                        line: 8,
                                        column: 16
                                    },
                                    end: {
                                        line: 8,
                                        column: 19
                                    }
                                },
                                '2': {
                                    start: {
                                        line: 11,
                                        column: 27
                                    },
                                    end: {
                                        line: 11,
                                        column: 49
                                    }
                                },
                                '3': {
                                    start: {
                                        line: 12,
                                        column: 4
                                    },
                                    end: {
                                        line: 12,
                                        column: 70
                                    }
                                },
                                '4': {
                                    start: {
                                        line: 16,
                                        column: 4
                                    },
                                    end: {
                                        line: 16,
                                        column: 34
                                    }
                                },
                                '5': {
                                    start: {
                                        line: 17,
                                        column: 4
                                    },
                                    end: {
                                        line: 17,
                                        column: 132
                                    }
                                },
                                '6': {
                                    start: {
                                        line: 17,
                                        column: 47
                                    },
                                    end: {
                                        line: 17,
                                        column: 129
                                    }
                                },
                                '7': {
                                    start: {
                                        line: 17,
                                        column: 75
                                    },
                                    end: {
                                        line: 17,
                                        column: 127
                                    }
                                },
                                '8': {
                                    start: {
                                        line: 21,
                                        column: 4
                                    },
                                    end: {
                                        line: 38,
                                        column: 5
                                    }
                                },
                                '9': {
                                    start: {
                                        line: 22,
                                        column: 24
                                    },
                                    end: {
                                        line: 22,
                                        column: 26
                                    }
                                },
                                '10': {
                                    start: {
                                        line: 23,
                                        column: 6
                                    },
                                    end: {
                                        line: 25,
                                        column: 7
                                    }
                                },
                                '11': {
                                    start: {
                                        line: 24,
                                        column: 8
                                    },
                                    end: {
                                        line: 24,
                                        column: 80
                                    }
                                },
                                '12': {
                                    start: {
                                        line: 26,
                                        column: 6
                                    },
                                    end: {
                                        line: 26,
                                        column: 45
                                    }
                                },
                                '13': {
                                    start: {
                                        line: 28,
                                        column: 9
                                    },
                                    end: {
                                        line: 38,
                                        column: 5
                                    }
                                },
                                '14': {
                                    start: {
                                        line: 30,
                                        column: 6
                                    },
                                    end: {
                                        line: 30,
                                        column: 36
                                    }
                                },
                                '15': {
                                    start: {
                                        line: 32,
                                        column: 9
                                    },
                                    end: {
                                        line: 38,
                                        column: 5
                                    }
                                },
                                '16': {
                                    start: {
                                        line: 33,
                                        column: 6
                                    },
                                    end: {
                                        line: 33,
                                        column: 47
                                    }
                                },
                                '17': {
                                    start: {
                                        line: 36,
                                        column: 6
                                    },
                                    end: {
                                        line: 36,
                                        column: 57
                                    }
                                },
                                '18': {
                                    start: {
                                        line: 37,
                                        column: 6
                                    },
                                    end: {
                                        line: 37,
                                        column: 77
                                    }
                                },
                                '19': {
                                    start: {
                                        line: 42,
                                        column: 4
                                    },
                                    end: {
                                        line: 245,
                                        column: 6
                                    }
                                },
                                '20': {
                                    start: {
                                        line: 44,
                                        column: 8
                                    },
                                    end: {
                                        line: 243,
                                        column: 11
                                    }
                                },
                                '21': {
                                    start: {
                                        line: 45,
                                        column: 21
                                    },
                                    end: {
                                        line: 45,
                                        column: 26
                                    }
                                },
                                '22': {
                                    start: {
                                        line: 47,
                                        column: 10
                                    },
                                    end: {
                                        line: 64,
                                        column: 11
                                    }
                                },
                                '23': {
                                    start: {
                                        line: 48,
                                        column: 12
                                    },
                                    end: {
                                        line: 63,
                                        column: 13
                                    }
                                },
                                '24': {
                                    start: {
                                        line: 49,
                                        column: 14
                                    },
                                    end: {
                                        line: 49,
                                        column: 26
                                    }
                                },
                                '25': {
                                    start: {
                                        line: 51,
                                        column: 14
                                    },
                                    end: {
                                        line: 51,
                                        column: 156
                                    }
                                },
                                '26': {
                                    start: {
                                        line: 53,
                                        column: 17
                                    },
                                    end: {
                                        line: 63,
                                        column: 13
                                    }
                                },
                                '27': {
                                    start: {
                                        line: 56,
                                        column: 16
                                    },
                                    end: {
                                        line: 56,
                                        column: 144
                                    }
                                },
                                '28': {
                                    start: {
                                        line: 57,
                                        column: 39
                                    },
                                    end: {
                                        line: 57,
                                        column: 51
                                    }
                                },
                                '29': {
                                    start: {
                                        line: 58,
                                        column: 14
                                    },
                                    end: {
                                        line: 58,
                                        column: 26
                                    }
                                },
                                '30': {
                                    start: {
                                        line: 59,
                                        column: 14
                                    },
                                    end: {
                                        line: 59,
                                        column: 73
                                    }
                                },
                                '31': {
                                    start: {
                                        line: 62,
                                        column: 14
                                    },
                                    end: {
                                        line: 62,
                                        column: 46
                                    }
                                },
                                '32': {
                                    start: {
                                        line: 65,
                                        column: 10
                                    },
                                    end: {
                                        line: 240,
                                        column: 13
                                    }
                                },
                                '33': {
                                    start: {
                                        line: 66,
                                        column: 12
                                    },
                                    end: {
                                        line: 238,
                                        column: 13
                                    }
                                },
                                '34': {
                                    start: {
                                        line: 67,
                                        column: 14
                                    },
                                    end: {
                                        line: 237,
                                        column: 15
                                    }
                                },
                                '35': {
                                    start: {
                                        line: 68,
                                        column: 26
                                    },
                                    end: {
                                        line: 68,
                                        column: 47
                                    }
                                },
                                '36': {
                                    start: {
                                        line: 69,
                                        column: 29
                                    },
                                    end: {
                                        line: 73,
                                        column: 64
                                    }
                                },
                                '37': {
                                    start: {
                                        line: 72,
                                        column: 20
                                    },
                                    end: {
                                        line: 72,
                                        column: 125
                                    }
                                },
                                '38': {
                                    start: {
                                        line: 73,
                                        column: 43
                                    },
                                    end: {
                                        line: 73,
                                        column: 55
                                    }
                                },
                                '39': {
                                    start: {
                                        line: 74,
                                        column: 16
                                    },
                                    end: {
                                        line: 236,
                                        column: 17
                                    }
                                },
                                '40': {
                                    start: {
                                        line: 75,
                                        column: 18
                                    },
                                    end: {
                                        line: 111,
                                        column: 21
                                    }
                                },
                                '41': {
                                    start: {
                                        line: 77,
                                        column: 22
                                    },
                                    end: {
                                        line: 81,
                                        column: 59
                                    }
                                },
                                '42': {
                                    start: {
                                        line: 79,
                                        column: 24
                                    },
                                    end: {
                                        line: 79,
                                        column: 129
                                    }
                                },
                                '43': {
                                    start: {
                                        line: 80,
                                        column: 47
                                    },
                                    end: {
                                        line: 80,
                                        column: 59
                                    }
                                },
                                '44': {
                                    start: {
                                        line: 82,
                                        column: 20
                                    },
                                    end: {
                                        line: 110,
                                        column: 21
                                    }
                                },
                                '45': {
                                    start: {
                                        line: 83,
                                        column: 22
                                    },
                                    end: {
                                        line: 90,
                                        column: 23
                                    }
                                },
                                '46': {
                                    start: {
                                        line: 84,
                                        column: 45
                                    },
                                    end: {
                                        line: 84,
                                        column: 51
                                    }
                                },
                                '47': {
                                    start: {
                                        line: 85,
                                        column: 24
                                    },
                                    end: {
                                        line: 85,
                                        column: 87
                                    }
                                },
                                '48': {
                                    start: {
                                        line: 86,
                                        column: 24
                                    },
                                    end: {
                                        line: 86,
                                        column: 59
                                    }
                                },
                                '49': {
                                    start: {
                                        line: 87,
                                        column: 24
                                    },
                                    end: {
                                        line: 89,
                                        column: 25
                                    }
                                },
                                '50': {
                                    start: {
                                        line: 88,
                                        column: 26
                                    },
                                    end: {
                                        line: 88,
                                        column: 81
                                    }
                                },
                                '51': {
                                    start: {
                                        line: 91,
                                        column: 22
                                    },
                                    end: {
                                        line: 94,
                                        column: 23
                                    }
                                },
                                '52': {
                                    start: {
                                        line: 92,
                                        column: 24
                                    },
                                    end: {
                                        line: 93,
                                        column: 79
                                    }
                                },
                                '53': {
                                    start: {
                                        line: 97,
                                        column: 22
                                    },
                                    end: {
                                        line: 104,
                                        column: 23
                                    }
                                },
                                '54': {
                                    start: {
                                        line: 98,
                                        column: 24
                                    },
                                    end: {
                                        line: 98,
                                        column: 39
                                    }
                                },
                                '55': {
                                    start: {
                                        line: 101,
                                        column: 24
                                    },
                                    end: {
                                        line: 101,
                                        column: 74
                                    }
                                },
                                '56': {
                                    start: {
                                        line: 102,
                                        column: 24
                                    },
                                    end: {
                                        line: 102,
                                        column: 41
                                    }
                                },
                                '57': {
                                    start: {
                                        line: 103,
                                        column: 24
                                    },
                                    end: {
                                        line: 103,
                                        column: 32
                                    }
                                },
                                '58': {
                                    start: {
                                        line: 107,
                                        column: 46
                                    },
                                    end: {
                                        line: 107,
                                        column: 116
                                    }
                                },
                                '59': {
                                    start: {
                                        line: 108,
                                        column: 22
                                    },
                                    end: {
                                        line: 108,
                                        column: 74
                                    }
                                },
                                '60': {
                                    start: {
                                        line: 109,
                                        column: 22
                                    },
                                    end: {
                                        line: 109,
                                        column: 47
                                    }
                                },
                                '61': {
                                    start: {
                                        line: 113,
                                        column: 21
                                    },
                                    end: {
                                        line: 236,
                                        column: 17
                                    }
                                },
                                '62': {
                                    start: {
                                        line: 116,
                                        column: 48
                                    },
                                    end: {
                                        line: 116,
                                        column: 50
                                    }
                                },
                                '63': {
                                    start: {
                                        line: 117,
                                        column: 18
                                    },
                                    end: {
                                        line: 235,
                                        column: 21
                                    }
                                },
                                '64': {
                                    start: {
                                        line: 118,
                                        column: 20
                                    },
                                    end: {
                                        line: 234,
                                        column: 21
                                    }
                                },
                                '65': {
                                    start: {
                                        line: 119,
                                        column: 22
                                    },
                                    end: {
                                        line: 119,
                                        column: 102
                                    }
                                },
                                '66': {
                                    start: {
                                        line: 120,
                                        column: 22
                                    },
                                    end: {
                                        line: 131,
                                        column: 30
                                    }
                                },
                                '67': {
                                    start: {
                                        line: 134,
                                        column: 22
                                    },
                                    end: {
                                        line: 141,
                                        column: 23
                                    }
                                },
                                '68': {
                                    start: {
                                        line: 135,
                                        column: 24
                                    },
                                    end: {
                                        line: 135,
                                        column: 39
                                    }
                                },
                                '69': {
                                    start: {
                                        line: 138,
                                        column: 24
                                    },
                                    end: {
                                        line: 138,
                                        column: 75
                                    }
                                },
                                '70': {
                                    start: {
                                        line: 139,
                                        column: 24
                                    },
                                    end: {
                                        line: 139,
                                        column: 41
                                    }
                                },
                                '71': {
                                    start: {
                                        line: 140,
                                        column: 24
                                    },
                                    end: {
                                        line: 140,
                                        column: 32
                                    }
                                },
                                '72': {
                                    start: {
                                        line: 144,
                                        column: 46
                                    },
                                    end: {
                                        line: 144,
                                        column: 110
                                    }
                                },
                                '73': {
                                    start: {
                                        line: 145,
                                        column: 22
                                    },
                                    end: {
                                        line: 160,
                                        column: 23
                                    }
                                },
                                '74': {
                                    start: {
                                        line: 146,
                                        column: 24
                                    },
                                    end: {
                                        line: 146,
                                        column: 76
                                    }
                                },
                                '75': {
                                    start: {
                                        line: 149,
                                        column: 36
                                    },
                                    end: {
                                        line: 150,
                                        column: 115
                                    }
                                },
                                '76': {
                                    start: {
                                        line: 151,
                                        column: 24
                                    },
                                    end: {
                                        line: 159,
                                        column: 25
                                    }
                                },
                                '77': {
                                    start: {
                                        line: 152,
                                        column: 43
                                    },
                                    end: {
                                        line: 152,
                                        column: 51
                                    }
                                },
                                '78': {
                                    start: {
                                        line: 153,
                                        column: 26
                                    },
                                    end: {
                                        line: 158,
                                        column: 27
                                    }
                                },
                                '79': {
                                    start: {
                                        line: 154,
                                        column: 28
                                    },
                                    end: {
                                        line: 154,
                                        column: 49
                                    }
                                },
                                '80': {
                                    start: {
                                        line: 155,
                                        column: 28
                                    },
                                    end: {
                                        line: 157,
                                        column: 65
                                    }
                                },
                                '81': {
                                    start: {
                                        line: 156,
                                        column: 44
                                    },
                                    end: {
                                        line: 156,
                                        column: 126
                                    }
                                },
                                '82': {
                                    start: {
                                        line: 156,
                                        column: 72
                                    },
                                    end: {
                                        line: 156,
                                        column: 124
                                    }
                                },
                                '83': {
                                    start: {
                                        line: 157,
                                        column: 42
                                    },
                                    end: {
                                        line: 157,
                                        column: 63
                                    }
                                },
                                '84': {
                                    start: {
                                        line: 161,
                                        column: 22
                                    },
                                    end: {
                                        line: 233,
                                        column: 23
                                    }
                                },
                                '85': {
                                    start: {
                                        line: 162,
                                        column: 24
                                    },
                                    end: {
                                        line: 162,
                                        column: 49
                                    }
                                },
                                '86': {
                                    start: {
                                        line: 165,
                                        column: 39
                                    },
                                    end: {
                                        line: 165,
                                        column: 56
                                    }
                                },
                                '87': {
                                    start: {
                                        line: 166,
                                        column: 24
                                    },
                                    end: {
                                        line: 215,
                                        column: 27
                                    }
                                },
                                '88': {
                                    start: {
                                        line: 167,
                                        column: 26
                                    },
                                    end: {
                                        line: 214,
                                        column: 28
                                    }
                                },
                                '89': {
                                    start: {
                                        line: 168,
                                        column: 28
                                    },
                                    end: {
                                        line: 213,
                                        column: 29
                                    }
                                },
                                '90': {
                                    start: {
                                        line: 169,
                                        column: 47
                                    },
                                    end: {
                                        line: 169,
                                        column: 98
                                    }
                                },
                                '91': {
                                    start: {
                                        line: 170,
                                        column: 30
                                    },
                                    end: {
                                        line: 175,
                                        column: 31
                                    }
                                },
                                '92': {
                                    start: {
                                        line: 171,
                                        column: 32
                                    },
                                    end: {
                                        line: 171,
                                        column: 57
                                    }
                                },
                                '93': {
                                    start: {
                                        line: 174,
                                        column: 32
                                    },
                                    end: {
                                        line: 174,
                                        column: 124
                                    }
                                },
                                '94': {
                                    start: {
                                        line: 176,
                                        column: 30
                                    },
                                    end: {
                                        line: 176,
                                        column: 42
                                    }
                                },
                                '95': {
                                    start: {
                                        line: 178,
                                        column: 33
                                    },
                                    end: {
                                        line: 213,
                                        column: 29
                                    }
                                },
                                '96': {
                                    start: {
                                        line: 179,
                                        column: 50
                                    },
                                    end: {
                                        line: 179,
                                        column: 87
                                    }
                                },
                                '97': {
                                    start: {
                                        line: 180,
                                        column: 30
                                    },
                                    end: {
                                        line: 209,
                                        column: 33
                                    }
                                },
                                '98': {
                                    start: {
                                        line: 181,
                                        column: 32
                                    },
                                    end: {
                                        line: 186,
                                        column: 33
                                    }
                                },
                                '99': {
                                    start: {
                                        line: 182,
                                        column: 34
                                    },
                                    end: {
                                        line: 182,
                                        column: 63
                                    }
                                },
                                '100': {
                                    start: {
                                        line: 185,
                                        column: 34
                                    },
                                    end: {
                                        line: 185,
                                        column: 55
                                    }
                                },
                                '101': {
                                    start: {
                                        line: 188,
                                        column: 49
                                    },
                                    end: {
                                        line: 188,
                                        column: 101
                                    }
                                },
                                '102': {
                                    start: {
                                        line: 189,
                                        column: 32
                                    },
                                    end: {
                                        line: 194,
                                        column: 33
                                    }
                                },
                                '103': {
                                    start: {
                                        line: 190,
                                        column: 34
                                    },
                                    end: {
                                        line: 190,
                                        column: 57
                                    }
                                },
                                '104': {
                                    start: {
                                        line: 193,
                                        column: 34
                                    },
                                    end: {
                                        line: 193,
                                        column: 122
                                    }
                                },
                                '105': {
                                    start: {
                                        line: 195,
                                        column: 32
                                    },
                                    end: {
                                        line: 195,
                                        column: 44
                                    }
                                },
                                '106': {
                                    start: {
                                        line: 197,
                                        column: 32
                                    },
                                    end: {
                                        line: 197,
                                        column: 108
                                    }
                                },
                                '107': {
                                    start: {
                                        line: 198,
                                        column: 32
                                    },
                                    end: {
                                        line: 208,
                                        column: 33
                                    }
                                },
                                '108': {
                                    start: {
                                        line: 199,
                                        column: 34
                                    },
                                    end: {
                                        line: 199,
                                        column: 46
                                    }
                                },
                                '109': {
                                    start: {
                                        line: 202,
                                        column: 34
                                    },
                                    end: {
                                        line: 207,
                                        column: 35
                                    }
                                },
                                '110': {
                                    start: {
                                        line: 203,
                                        column: 36
                                    },
                                    end: {
                                        line: 203,
                                        column: 155
                                    }
                                },
                                '111': {
                                    start: {
                                        line: 206,
                                        column: 36
                                    },
                                    end: {
                                        line: 206,
                                        column: 48
                                    }
                                },
                                '112': {
                                    start: {
                                        line: 212,
                                        column: 30
                                    },
                                    end: {
                                        line: 212,
                                        column: 42
                                    }
                                },
                                '113': {
                                    start: {
                                        line: 216,
                                        column: 24
                                    },
                                    end: {
                                        line: 232,
                                        column: 27
                                    }
                                },
                                '114': {
                                    start: {
                                        line: 218,
                                        column: 26
                                    },
                                    end: {
                                        line: 229,
                                        column: 34
                                    }
                                },
                                '115': {
                                    start: {
                                        line: 231,
                                        column: 26
                                    },
                                    end: {
                                        line: 231,
                                        column: 98
                                    }
                                },
                                '116': {
                                    start: {
                                        line: 239,
                                        column: 12
                                    },
                                    end: {
                                        line: 239,
                                        column: 28
                                    }
                                },
                                '117': {
                                    start: {
                                        line: 242,
                                        column: 10
                                    },
                                    end: {
                                        line: 242,
                                        column: 22
                                    }
                                },
                                '118': {
                                    start: {
                                        line: 249,
                                        column: 16
                                    },
                                    end: {
                                        line: 249,
                                        column: 41
                                    }
                                },
                                '119': {
                                    start: {
                                        line: 251,
                                        column: 4
                                    },
                                    end: {
                                        line: 255,
                                        column: 5
                                    }
                                },
                                '120': {
                                    start: {
                                        line: 252,
                                        column: 6
                                    },
                                    end: {
                                        line: 254,
                                        column: 66
                                    }
                                },
                                '121': {
                                    start: {
                                        line: 256,
                                        column: 4
                                    },
                                    end: {
                                        line: 256,
                                        column: 16
                                    }
                                },
                                '122': {
                                    start: {
                                        line: 260,
                                        column: 16
                                    },
                                    end: {
                                        line: 260,
                                        column: 41
                                    }
                                },
                                '123': {
                                    start: {
                                        line: 261,
                                        column: 4
                                    },
                                    end: {
                                        line: 265,
                                        column: 5
                                    }
                                },
                                '124': {
                                    start: {
                                        line: 262,
                                        column: 6
                                    },
                                    end: {
                                        line: 264,
                                        column: 93
                                    }
                                },
                                '125': {
                                    start: {
                                        line: 266,
                                        column: 4
                                    },
                                    end: {
                                        line: 266,
                                        column: 16
                                    }
                                },
                                '126': {
                                    start: {
                                        line: 270,
                                        column: 4
                                    },
                                    end: {
                                        line: 307,
                                        column: 5
                                    }
                                },
                                '127': {
                                    start: {
                                        line: 271,
                                        column: 17
                                    },
                                    end: {
                                        line: 271,
                                        column: 31
                                    }
                                },
                                '128': {
                                    start: {
                                        line: 272,
                                        column: 6
                                    },
                                    end: {
                                        line: 303,
                                        column: 7
                                    }
                                },
                                '129': {
                                    start: {
                                        line: 274,
                                        column: 8
                                    },
                                    end: {
                                        line: 280,
                                        column: 9
                                    }
                                },
                                '130': {
                                    start: {
                                        line: 275,
                                        column: 10
                                    },
                                    end: {
                                        line: 275,
                                        column: 47
                                    }
                                },
                                '131': {
                                    start: {
                                        line: 278,
                                        column: 10
                                    },
                                    end: {
                                        line: 278,
                                        column: 83
                                    }
                                },
                                '132': {
                                    start: {
                                        line: 279,
                                        column: 10
                                    },
                                    end: {
                                        line: 279,
                                        column: 17
                                    }
                                },
                                '133': {
                                    start: {
                                        line: 281,
                                        column: 17
                                    },
                                    end: {
                                        line: 281,
                                        column: 32
                                    }
                                },
                                '134': {
                                    start: {
                                        line: 282,
                                        column: 19
                                    },
                                    end: {
                                        line: 282,
                                        column: 34
                                    }
                                },
                                '135': {
                                    start: {
                                        line: 283,
                                        column: 25
                                    },
                                    end: {
                                        line: 283,
                                        column: 32
                                    }
                                },
                                '136': {
                                    start: {
                                        line: 285,
                                        column: 8
                                    },
                                    end: {
                                        line: 302,
                                        column: 9
                                    }
                                },
                                '137': {
                                    start: {
                                        line: 287,
                                        column: 10
                                    },
                                    end: {
                                        line: 297,
                                        column: 11
                                    }
                                },
                                '138': {
                                    start: {
                                        line: 289,
                                        column: 12
                                    },
                                    end: {
                                        line: 289,
                                        column: 41
                                    }
                                },
                                '139': {
                                    start: {
                                        line: 290,
                                        column: 12
                                    },
                                    end: {
                                        line: 290,
                                        column: 18
                                    }
                                },
                                '140': {
                                    start: {
                                        line: 292,
                                        column: 12
                                    },
                                    end: {
                                        line: 292,
                                        column: 50
                                    }
                                },
                                '141': {
                                    start: {
                                        line: 293,
                                        column: 12
                                    },
                                    end: {
                                        line: 293,
                                        column: 18
                                    }
                                },
                                '142': {
                                    start: {
                                        line: 295,
                                        column: 12
                                    },
                                    end: {
                                        line: 295,
                                        column: 65
                                    }
                                },
                                '143': {
                                    start: {
                                        line: 296,
                                        column: 12
                                    },
                                    end: {
                                        line: 296,
                                        column: 18
                                    }
                                },
                                '144': {
                                    start: {
                                        line: 298,
                                        column: 10
                                    },
                                    end: {
                                        line: 298,
                                        column: 79
                                    }
                                },
                                '145': {
                                    start: {
                                        line: 301,
                                        column: 10
                                    },
                                    end: {
                                        line: 301,
                                        column: 83
                                    }
                                },
                                '146': {
                                    start: {
                                        line: 306,
                                        column: 6
                                    },
                                    end: {
                                        line: 306,
                                        column: 65
                                    }
                                },
                                '147': {
                                    start: {
                                        line: 311,
                                        column: 4
                                    },
                                    end: {
                                        line: 345,
                                        column: 5
                                    }
                                },
                                '148': {
                                    start: {
                                        line: 312,
                                        column: 19
                                    },
                                    end: {
                                        line: 312,
                                        column: 147
                                    }
                                },
                                '149': {
                                    start: {
                                        line: 312,
                                        column: 115
                                    },
                                    end: {
                                        line: 312,
                                        column: 143
                                    }
                                },
                                '150': {
                                    start: {
                                        line: 313,
                                        column: 16
                                    },
                                    end: {
                                        line: 313,
                                        column: 57
                                    }
                                },
                                '151': {
                                    start: {
                                        line: 314,
                                        column: 6
                                    },
                                    end: {
                                        line: 336,
                                        column: 7
                                    }
                                },
                                '152': {
                                    start: {
                                        line: 315,
                                        column: 8
                                    },
                                    end: {
                                        line: 335,
                                        column: 13
                                    }
                                },
                                '153': {
                                    start: {
                                        line: 317,
                                        column: 32
                                    },
                                    end: {
                                        line: 317,
                                        column: 102
                                    }
                                },
                                '154': {
                                    start: {
                                        line: 318,
                                        column: 12
                                    },
                                    end: {
                                        line: 334,
                                        column: 13
                                    }
                                },
                                '155': {
                                    start: {
                                        line: 319,
                                        column: 14
                                    },
                                    end: {
                                        line: 330,
                                        column: 15
                                    }
                                },
                                '156': {
                                    start: {
                                        line: 320,
                                        column: 16
                                    },
                                    end: {
                                        line: 325,
                                        column: 19
                                    }
                                },
                                '157': {
                                    start: {
                                        line: 321,
                                        column: 28
                                    },
                                    end: {
                                        line: 321,
                                        column: 64
                                    }
                                },
                                '158': {
                                    start: {
                                        line: 322,
                                        column: 18
                                    },
                                    end: {
                                        line: 324,
                                        column: 19
                                    }
                                },
                                '159': {
                                    start: {
                                        line: 323,
                                        column: 20
                                    },
                                    end: {
                                        line: 323,
                                        column: 45
                                    }
                                },
                                '160': {
                                    start: {
                                        line: 326,
                                        column: 16
                                    },
                                    end: {
                                        line: 326,
                                        column: 92
                                    }
                                },
                                '161': {
                                    start: {
                                        line: 326,
                                        column: 40
                                    },
                                    end: {
                                        line: 326,
                                        column: 65
                                    }
                                },
                                '162': {
                                    start: {
                                        line: 329,
                                        column: 16
                                    },
                                    end: {
                                        line: 329,
                                        column: 46
                                    }
                                },
                                '163': {
                                    start: {
                                        line: 333,
                                        column: 14
                                    },
                                    end: {
                                        line: 333,
                                        column: 82
                                    }
                                },
                                '164': {
                                    start: {
                                        line: 333,
                                        column: 38
                                    },
                                    end: {
                                        line: 333,
                                        column: 63
                                    }
                                },
                                '165': {
                                    start: {
                                        line: 339,
                                        column: 16
                                    },
                                    end: {
                                        line: 339,
                                        column: 68
                                    }
                                },
                                '166': {
                                    start: {
                                        line: 340,
                                        column: 18
                                    },
                                    end: {
                                        line: 340,
                                        column: 66
                                    }
                                },
                                '167': {
                                    start: {
                                        line: 341,
                                        column: 6
                                    },
                                    end: {
                                        line: 343,
                                        column: 7
                                    }
                                },
                                '168': {
                                    start: {
                                        line: 342,
                                        column: 8
                                    },
                                    end: {
                                        line: 342,
                                        column: 31
                                    }
                                },
                                '169': {
                                    start: {
                                        line: 344,
                                        column: 6
                                    },
                                    end: {
                                        line: 344,
                                        column: 36
                                    }
                                },
                                '170': {
                                    start: {
                                        line: 348,
                                        column: 2
                                    },
                                    end: {
                                        line: 361,
                                        column: 4
                                    }
                                }
                            },
                            fnMap: {
                                '0': {
                                    name: '(anonymous_0)',
                                    decl: {
                                        start: {
                                            line: 6,
                                            column: 17
                                        },
                                        end: {
                                            line: 6,
                                            column: 18
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 6,
                                            column: 45
                                        },
                                        end: {
                                            line: 362,
                                            column: 1
                                        }
                                    },
                                    line: 6
                                },
                                '1': {
                                    name: 'onInstall',
                                    decl: {
                                        start: {
                                            line: 10,
                                            column: 11
                                        },
                                        end: {
                                            line: 10,
                                            column: 20
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 10,
                                            column: 28
                                        },
                                        end: {
                                            line: 13,
                                            column: 3
                                        }
                                    },
                                    line: 10
                                },
                                '2': {
                                    name: 'onActivate',
                                    decl: {
                                        start: {
                                            line: 15,
                                            column: 11
                                        },
                                        end: {
                                            line: 15,
                                            column: 21
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 15,
                                            column: 29
                                        },
                                        end: {
                                            line: 18,
                                            column: 3
                                        }
                                    },
                                    line: 15
                                },
                                '3': {
                                    name: '(anonymous_3)',
                                    decl: {
                                        start: {
                                            line: 17,
                                            column: 39
                                        },
                                        end: {
                                            line: 17,
                                            column: 40
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 17,
                                            column: 47
                                        },
                                        end: {
                                            line: 17,
                                            column: 129
                                        }
                                    },
                                    line: 17
                                },
                                '4': {
                                    name: '(anonymous_4)',
                                    decl: {
                                        start: {
                                            line: 17,
                                            column: 68
                                        },
                                        end: {
                                            line: 17,
                                            column: 69
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 17,
                                            column: 75
                                        },
                                        end: {
                                            line: 17,
                                            column: 127
                                        }
                                    },
                                    line: 17
                                },
                                '5': {
                                    name: 'onMessage',
                                    decl: {
                                        start: {
                                            line: 20,
                                            column: 11
                                        },
                                        end: {
                                            line: 20,
                                            column: 20
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 20,
                                            column: 28
                                        },
                                        end: {
                                            line: 39,
                                            column: 3
                                        }
                                    },
                                    line: 20
                                },
                                '6': {
                                    name: 'onFetch',
                                    decl: {
                                        start: {
                                            line: 41,
                                            column: 11
                                        },
                                        end: {
                                            line: 41,
                                            column: 18
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 41,
                                            column: 26
                                        },
                                        end: {
                                            line: 246,
                                            column: 3
                                        }
                                    },
                                    line: 41
                                },
                                '7': {
                                    name: '(anonymous_7)',
                                    decl: {
                                        start: {
                                            line: 43,
                                            column: 45
                                        },
                                        end: {
                                            line: 43,
                                            column: 46
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 43,
                                            column: 61
                                        },
                                        end: {
                                            line: 244,
                                            column: 7
                                        }
                                    },
                                    line: 43
                                },
                                '8': {
                                    name: '(anonymous_8)',
                                    decl: {
                                        start: {
                                            line: 44,
                                            column: 47
                                        },
                                        end: {
                                            line: 44,
                                            column: 48
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 44,
                                            column: 66
                                        },
                                        end: {
                                            line: 241,
                                            column: 9
                                        }
                                    },
                                    line: 44
                                },
                                '9': {
                                    name: '(anonymous_9)',
                                    decl: {
                                        start: {
                                            line: 55,
                                            column: 42
                                        },
                                        end: {
                                            line: 55,
                                            column: 43
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 56,
                                            column: 16
                                        },
                                        end: {
                                            line: 56,
                                            column: 144
                                        }
                                    },
                                    line: 56
                                },
                                '10': {
                                    name: '(anonymous_10)',
                                    decl: {
                                        start: {
                                            line: 57,
                                            column: 23
                                        },
                                        end: {
                                            line: 57,
                                            column: 24
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 57,
                                            column: 39
                                        },
                                        end: {
                                            line: 57,
                                            column: 51
                                        }
                                    },
                                    line: 57
                                },
                                '11': {
                                    name: '(anonymous_11)',
                                    decl: {
                                        start: {
                                            line: 65,
                                            column: 49
                                        },
                                        end: {
                                            line: 65,
                                            column: 50
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 65,
                                            column: 68
                                        },
                                        end: {
                                            line: 240,
                                            column: 11
                                        }
                                    },
                                    line: 65
                                },
                                '12': {
                                    name: '(anonymous_12)',
                                    decl: {
                                        start: {
                                            line: 71,
                                            column: 48
                                        },
                                        end: {
                                            line: 71,
                                            column: 49
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 72,
                                            column: 20
                                        },
                                        end: {
                                            line: 72,
                                            column: 125
                                        }
                                    },
                                    line: 72
                                },
                                '13': {
                                    name: '(anonymous_13)',
                                    decl: {
                                        start: {
                                            line: 73,
                                            column: 27
                                        },
                                        end: {
                                            line: 73,
                                            column: 28
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 73,
                                            column: 43
                                        },
                                        end: {
                                            line: 73,
                                            column: 55
                                        }
                                    },
                                    line: 73
                                },
                                '14': {
                                    name: '(anonymous_14)',
                                    decl: {
                                        start: {
                                            line: 75,
                                            column: 46
                                        },
                                        end: {
                                            line: 75,
                                            column: 47
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 75,
                                            column: 69
                                        },
                                        end: {
                                            line: 111,
                                            column: 19
                                        }
                                    },
                                    line: 75
                                },
                                '15': {
                                    name: '(anonymous_15)',
                                    decl: {
                                        start: {
                                            line: 78,
                                            column: 57
                                        },
                                        end: {
                                            line: 78,
                                            column: 58
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 79,
                                            column: 24
                                        },
                                        end: {
                                            line: 79,
                                            column: 129
                                        }
                                    },
                                    line: 79
                                },
                                '16': {
                                    name: '(anonymous_16)',
                                    decl: {
                                        start: {
                                            line: 80,
                                            column: 31
                                        },
                                        end: {
                                            line: 80,
                                            column: 32
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 80,
                                            column: 47
                                        },
                                        end: {
                                            line: 80,
                                            column: 59
                                        }
                                    },
                                    line: 80
                                },
                                '17': {
                                    name: '(anonymous_17)',
                                    decl: {
                                        start: {
                                            line: 117,
                                            column: 46
                                        },
                                        end: {
                                            line: 117,
                                            column: 47
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 117,
                                            column: 69
                                        },
                                        end: {
                                            line: 235,
                                            column: 19
                                        }
                                    },
                                    line: 117
                                },
                                '18': {
                                    name: '(anonymous_18)',
                                    decl: {
                                        start: {
                                            line: 156,
                                            column: 36
                                        },
                                        end: {
                                            line: 156,
                                            column: 37
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 156,
                                            column: 44
                                        },
                                        end: {
                                            line: 156,
                                            column: 126
                                        }
                                    },
                                    line: 156
                                },
                                '19': {
                                    name: '(anonymous_19)',
                                    decl: {
                                        start: {
                                            line: 156,
                                            column: 65
                                        },
                                        end: {
                                            line: 156,
                                            column: 66
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 156,
                                            column: 72
                                        },
                                        end: {
                                            line: 156,
                                            column: 124
                                        }
                                    },
                                    line: 156
                                },
                                '20': {
                                    name: '(anonymous_20)',
                                    decl: {
                                        start: {
                                            line: 157,
                                            column: 36
                                        },
                                        end: {
                                            line: 157,
                                            column: 37
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 157,
                                            column: 42
                                        },
                                        end: {
                                            line: 157,
                                            column: 63
                                        }
                                    },
                                    line: 157
                                },
                                '21': {
                                    name: '(anonymous_21)',
                                    decl: {
                                        start: {
                                            line: 166,
                                            column: 56
                                        },
                                        end: {
                                            line: 166,
                                            column: 57
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 166,
                                            column: 66
                                        },
                                        end: {
                                            line: 215,
                                            column: 25
                                        }
                                    },
                                    line: 166
                                },
                                '22': {
                                    name: '(anonymous_22)',
                                    decl: {
                                        start: {
                                            line: 167,
                                            column: 51
                                        },
                                        end: {
                                            line: 167,
                                            column: 52
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 167,
                                            column: 57
                                        },
                                        end: {
                                            line: 214,
                                            column: 27
                                        }
                                    },
                                    line: 167
                                },
                                '23': {
                                    name: '(anonymous_23)',
                                    decl: {
                                        start: {
                                            line: 180,
                                            column: 63
                                        },
                                        end: {
                                            line: 180,
                                            column: 64
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 180,
                                            column: 81
                                        },
                                        end: {
                                            line: 187,
                                            column: 31
                                        }
                                    },
                                    line: 180
                                },
                                '24': {
                                    name: '(anonymous_24)',
                                    decl: {
                                        start: {
                                            line: 187,
                                            column: 38
                                        },
                                        end: {
                                            line: 187,
                                            column: 39
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 187,
                                            column: 46
                                        },
                                        end: {
                                            line: 196,
                                            column: 31
                                        }
                                    },
                                    line: 187
                                },
                                '25': {
                                    name: '(anonymous_25)',
                                    decl: {
                                        start: {
                                            line: 196,
                                            column: 39
                                        },
                                        end: {
                                            line: 196,
                                            column: 40
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 196,
                                            column: 48
                                        },
                                        end: {
                                            line: 209,
                                            column: 31
                                        }
                                    },
                                    line: 196
                                },
                                '26': {
                                    name: '(anonymous_26)',
                                    decl: {
                                        start: {
                                            line: 216,
                                            column: 45
                                        },
                                        end: {
                                            line: 216,
                                            column: 46
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 216,
                                            column: 57
                                        },
                                        end: {
                                            line: 232,
                                            column: 25
                                        }
                                    },
                                    line: 216
                                },
                                '27': {
                                    name: '(anonymous_27)',
                                    decl: {
                                        start: {
                                            line: 241,
                                            column: 17
                                        },
                                        end: {
                                            line: 241,
                                            column: 18
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 241,
                                            column: 33
                                        },
                                        end: {
                                            line: 243,
                                            column: 9
                                        }
                                    },
                                    line: 241
                                },
                                '28': {
                                    name: 'encodeHtml',
                                    decl: {
                                        start: {
                                            line: 248,
                                            column: 11
                                        },
                                        end: {
                                            line: 248,
                                            column: 21
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 248,
                                            column: 28
                                        },
                                        end: {
                                            line: 257,
                                            column: 3
                                        }
                                    },
                                    line: 248
                                },
                                '29': {
                                    name: 'decodeHtml',
                                    decl: {
                                        start: {
                                            line: 259,
                                            column: 11
                                        },
                                        end: {
                                            line: 259,
                                            column: 21
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 259,
                                            column: 28
                                        },
                                        end: {
                                            line: 267,
                                            column: 3
                                        }
                                    },
                                    line: 259
                                },
                                '30': {
                                    name: 'hookWorkerHandler',
                                    decl: {
                                        start: {
                                            line: 269,
                                            column: 11
                                        },
                                        end: {
                                            line: 269,
                                            column: 28
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 269,
                                            column: 36
                                        },
                                        end: {
                                            line: 308,
                                            column: 3
                                        }
                                    },
                                    line: 269
                                },
                                '31': {
                                    name: '(anonymous_31)',
                                    decl: {
                                        start: {
                                            line: 272,
                                            column: 23
                                        },
                                        end: {
                                            line: 272,
                                            column: 24
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 272,
                                            column: 44
                                        },
                                        end: {
                                            line: 303,
                                            column: 7
                                        }
                                    },
                                    line: 272
                                },
                                '32': {
                                    name: 'registerServiceWorker',
                                    decl: {
                                        start: {
                                            line: 310,
                                            column: 11
                                        },
                                        end: {
                                            line: 310,
                                            column: 32
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 310,
                                            column: 132
                                        },
                                        end: {
                                            line: 346,
                                            column: 3
                                        }
                                    },
                                    line: 310
                                },
                                '33': {
                                    name: '(anonymous_33)',
                                    decl: {
                                        start: {
                                            line: 312,
                                            column: 110
                                        },
                                        end: {
                                            line: 312,
                                            column: 111
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 312,
                                            column: 115
                                        },
                                        end: {
                                            line: 312,
                                            column: 143
                                        }
                                    },
                                    line: 312
                                },
                                '34': {
                                    name: '(anonymous_34)',
                                    decl: {
                                        start: {
                                            line: 316,
                                            column: 16
                                        },
                                        end: {
                                            line: 316,
                                            column: 17
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 316,
                                            column: 32
                                        },
                                        end: {
                                            line: 335,
                                            column: 11
                                        }
                                    },
                                    line: 316
                                },
                                '35': {
                                    name: '(anonymous_35)',
                                    decl: {
                                        start: {
                                            line: 320,
                                            column: 62
                                        },
                                        end: {
                                            line: 320,
                                            column: 63
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 320,
                                            column: 75
                                        },
                                        end: {
                                            line: 325,
                                            column: 17
                                        }
                                    },
                                    line: 320
                                },
                                '36': {
                                    name: '(anonymous_36)',
                                    decl: {
                                        start: {
                                            line: 326,
                                            column: 27
                                        },
                                        end: {
                                            line: 326,
                                            column: 28
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 326,
                                            column: 38
                                        },
                                        end: {
                                            line: 326,
                                            column: 67
                                        }
                                    },
                                    line: 326
                                },
                                '37': {
                                    name: '(anonymous_37)',
                                    decl: {
                                        start: {
                                            line: 333,
                                            column: 25
                                        },
                                        end: {
                                            line: 333,
                                            column: 26
                                        }
                                    },
                                    loc: {
                                        start: {
                                            line: 333,
                                            column: 36
                                        },
                                        end: {
                                            line: 333,
                                            column: 65
                                        }
                                    },
                                    line: 333
                                }
                            },
                            branchMap: {
                                '0': {
                                    loc: {
                                        start: {
                                            line: 12,
                                            column: 14
                                        },
                                        end: {
                                            line: 12,
                                            column: 69
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 12,
                                                column: 14
                                            },
                                            end: {
                                                line: 12,
                                                column: 58
                                            }
                                        },
                                        {
                                            start: {
                                                line: 12,
                                                column: 62
                                            },
                                            end: {
                                                line: 12,
                                                column: 69
                                            }
                                        }
                                    ],
                                    line: 12
                                },
                                '1': {
                                    loc: {
                                        start: {
                                            line: 17,
                                            column: 75
                                        },
                                        end: {
                                            line: 17,
                                            column: 127
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 17,
                                                column: 76
                                            },
                                            end: {
                                                line: 17,
                                                column: 104
                                            }
                                        },
                                        {
                                            start: {
                                                line: 17,
                                                column: 109
                                            },
                                            end: {
                                                line: 17,
                                                column: 127
                                            }
                                        }
                                    ],
                                    line: 17
                                },
                                '2': {
                                    loc: {
                                        start: {
                                            line: 21,
                                            column: 4
                                        },
                                        end: {
                                            line: 38,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 21,
                                                column: 4
                                            },
                                            end: {
                                                line: 38,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 21,
                                                column: 4
                                            },
                                            end: {
                                                line: 38,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 21
                                },
                                '3': {
                                    loc: {
                                        start: {
                                            line: 28,
                                            column: 9
                                        },
                                        end: {
                                            line: 38,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 28,
                                                column: 9
                                            },
                                            end: {
                                                line: 38,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 28,
                                                column: 9
                                            },
                                            end: {
                                                line: 38,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 28
                                },
                                '4': {
                                    loc: {
                                        start: {
                                            line: 32,
                                            column: 9
                                        },
                                        end: {
                                            line: 38,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 32,
                                                column: 9
                                            },
                                            end: {
                                                line: 38,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 32,
                                                column: 9
                                            },
                                            end: {
                                                line: 38,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 32
                                },
                                '5': {
                                    loc: {
                                        start: {
                                            line: 32,
                                            column: 13
                                        },
                                        end: {
                                            line: 32,
                                            column: 74
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 32,
                                                column: 13
                                            },
                                            end: {
                                                line: 32,
                                                column: 38
                                            }
                                        },
                                        {
                                            start: {
                                                line: 32,
                                                column: 42
                                            },
                                            end: {
                                                line: 32,
                                                column: 74
                                            }
                                        }
                                    ],
                                    line: 32
                                },
                                '6': {
                                    loc: {
                                        start: {
                                            line: 47,
                                            column: 10
                                        },
                                        end: {
                                            line: 64,
                                            column: 11
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 47,
                                                column: 10
                                            },
                                            end: {
                                                line: 64,
                                                column: 11
                                            }
                                        },
                                        {
                                            start: {
                                                line: 47,
                                                column: 10
                                            },
                                            end: {
                                                line: 64,
                                                column: 11
                                            }
                                        }
                                    ],
                                    line: 47
                                },
                                '7': {
                                    loc: {
                                        start: {
                                            line: 48,
                                            column: 12
                                        },
                                        end: {
                                            line: 63,
                                            column: 13
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 48,
                                                column: 12
                                            },
                                            end: {
                                                line: 63,
                                                column: 13
                                            }
                                        },
                                        {
                                            start: {
                                                line: 48,
                                                column: 12
                                            },
                                            end: {
                                                line: 63,
                                                column: 13
                                            }
                                        }
                                    ],
                                    line: 48
                                },
                                '8': {
                                    loc: {
                                        start: {
                                            line: 48,
                                            column: 16
                                        },
                                        end: {
                                            line: 48,
                                            column: 93
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 48,
                                                column: 16
                                            },
                                            end: {
                                                line: 48,
                                                column: 46
                                            }
                                        },
                                        {
                                            start: {
                                                line: 48,
                                                column: 50
                                            },
                                            end: {
                                                line: 48,
                                                column: 93
                                            }
                                        }
                                    ],
                                    line: 48
                                },
                                '9': {
                                    loc: {
                                        start: {
                                            line: 53,
                                            column: 17
                                        },
                                        end: {
                                            line: 63,
                                            column: 13
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 53,
                                                column: 17
                                            },
                                            end: {
                                                line: 63,
                                                column: 13
                                            }
                                        },
                                        {
                                            start: {
                                                line: 53,
                                                column: 17
                                            },
                                            end: {
                                                line: 63,
                                                column: 13
                                            }
                                        }
                                    ],
                                    line: 53
                                },
                                '10': {
                                    loc: {
                                        start: {
                                            line: 53,
                                            column: 21
                                        },
                                        end: {
                                            line: 57,
                                            column: 59
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 53,
                                                column: 21
                                            },
                                            end: {
                                                line: 53,
                                                column: 51
                                            }
                                        },
                                        {
                                            start: {
                                                line: 54,
                                                column: 14
                                            },
                                            end: {
                                                line: 54,
                                                column: 49
                                            }
                                        },
                                        {
                                            start: {
                                                line: 55,
                                                column: 14
                                            },
                                            end: {
                                                line: 57,
                                                column: 59
                                            }
                                        }
                                    ],
                                    line: 53
                                },
                                '11': {
                                    loc: {
                                        start: {
                                            line: 56,
                                            column: 16
                                        },
                                        end: {
                                            line: 56,
                                            column: 144
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 56,
                                                column: 46
                                            },
                                            end: {
                                                line: 56,
                                                column: 75
                                            }
                                        },
                                        {
                                            start: {
                                                line: 56,
                                                column: 78
                                            },
                                            end: {
                                                line: 56,
                                                column: 144
                                            }
                                        }
                                    ],
                                    line: 56
                                },
                                '12': {
                                    loc: {
                                        start: {
                                            line: 56,
                                            column: 78
                                        },
                                        end: {
                                            line: 56,
                                            column: 144
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 56,
                                                column: 110
                                            },
                                            end: {
                                                line: 56,
                                                column: 136
                                            }
                                        },
                                        {
                                            start: {
                                                line: 56,
                                                column: 139
                                            },
                                            end: {
                                                line: 56,
                                                column: 144
                                            }
                                        }
                                    ],
                                    line: 56
                                },
                                '13': {
                                    loc: {
                                        start: {
                                            line: 57,
                                            column: 39
                                        },
                                        end: {
                                            line: 57,
                                            column: 51
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 57,
                                                column: 39
                                            },
                                            end: {
                                                line: 57,
                                                column: 43
                                            }
                                        },
                                        {
                                            start: {
                                                line: 57,
                                                column: 47
                                            },
                                            end: {
                                                line: 57,
                                                column: 51
                                            }
                                        }
                                    ],
                                    line: 57
                                },
                                '14': {
                                    loc: {
                                        start: {
                                            line: 65,
                                            column: 17
                                        },
                                        end: {
                                            line: 240,
                                            column: 12
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 65,
                                                column: 17
                                            },
                                            end: {
                                                line: 65,
                                                column: 25
                                            }
                                        },
                                        {
                                            start: {
                                                line: 65,
                                                column: 29
                                            },
                                            end: {
                                                line: 240,
                                                column: 12
                                            }
                                        }
                                    ],
                                    line: 65
                                },
                                '15': {
                                    loc: {
                                        start: {
                                            line: 66,
                                            column: 12
                                        },
                                        end: {
                                            line: 238,
                                            column: 13
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 66,
                                                column: 12
                                            },
                                            end: {
                                                line: 238,
                                                column: 13
                                            }
                                        },
                                        {
                                            start: {
                                                line: 66,
                                                column: 12
                                            },
                                            end: {
                                                line: 238,
                                                column: 13
                                            }
                                        }
                                    ],
                                    line: 66
                                },
                                '16': {
                                    loc: {
                                        start: {
                                            line: 67,
                                            column: 14
                                        },
                                        end: {
                                            line: 237,
                                            column: 15
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 67,
                                                column: 14
                                            },
                                            end: {
                                                line: 237,
                                                column: 15
                                            }
                                        },
                                        {
                                            start: {
                                                line: 67,
                                                column: 14
                                            },
                                            end: {
                                                line: 237,
                                                column: 15
                                            }
                                        }
                                    ],
                                    line: 67
                                },
                                '17': {
                                    loc: {
                                        start: {
                                            line: 69,
                                            column: 29
                                        },
                                        end: {
                                            line: 73,
                                            column: 64
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 69,
                                                column: 29
                                            },
                                            end: {
                                                line: 69,
                                                column: 71
                                            }
                                        },
                                        {
                                            start: {
                                                line: 70,
                                                column: 19
                                            },
                                            end: {
                                                line: 70,
                                                column: 56
                                            }
                                        },
                                        {
                                            start: {
                                                line: 71,
                                                column: 18
                                            },
                                            end: {
                                                line: 73,
                                                column: 63
                                            }
                                        }
                                    ],
                                    line: 69
                                },
                                '18': {
                                    loc: {
                                        start: {
                                            line: 72,
                                            column: 20
                                        },
                                        end: {
                                            line: 72,
                                            column: 125
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 72,
                                                column: 50
                                            },
                                            end: {
                                                line: 72,
                                                column: 70
                                            }
                                        },
                                        {
                                            start: {
                                                line: 72,
                                                column: 73
                                            },
                                            end: {
                                                line: 72,
                                                column: 125
                                            }
                                        }
                                    ],
                                    line: 72
                                },
                                '19': {
                                    loc: {
                                        start: {
                                            line: 72,
                                            column: 73
                                        },
                                        end: {
                                            line: 72,
                                            column: 125
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 72,
                                                column: 105
                                            },
                                            end: {
                                                line: 72,
                                                column: 117
                                            }
                                        },
                                        {
                                            start: {
                                                line: 72,
                                                column: 120
                                            },
                                            end: {
                                                line: 72,
                                                column: 125
                                            }
                                        }
                                    ],
                                    line: 72
                                },
                                '20': {
                                    loc: {
                                        start: {
                                            line: 73,
                                            column: 43
                                        },
                                        end: {
                                            line: 73,
                                            column: 55
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 73,
                                                column: 43
                                            },
                                            end: {
                                                line: 73,
                                                column: 47
                                            }
                                        },
                                        {
                                            start: {
                                                line: 73,
                                                column: 51
                                            },
                                            end: {
                                                line: 73,
                                                column: 55
                                            }
                                        }
                                    ],
                                    line: 73
                                },
                                '21': {
                                    loc: {
                                        start: {
                                            line: 74,
                                            column: 16
                                        },
                                        end: {
                                            line: 236,
                                            column: 17
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 74,
                                                column: 16
                                            },
                                            end: {
                                                line: 236,
                                                column: 17
                                            }
                                        },
                                        {
                                            start: {
                                                line: 74,
                                                column: 16
                                            },
                                            end: {
                                                line: 236,
                                                column: 17
                                            }
                                        }
                                    ],
                                    line: 74
                                },
                                '22': {
                                    loc: {
                                        start: {
                                            line: 77,
                                            column: 22
                                        },
                                        end: {
                                            line: 81,
                                            column: 59
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 81,
                                                column: 26
                                            },
                                            end: {
                                                line: 81,
                                                column: 52
                                            }
                                        },
                                        {
                                            start: {
                                                line: 81,
                                                column: 55
                                            },
                                            end: {
                                                line: 81,
                                                column: 59
                                            }
                                        }
                                    ],
                                    line: 77
                                },
                                '23': {
                                    loc: {
                                        start: {
                                            line: 77,
                                            column: 23
                                        },
                                        end: {
                                            line: 80,
                                            column: 67
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 77,
                                                column: 23
                                            },
                                            end: {
                                                line: 77,
                                                column: 63
                                            }
                                        },
                                        {
                                            start: {
                                                line: 78,
                                                column: 24
                                            },
                                            end: {
                                                line: 80,
                                                column: 67
                                            }
                                        }
                                    ],
                                    line: 77
                                },
                                '24': {
                                    loc: {
                                        start: {
                                            line: 79,
                                            column: 24
                                        },
                                        end: {
                                            line: 79,
                                            column: 129
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 79,
                                                column: 54
                                            },
                                            end: {
                                                line: 79,
                                                column: 74
                                            }
                                        },
                                        {
                                            start: {
                                                line: 79,
                                                column: 77
                                            },
                                            end: {
                                                line: 79,
                                                column: 129
                                            }
                                        }
                                    ],
                                    line: 79
                                },
                                '25': {
                                    loc: {
                                        start: {
                                            line: 79,
                                            column: 77
                                        },
                                        end: {
                                            line: 79,
                                            column: 129
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 79,
                                                column: 109
                                            },
                                            end: {
                                                line: 79,
                                                column: 121
                                            }
                                        },
                                        {
                                            start: {
                                                line: 79,
                                                column: 124
                                            },
                                            end: {
                                                line: 79,
                                                column: 129
                                            }
                                        }
                                    ],
                                    line: 79
                                },
                                '26': {
                                    loc: {
                                        start: {
                                            line: 80,
                                            column: 47
                                        },
                                        end: {
                                            line: 80,
                                            column: 59
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 80,
                                                column: 47
                                            },
                                            end: {
                                                line: 80,
                                                column: 51
                                            }
                                        },
                                        {
                                            start: {
                                                line: 80,
                                                column: 55
                                            },
                                            end: {
                                                line: 80,
                                                column: 59
                                            }
                                        }
                                    ],
                                    line: 80
                                },
                                '27': {
                                    loc: {
                                        start: {
                                            line: 83,
                                            column: 22
                                        },
                                        end: {
                                            line: 90,
                                            column: 23
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 83,
                                                column: 22
                                            },
                                            end: {
                                                line: 90,
                                                column: 23
                                            }
                                        },
                                        {
                                            start: {
                                                line: 83,
                                                column: 22
                                            },
                                            end: {
                                                line: 90,
                                                column: 23
                                            }
                                        }
                                    ],
                                    line: 83
                                },
                                '28': {
                                    loc: {
                                        start: {
                                            line: 87,
                                            column: 24
                                        },
                                        end: {
                                            line: 89,
                                            column: 25
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 87,
                                                column: 24
                                            },
                                            end: {
                                                line: 89,
                                                column: 25
                                            }
                                        },
                                        {
                                            start: {
                                                line: 87,
                                                column: 24
                                            },
                                            end: {
                                                line: 89,
                                                column: 25
                                            }
                                        }
                                    ],
                                    line: 87
                                },
                                '29': {
                                    loc: {
                                        start: {
                                            line: 91,
                                            column: 22
                                        },
                                        end: {
                                            line: 94,
                                            column: 23
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 91,
                                                column: 22
                                            },
                                            end: {
                                                line: 94,
                                                column: 23
                                            }
                                        },
                                        {
                                            start: {
                                                line: 91,
                                                column: 22
                                            },
                                            end: {
                                                line: 94,
                                                column: 23
                                            }
                                        }
                                    ],
                                    line: 91
                                },
                                '30': {
                                    loc: {
                                        start: {
                                            line: 92,
                                            column: 96
                                        },
                                        end: {
                                            line: 92,
                                            column: 130
                                        }
                                    },
                                    type: 'cond-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 92,
                                                column: 103
                                            },
                                            end: {
                                                line: 92,
                                                column: 115
                                            }
                                        },
                                        {
                                            start: {
                                                line: 92,
                                                column: 118
                                            },
                                            end: {
                                                line: 92,
                                                column: 130
                                            }
                                        }
                                    ],
                                    line: 92
                                },
                                '31': {
                                    loc: {
                                        start: {
                                            line: 97,
                                            column: 22
                                        },
                                        end: {
                                            line: 104,
                                            column: 23
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 97,
                                                column: 22
                                            },
                                            end: {
                                                line: 104,
                                                column: 23
                                            }
                                        },
                                        {
                                            start: {
                                                line: 97,
                                                column: 22
                                            },
                                            end: {
                                                line: 104,
                                                column: 23
                                            }
                                        }
                                    ],
                                    line: 97
                                },
                                '32': {
                                    loc: {
                                        start: {
                                            line: 113,
                                            column: 21
                                        },
                                        end: {
                                            line: 236,
                                            column: 17
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 113,
                                                column: 21
                                            },
                                            end: {
                                                line: 236,
                                                column: 17
                                            }
                                        },
                                        {
                                            start: {
                                                line: 113,
                                                column: 21
                                            },
                                            end: {
                                                line: 236,
                                                column: 17
                                            }
                                        }
                                    ],
                                    line: 113
                                },
                                '33': {
                                    loc: {
                                        start: {
                                            line: 134,
                                            column: 22
                                        },
                                        end: {
                                            line: 141,
                                            column: 23
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 134,
                                                column: 22
                                            },
                                            end: {
                                                line: 141,
                                                column: 23
                                            }
                                        },
                                        {
                                            start: {
                                                line: 134,
                                                column: 22
                                            },
                                            end: {
                                                line: 141,
                                                column: 23
                                            }
                                        }
                                    ],
                                    line: 134
                                },
                                '34': {
                                    loc: {
                                        start: {
                                            line: 145,
                                            column: 22
                                        },
                                        end: {
                                            line: 160,
                                            column: 23
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 145,
                                                column: 22
                                            },
                                            end: {
                                                line: 160,
                                                column: 23
                                            }
                                        },
                                        {
                                            start: {
                                                line: 145,
                                                column: 22
                                            },
                                            end: {
                                                line: 160,
                                                column: 23
                                            }
                                        }
                                    ],
                                    line: 145
                                },
                                '35': {
                                    loc: {
                                        start: {
                                            line: 151,
                                            column: 24
                                        },
                                        end: {
                                            line: 159,
                                            column: 25
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 151,
                                                column: 24
                                            },
                                            end: {
                                                line: 159,
                                                column: 25
                                            }
                                        },
                                        {
                                            start: {
                                                line: 151,
                                                column: 24
                                            },
                                            end: {
                                                line: 159,
                                                column: 25
                                            }
                                        }
                                    ],
                                    line: 151
                                },
                                '36': {
                                    loc: {
                                        start: {
                                            line: 153,
                                            column: 26
                                        },
                                        end: {
                                            line: 158,
                                            column: 27
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 153,
                                                column: 26
                                            },
                                            end: {
                                                line: 158,
                                                column: 27
                                            }
                                        },
                                        {
                                            start: {
                                                line: 153,
                                                column: 26
                                            },
                                            end: {
                                                line: 158,
                                                column: 27
                                            }
                                        }
                                    ],
                                    line: 153
                                },
                                '37': {
                                    loc: {
                                        start: {
                                            line: 156,
                                            column: 72
                                        },
                                        end: {
                                            line: 156,
                                            column: 124
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 156,
                                                column: 73
                                            },
                                            end: {
                                                line: 156,
                                                column: 101
                                            }
                                        },
                                        {
                                            start: {
                                                line: 156,
                                                column: 106
                                            },
                                            end: {
                                                line: 156,
                                                column: 124
                                            }
                                        }
                                    ],
                                    line: 156
                                },
                                '38': {
                                    loc: {
                                        start: {
                                            line: 161,
                                            column: 22
                                        },
                                        end: {
                                            line: 233,
                                            column: 23
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 161,
                                                column: 22
                                            },
                                            end: {
                                                line: 233,
                                                column: 23
                                            }
                                        },
                                        {
                                            start: {
                                                line: 161,
                                                column: 22
                                            },
                                            end: {
                                                line: 233,
                                                column: 23
                                            }
                                        }
                                    ],
                                    line: 161
                                },
                                '39': {
                                    loc: {
                                        start: {
                                            line: 168,
                                            column: 28
                                        },
                                        end: {
                                            line: 213,
                                            column: 29
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 168,
                                                column: 28
                                            },
                                            end: {
                                                line: 213,
                                                column: 29
                                            }
                                        },
                                        {
                                            start: {
                                                line: 168,
                                                column: 28
                                            },
                                            end: {
                                                line: 213,
                                                column: 29
                                            }
                                        }
                                    ],
                                    line: 168
                                },
                                '40': {
                                    loc: {
                                        start: {
                                            line: 170,
                                            column: 30
                                        },
                                        end: {
                                            line: 175,
                                            column: 31
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 170,
                                                column: 30
                                            },
                                            end: {
                                                line: 175,
                                                column: 31
                                            }
                                        },
                                        {
                                            start: {
                                                line: 170,
                                                column: 30
                                            },
                                            end: {
                                                line: 175,
                                                column: 31
                                            }
                                        }
                                    ],
                                    line: 170
                                },
                                '41': {
                                    loc: {
                                        start: {
                                            line: 178,
                                            column: 33
                                        },
                                        end: {
                                            line: 213,
                                            column: 29
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 178,
                                                column: 33
                                            },
                                            end: {
                                                line: 213,
                                                column: 29
                                            }
                                        },
                                        {
                                            start: {
                                                line: 178,
                                                column: 33
                                            },
                                            end: {
                                                line: 213,
                                                column: 29
                                            }
                                        }
                                    ],
                                    line: 178
                                },
                                '42': {
                                    loc: {
                                        start: {
                                            line: 181,
                                            column: 32
                                        },
                                        end: {
                                            line: 186,
                                            column: 33
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 181,
                                                column: 32
                                            },
                                            end: {
                                                line: 186,
                                                column: 33
                                            }
                                        },
                                        {
                                            start: {
                                                line: 181,
                                                column: 32
                                            },
                                            end: {
                                                line: 186,
                                                column: 33
                                            }
                                        }
                                    ],
                                    line: 181
                                },
                                '43': {
                                    loc: {
                                        start: {
                                            line: 189,
                                            column: 32
                                        },
                                        end: {
                                            line: 194,
                                            column: 33
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 189,
                                                column: 32
                                            },
                                            end: {
                                                line: 194,
                                                column: 33
                                            }
                                        },
                                        {
                                            start: {
                                                line: 189,
                                                column: 32
                                            },
                                            end: {
                                                line: 194,
                                                column: 33
                                            }
                                        }
                                    ],
                                    line: 189
                                },
                                '44': {
                                    loc: {
                                        start: {
                                            line: 198,
                                            column: 32
                                        },
                                        end: {
                                            line: 208,
                                            column: 33
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 198,
                                                column: 32
                                            },
                                            end: {
                                                line: 208,
                                                column: 33
                                            }
                                        },
                                        {
                                            start: {
                                                line: 198,
                                                column: 32
                                            },
                                            end: {
                                                line: 208,
                                                column: 33
                                            }
                                        }
                                    ],
                                    line: 198
                                },
                                '45': {
                                    loc: {
                                        start: {
                                            line: 202,
                                            column: 34
                                        },
                                        end: {
                                            line: 207,
                                            column: 35
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 202,
                                                column: 34
                                            },
                                            end: {
                                                line: 207,
                                                column: 35
                                            }
                                        },
                                        {
                                            start: {
                                                line: 202,
                                                column: 34
                                            },
                                            end: {
                                                line: 207,
                                                column: 35
                                            }
                                        }
                                    ],
                                    line: 202
                                },
                                '46': {
                                    loc: {
                                        start: {
                                            line: 251,
                                            column: 4
                                        },
                                        end: {
                                            line: 255,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 251,
                                                column: 4
                                            },
                                            end: {
                                                line: 255,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 251,
                                                column: 4
                                            },
                                            end: {
                                                line: 255,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 251
                                },
                                '47': {
                                    loc: {
                                        start: {
                                            line: 261,
                                            column: 4
                                        },
                                        end: {
                                            line: 265,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 261,
                                                column: 4
                                            },
                                            end: {
                                                line: 265,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 261,
                                                column: 4
                                            },
                                            end: {
                                                line: 265,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 261
                                },
                                '48': {
                                    loc: {
                                        start: {
                                            line: 270,
                                            column: 4
                                        },
                                        end: {
                                            line: 307,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 270,
                                                column: 4
                                            },
                                            end: {
                                                line: 307,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 270,
                                                column: 4
                                            },
                                            end: {
                                                line: 307,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 270
                                },
                                '49': {
                                    loc: {
                                        start: {
                                            line: 287,
                                            column: 10
                                        },
                                        end: {
                                            line: 297,
                                            column: 11
                                        }
                                    },
                                    type: 'switch',
                                    locations: [
                                        {
                                            start: {
                                                line: 288,
                                                column: 10
                                            },
                                            end: {
                                                line: 290,
                                                column: 18
                                            }
                                        },
                                        {
                                            start: {
                                                line: 291,
                                                column: 10
                                            },
                                            end: {
                                                line: 293,
                                                column: 18
                                            }
                                        },
                                        {
                                            start: {
                                                line: 294,
                                                column: 10
                                            },
                                            end: {
                                                line: 296,
                                                column: 18
                                            }
                                        }
                                    ],
                                    line: 287
                                },
                                '50': {
                                    loc: {
                                        start: {
                                            line: 310,
                                            column: 33
                                        },
                                        end: {
                                            line: 310,
                                            column: 79
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 310,
                                                column: 47
                                            },
                                            end: {
                                                line: 310,
                                                column: 79
                                            }
                                        }],
                                    line: 310
                                },
                                '51': {
                                    loc: {
                                        start: {
                                            line: 310,
                                            column: 81
                                        },
                                        end: {
                                            line: 310,
                                            column: 100
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 310,
                                                column: 97
                                            },
                                            end: {
                                                line: 310,
                                                column: 100
                                            }
                                        }],
                                    line: 310
                                },
                                '52': {
                                    loc: {
                                        start: {
                                            line: 310,
                                            column: 102
                                        },
                                        end: {
                                            line: 310,
                                            column: 130
                                        }
                                    },
                                    type: 'default-arg',
                                    locations: [{
                                            start: {
                                                line: 310,
                                                column: 126
                                            },
                                            end: {
                                                line: 310,
                                                column: 130
                                            }
                                        }],
                                    line: 310
                                },
                                '53': {
                                    loc: {
                                        start: {
                                            line: 311,
                                            column: 4
                                        },
                                        end: {
                                            line: 345,
                                            column: 5
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 311,
                                                column: 4
                                            },
                                            end: {
                                                line: 345,
                                                column: 5
                                            }
                                        },
                                        {
                                            start: {
                                                line: 311,
                                                column: 4
                                            },
                                            end: {
                                                line: 345,
                                                column: 5
                                            }
                                        }
                                    ],
                                    line: 311
                                },
                                '54': {
                                    loc: {
                                        start: {
                                            line: 312,
                                            column: 19
                                        },
                                        end: {
                                            line: 312,
                                            column: 147
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 312,
                                                column: 19
                                            },
                                            end: {
                                                line: 312,
                                                column: 41
                                            }
                                        },
                                        {
                                            start: {
                                                line: 312,
                                                column: 45
                                            },
                                            end: {
                                                line: 312,
                                                column: 147
                                            }
                                        }
                                    ],
                                    line: 312
                                },
                                '55': {
                                    loc: {
                                        start: {
                                            line: 314,
                                            column: 6
                                        },
                                        end: {
                                            line: 336,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 314,
                                                column: 6
                                            },
                                            end: {
                                                line: 336,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 314,
                                                column: 6
                                            },
                                            end: {
                                                line: 336,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 314
                                },
                                '56': {
                                    loc: {
                                        start: {
                                            line: 315,
                                            column: 104
                                        },
                                        end: {
                                            line: 315,
                                            column: 189
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 315,
                                                column: 104
                                            },
                                            end: {
                                                line: 315,
                                                column: 135
                                            }
                                        },
                                        {
                                            start: {
                                                line: 315,
                                                column: 139
                                            },
                                            end: {
                                                line: 315,
                                                column: 189
                                            }
                                        }
                                    ],
                                    line: 315
                                },
                                '57': {
                                    loc: {
                                        start: {
                                            line: 317,
                                            column: 32
                                        },
                                        end: {
                                            line: 317,
                                            column: 102
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 317,
                                                column: 32
                                            },
                                            end: {
                                                line: 317,
                                                column: 51
                                            }
                                        },
                                        {
                                            start: {
                                                line: 317,
                                                column: 55
                                            },
                                            end: {
                                                line: 317,
                                                column: 75
                                            }
                                        },
                                        {
                                            start: {
                                                line: 317,
                                                column: 79
                                            },
                                            end: {
                                                line: 317,
                                                column: 102
                                            }
                                        }
                                    ],
                                    line: 317
                                },
                                '58': {
                                    loc: {
                                        start: {
                                            line: 318,
                                            column: 12
                                        },
                                        end: {
                                            line: 334,
                                            column: 13
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 318,
                                                column: 12
                                            },
                                            end: {
                                                line: 334,
                                                column: 13
                                            }
                                        },
                                        {
                                            start: {
                                                line: 318,
                                                column: 12
                                            },
                                            end: {
                                                line: 334,
                                                column: 13
                                            }
                                        }
                                    ],
                                    line: 318
                                },
                                '59': {
                                    loc: {
                                        start: {
                                            line: 319,
                                            column: 14
                                        },
                                        end: {
                                            line: 330,
                                            column: 15
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 319,
                                                column: 14
                                            },
                                            end: {
                                                line: 330,
                                                column: 15
                                            }
                                        },
                                        {
                                            start: {
                                                line: 319,
                                                column: 14
                                            },
                                            end: {
                                                line: 330,
                                                column: 15
                                            }
                                        }
                                    ],
                                    line: 319
                                },
                                '60': {
                                    loc: {
                                        start: {
                                            line: 319,
                                            column: 20
                                        },
                                        end: {
                                            line: 319,
                                            column: 98
                                        }
                                    },
                                    type: 'binary-expr',
                                    locations: [
                                        {
                                            start: {
                                                line: 319,
                                                column: 20
                                            },
                                            end: {
                                                line: 319,
                                                column: 75
                                            }
                                        },
                                        {
                                            start: {
                                                line: 319,
                                                column: 79
                                            },
                                            end: {
                                                line: 319,
                                                column: 98
                                            }
                                        }
                                    ],
                                    line: 319
                                },
                                '61': {
                                    loc: {
                                        start: {
                                            line: 322,
                                            column: 18
                                        },
                                        end: {
                                            line: 324,
                                            column: 19
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 322,
                                                column: 18
                                            },
                                            end: {
                                                line: 324,
                                                column: 19
                                            }
                                        },
                                        {
                                            start: {
                                                line: 322,
                                                column: 18
                                            },
                                            end: {
                                                line: 324,
                                                column: 19
                                            }
                                        }
                                    ],
                                    line: 322
                                },
                                '62': {
                                    loc: {
                                        start: {
                                            line: 341,
                                            column: 6
                                        },
                                        end: {
                                            line: 343,
                                            column: 7
                                        }
                                    },
                                    type: 'if',
                                    locations: [
                                        {
                                            start: {
                                                line: 341,
                                                column: 6
                                            },
                                            end: {
                                                line: 343,
                                                column: 7
                                            }
                                        },
                                        {
                                            start: {
                                                line: 341,
                                                column: 6
                                            },
                                            end: {
                                                line: 343,
                                                column: 7
                                            }
                                        }
                                    ],
                                    line: 341
                                }
                            },
                            s: {
                                '0': 0,
                                '1': 0,
                                '2': 0,
                                '3': 0,
                                '4': 0,
                                '5': 0,
                                '6': 0,
                                '7': 0,
                                '8': 0,
                                '9': 0,
                                '10': 0,
                                '11': 0,
                                '12': 0,
                                '13': 0,
                                '14': 0,
                                '15': 0,
                                '16': 0,
                                '17': 0,
                                '18': 0,
                                '19': 0,
                                '20': 0,
                                '21': 0,
                                '22': 0,
                                '23': 0,
                                '24': 0,
                                '25': 0,
                                '26': 0,
                                '27': 0,
                                '28': 0,
                                '29': 0,
                                '30': 0,
                                '31': 0,
                                '32': 0,
                                '33': 0,
                                '34': 0,
                                '35': 0,
                                '36': 0,
                                '37': 0,
                                '38': 0,
                                '39': 0,
                                '40': 0,
                                '41': 0,
                                '42': 0,
                                '43': 0,
                                '44': 0,
                                '45': 0,
                                '46': 0,
                                '47': 0,
                                '48': 0,
                                '49': 0,
                                '50': 0,
                                '51': 0,
                                '52': 0,
                                '53': 0,
                                '54': 0,
                                '55': 0,
                                '56': 0,
                                '57': 0,
                                '58': 0,
                                '59': 0,
                                '60': 0,
                                '61': 0,
                                '62': 0,
                                '63': 0,
                                '64': 0,
                                '65': 0,
                                '66': 0,
                                '67': 0,
                                '68': 0,
                                '69': 0,
                                '70': 0,
                                '71': 0,
                                '72': 0,
                                '73': 0,
                                '74': 0,
                                '75': 0,
                                '76': 0,
                                '77': 0,
                                '78': 0,
                                '79': 0,
                                '80': 0,
                                '81': 0,
                                '82': 0,
                                '83': 0,
                                '84': 0,
                                '85': 0,
                                '86': 0,
                                '87': 0,
                                '88': 0,
                                '89': 0,
                                '90': 0,
                                '91': 0,
                                '92': 0,
                                '93': 0,
                                '94': 0,
                                '95': 0,
                                '96': 0,
                                '97': 0,
                                '98': 0,
                                '99': 0,
                                '100': 0,
                                '101': 0,
                                '102': 0,
                                '103': 0,
                                '104': 0,
                                '105': 0,
                                '106': 0,
                                '107': 0,
                                '108': 0,
                                '109': 0,
                                '110': 0,
                                '111': 0,
                                '112': 0,
                                '113': 0,
                                '114': 0,
                                '115': 0,
                                '116': 0,
                                '117': 0,
                                '118': 0,
                                '119': 0,
                                '120': 0,
                                '121': 0,
                                '122': 0,
                                '123': 0,
                                '124': 0,
                                '125': 0,
                                '126': 0,
                                '127': 0,
                                '128': 0,
                                '129': 0,
                                '130': 0,
                                '131': 0,
                                '132': 0,
                                '133': 0,
                                '134': 0,
                                '135': 0,
                                '136': 0,
                                '137': 0,
                                '138': 0,
                                '139': 0,
                                '140': 0,
                                '141': 0,
                                '142': 0,
                                '143': 0,
                                '144': 0,
                                '145': 0,
                                '146': 0,
                                '147': 0,
                                '148': 0,
                                '149': 0,
                                '150': 0,
                                '151': 0,
                                '152': 0,
                                '153': 0,
                                '154': 0,
                                '155': 0,
                                '156': 0,
                                '157': 0,
                                '158': 0,
                                '159': 0,
                                '160': 0,
                                '161': 0,
                                '162': 0,
                                '163': 0,
                                '164': 0,
                                '165': 0,
                                '166': 0,
                                '167': 0,
                                '168': 0,
                                '169': 0,
                                '170': 0
                            },
                            f: {
                                '0': 0,
                                '1': 0,
                                '2': 0,
                                '3': 0,
                                '4': 0,
                                '5': 0,
                                '6': 0,
                                '7': 0,
                                '8': 0,
                                '9': 0,
                                '10': 0,
                                '11': 0,
                                '12': 0,
                                '13': 0,
                                '14': 0,
                                '15': 0,
                                '16': 0,
                                '17': 0,
                                '18': 0,
                                '19': 0,
                                '20': 0,
                                '21': 0,
                                '22': 0,
                                '23': 0,
                                '24': 0,
                                '25': 0,
                                '26': 0,
                                '27': 0,
                                '28': 0,
                                '29': 0,
                                '30': 0,
                                '31': 0,
                                '32': 0,
                                '33': 0,
                                '34': 0,
                                '35': 0,
                                '36': 0,
                                '37': 0
                            },
                            b: {
                                '0': [
                                    0,
                                    0
                                ],
                                '1': [
                                    0,
                                    0
                                ],
                                '2': [
                                    0,
                                    0
                                ],
                                '3': [
                                    0,
                                    0
                                ],
                                '4': [
                                    0,
                                    0
                                ],
                                '5': [
                                    0,
                                    0
                                ],
                                '6': [
                                    0,
                                    0
                                ],
                                '7': [
                                    0,
                                    0
                                ],
                                '8': [
                                    0,
                                    0
                                ],
                                '9': [
                                    0,
                                    0
                                ],
                                '10': [
                                    0,
                                    0,
                                    0
                                ],
                                '11': [
                                    0,
                                    0
                                ],
                                '12': [
                                    0,
                                    0
                                ],
                                '13': [
                                    0,
                                    0
                                ],
                                '14': [
                                    0,
                                    0
                                ],
                                '15': [
                                    0,
                                    0
                                ],
                                '16': [
                                    0,
                                    0
                                ],
                                '17': [
                                    0,
                                    0,
                                    0
                                ],
                                '18': [
                                    0,
                                    0
                                ],
                                '19': [
                                    0,
                                    0
                                ],
                                '20': [
                                    0,
                                    0
                                ],
                                '21': [
                                    0,
                                    0
                                ],
                                '22': [
                                    0,
                                    0
                                ],
                                '23': [
                                    0,
                                    0
                                ],
                                '24': [
                                    0,
                                    0
                                ],
                                '25': [
                                    0,
                                    0
                                ],
                                '26': [
                                    0,
                                    0
                                ],
                                '27': [
                                    0,
                                    0
                                ],
                                '28': [
                                    0,
                                    0
                                ],
                                '29': [
                                    0,
                                    0
                                ],
                                '30': [
                                    0,
                                    0
                                ],
                                '31': [
                                    0,
                                    0
                                ],
                                '32': [
                                    0,
                                    0
                                ],
                                '33': [
                                    0,
                                    0
                                ],
                                '34': [
                                    0,
                                    0
                                ],
                                '35': [
                                    0,
                                    0
                                ],
                                '36': [
                                    0,
                                    0
                                ],
                                '37': [
                                    0,
                                    0
                                ],
                                '38': [
                                    0,
                                    0
                                ],
                                '39': [
                                    0,
                                    0
                                ],
                                '40': [
                                    0,
                                    0
                                ],
                                '41': [
                                    0,
                                    0
                                ],
                                '42': [
                                    0,
                                    0
                                ],
                                '43': [
                                    0,
                                    0
                                ],
                                '44': [
                                    0,
                                    0
                                ],
                                '45': [
                                    0,
                                    0
                                ],
                                '46': [
                                    0,
                                    0
                                ],
                                '47': [
                                    0,
                                    0
                                ],
                                '48': [
                                    0,
                                    0
                                ],
                                '49': [
                                    0,
                                    0,
                                    0
                                ],
                                '50': [0],
                                '51': [0],
                                '52': [0],
                                '53': [
                                    0,
                                    0
                                ],
                                '54': [
                                    0,
                                    0
                                ],
                                '55': [
                                    0,
                                    0
                                ],
                                '56': [
                                    0,
                                    0
                                ],
                                '57': [
                                    0,
                                    0,
                                    0
                                ],
                                '58': [
                                    0,
                                    0
                                ],
                                '59': [
                                    0,
                                    0
                                ],
                                '60': [
                                    0,
                                    0
                                ],
                                '61': [
                                    0,
                                    0
                                ],
                                '62': [
                                    0,
                                    0
                                ]
                            },
                            _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
                        }, coverage = global[gcv] || (global[gcv] = {});
                    if (coverage[path] && coverage[path].hash === hash) {
                        return coverage[path];
                    }
                    coverageData.hash = hash;
                    return coverage[path] = coverageData;
                }();
                cov_5zdhhrftg.s[0]++;
                module.exports = function (hook, preprocess) {
                    cov_5zdhhrftg.f[0]++;
                    let version = (cov_5zdhhrftg.s[1]++, '1');
                    function onInstall(event) {
                        cov_5zdhhrftg.f[1]++;
                        let serviceWorkerUrl = (cov_5zdhhrftg.s[2]++, new URL(location.href));
                        cov_5zdhhrftg.s[3]++;
                        version = (cov_5zdhhrftg.b[0][0]++, serviceWorkerUrl.searchParams.get('version')) || (cov_5zdhhrftg.b[0][1]++, version);
                    }
                    function onActivate(event) {
                        cov_5zdhhrftg.f[2]++;
                        cov_5zdhhrftg.s[4]++;
                        preprocess.setHookWorkers([]);
                        cov_5zdhhrftg.s[5]++;
                        event.waitUntil(caches.keys().then(keys => {
                            cov_5zdhhrftg.f[3]++;
                            cov_5zdhhrftg.s[6]++;
                            return Promise.all(keys.map(key => {
                                cov_5zdhhrftg.f[4]++;
                                cov_5zdhhrftg.s[7]++;
                                return (cov_5zdhhrftg.b[1][0]++, key === 'version_' + version) || (cov_5zdhhrftg.b[1][1]++, caches.delete(key));
                            }));
                        }));
                    }
                    function onMessage(event) {
                        cov_5zdhhrftg.f[5]++;
                        cov_5zdhhrftg.s[8]++;
                        if (event.data === 'channel') {
                            cov_5zdhhrftg.b[2][0]++;
                            let hookWorkers = (cov_5zdhhrftg.s[9]++, []);
                            cov_5zdhhrftg.s[10]++;
                            for (let i = 0; i < event.ports.length; i++) {
                                cov_5zdhhrftg.s[11]++;
                                hookWorkers.push({
                                    worker: i,
                                    port: event.ports[i],
                                    taskQueueSize: 0
                                });
                            }
                            cov_5zdhhrftg.s[12]++;
                            preprocess.setHookWorkers(hookWorkers);
                        } else {
                            cov_5zdhhrftg.b[2][1]++;
                            cov_5zdhhrftg.s[13]++;
                            if (event.data === 'unload') {
                                cov_5zdhhrftg.b[3][0]++;
                                cov_5zdhhrftg.s[14]++;
                                preprocess.setHookWorkers([]);
                            } else {
                                cov_5zdhhrftg.b[3][1]++;
                                cov_5zdhhrftg.s[15]++;
                                if ((cov_5zdhhrftg.b[5][0]++, event.data === 'coverage') && (cov_5zdhhrftg.b[5][1]++, typeof __coverage__ === 'object')) {
                                    cov_5zdhhrftg.b[4][0]++;
                                    cov_5zdhhrftg.s[16]++;
                                    event.ports[0].postMessage(__coverage__);
                                } else {
                                    cov_5zdhhrftg.b[4][1]++;
                                    cov_5zdhhrftg.s[17]++;
                                    console.error('Invalid message to Service Worker');
                                    cov_5zdhhrftg.s[18]++;
                                    event.ports[0].postMessage('error: Invalid message to Service Worker');
                                }
                            }
                        }
                    }
                    function onFetch(event) {
                        cov_5zdhhrftg.f[6]++;
                        cov_5zdhhrftg.s[19]++;
                        event.respondWith(caches.open('version_' + version).then(function (cache) {
                            cov_5zdhhrftg.f[7]++;
                            cov_5zdhhrftg.s[20]++;
                            return cache.match(event.request).then(function (response) {
                                cov_5zdhhrftg.f[8]++;
                                let cors = (cov_5zdhhrftg.s[21]++, false);
                                let request;
                                cov_5zdhhrftg.s[22]++;
                                if (!response) {
                                    cov_5zdhhrftg.b[6][0]++;
                                    cov_5zdhhrftg.s[23]++;
                                    if ((cov_5zdhhrftg.b[8][0]++, event.request.method === 'GET') && (cov_5zdhhrftg.b[8][1]++, event.request.url.indexOf('cors=true') >= 0)) {
                                        cov_5zdhhrftg.b[7][0]++;
                                        cov_5zdhhrftg.s[24]++;
                                        cors = true;
                                        cov_5zdhhrftg.s[25]++;
                                        request = new Request(event.request.url.replace(/&cors=true/, '').replace(/\?cors=true$/, '').replace(/\?cors=true&/, '?'), { mode: 'cors' });
                                    } else {
                                        cov_5zdhhrftg.b[7][1]++;
                                        cov_5zdhhrftg.s[26]++;
                                        if ((cov_5zdhhrftg.b[10][0]++, event.request.method === 'GET') && (cov_5zdhhrftg.b[10][1]++, Array.isArray(hook.parameters.cors)) && (cov_5zdhhrftg.b[10][2]++, hook.parameters.cors.filter(pattern => {
                                                cov_5zdhhrftg.f[9]++;
                                                cov_5zdhhrftg.s[27]++;
                                                return typeof pattern === 'string' ? (cov_5zdhhrftg.b[11][0]++, pattern === event.request.url) : (cov_5zdhhrftg.b[11][1]++, typeof pattern === 'function' ? (cov_5zdhhrftg.b[12][0]++, pattern(event.request.url)) : (cov_5zdhhrftg.b[12][1]++, false));
                                            }).reduce((prev, curr) => {
                                                cov_5zdhhrftg.f[10]++;
                                                cov_5zdhhrftg.s[28]++;
                                                return (cov_5zdhhrftg.b[13][0]++, prev) || (cov_5zdhhrftg.b[13][1]++, curr);
                                            }, false))) {
                                            cov_5zdhhrftg.b[9][0]++;
                                            cov_5zdhhrftg.s[29]++;
                                            cors = true;
                                            cov_5zdhhrftg.s[30]++;
                                            request = new Request(event.request.url, { mode: 'cors' });
                                        } else {
                                            cov_5zdhhrftg.b[9][1]++;
                                            cov_5zdhhrftg.s[31]++;
                                            request = event.request.clone();
                                        }
                                    }
                                } else {
                                    cov_5zdhhrftg.b[6][1]++;
                                }
                                cov_5zdhhrftg.s[32]++;
                                return (cov_5zdhhrftg.b[14][0]++, response) || (cov_5zdhhrftg.b[14][1]++, fetch(request).then(function (response) {
                                    cov_5zdhhrftg.f[11]++;
                                    cov_5zdhhrftg.s[33]++;
                                    if (response.status === 200) {
                                        cov_5zdhhrftg.b[15][0]++;
                                        cov_5zdhhrftg.s[34]++;
                                        if (response.url) {
                                            cov_5zdhhrftg.b[16][0]++;
                                            let url = (cov_5zdhhrftg.s[35]++, new URL(response.url));
                                            let noHook = (cov_5zdhhrftg.s[36]++, (cov_5zdhhrftg.b[17][0]++, url.searchParams.get('no-hook') === 'true') || (cov_5zdhhrftg.b[17][1]++, Array.isArray(hook.parameters.noHook)) && (cov_5zdhhrftg.b[17][2]++, hook.parameters.noHook.filter(pattern => {
                                                cov_5zdhhrftg.f[12]++;
                                                cov_5zdhhrftg.s[37]++;
                                                return typeof pattern === 'string' ? (cov_5zdhhrftg.b[18][0]++, pattern === url.href) : (cov_5zdhhrftg.b[18][1]++, typeof pattern === 'function' ? (cov_5zdhhrftg.b[19][0]++, pattern(url)) : (cov_5zdhhrftg.b[19][1]++, false));
                                            }).reduce((prev, curr) => {
                                                cov_5zdhhrftg.f[13]++;
                                                cov_5zdhhrftg.s[38]++;
                                                return (cov_5zdhhrftg.b[20][0]++, prev) || (cov_5zdhhrftg.b[20][1]++, curr);
                                            }, false)));
                                            cov_5zdhhrftg.s[39]++;
                                            if (url.pathname.match(/[.]js$/)) {
                                                cov_5zdhhrftg.b[21][0]++;
                                                cov_5zdhhrftg.s[40]++;
                                                return response.text().then(async function (result) {
                                                    cov_5zdhhrftg.f[14]++;
                                                    let sourceMap = (cov_5zdhhrftg.s[41]++, (cov_5zdhhrftg.b[23][0]++, Array.isArray(hook.parameters.sourceMap)) && (cov_5zdhhrftg.b[23][1]++, hook.parameters.sourceMap.filter(pattern => {
                                                        cov_5zdhhrftg.f[15]++;
                                                        cov_5zdhhrftg.s[42]++;
                                                        return typeof pattern === 'string' ? (cov_5zdhhrftg.b[24][0]++, pattern === url.href) : (cov_5zdhhrftg.b[24][1]++, typeof pattern === 'function' ? (cov_5zdhhrftg.b[25][0]++, pattern(url)) : (cov_5zdhhrftg.b[25][1]++, false));
                                                    }).reduce((prev, curr) => {
                                                        cov_5zdhhrftg.f[16]++;
                                                        cov_5zdhhrftg.s[43]++;
                                                        return (cov_5zdhhrftg.b[26][0]++, prev) || (cov_5zdhhrftg.b[26][1]++, curr);
                                                    }, false)) ? (cov_5zdhhrftg.b[22][0]++, { pathname: url.pathname }) : (cov_5zdhhrftg.b[22][1]++, null));
                                                    cov_5zdhhrftg.s[44]++;
                                                    try {
                                                        cov_5zdhhrftg.s[45]++;
                                                        if (noHook) {
                                                            cov_5zdhhrftg.b[27][0]++;
                                                            let originalScript = (cov_5zdhhrftg.s[46]++, result);
                                                            cov_5zdhhrftg.s[47]++;
                                                            result = preprocess._validateNoHookScript(originalScript, url);
                                                            cov_5zdhhrftg.s[48]++;
                                                            noHook = originalScript === result;
                                                            cov_5zdhhrftg.s[49]++;
                                                            if (noHook) {
                                                                cov_5zdhhrftg.b[28][0]++;
                                                                cov_5zdhhrftg.s[50]++;
                                                                result = preprocess.setScriptHookProperty(result, url);
                                                            } else {
                                                                cov_5zdhhrftg.b[28][1]++;
                                                            }
                                                        } else {
                                                            cov_5zdhhrftg.b[27][1]++;
                                                        }
                                                        cov_5zdhhrftg.s[51]++;
                                                        if (!noHook) {
                                                            cov_5zdhhrftg.b[29][0]++;
                                                            cov_5zdhhrftg.s[52]++;
                                                            result = await hook(result, preprocess.getHookNameForServiceWorker(), [[
                                                                    cors ? (cov_5zdhhrftg.b[30][0]++, response.url) : (cov_5zdhhrftg.b[30][1]++, url.pathname),
                                                                    {}
                                                                ]], preprocess.getContextGeneratorName(), true, preprocess.getHookProperty(), sourceMap, true);
                                                        } else {
                                                            cov_5zdhhrftg.b[29][1]++;
                                                        }
                                                    } catch (e) {
                                                        cov_5zdhhrftg.s[53]++;
                                                        if (preprocess.getDiscardHookErrors()) {
                                                            cov_5zdhhrftg.b[31][0]++;
                                                            cov_5zdhhrftg.s[54]++;
                                                            console.log(e);
                                                        } else {
                                                            cov_5zdhhrftg.b[31][1]++;
                                                            cov_5zdhhrftg.s[55]++;
                                                            result = '/* Empty script due to a hook error */';
                                                            cov_5zdhhrftg.s[56]++;
                                                            console.error(e);
                                                            cov_5zdhhrftg.s[57]++;
                                                            throw e;
                                                        }
                                                    } finally {
                                                        let processedResponse = (cov_5zdhhrftg.s[58]++, new Response(result, { headers: { 'Content-Type': 'text/javascript' } }));
                                                        cov_5zdhhrftg.s[59]++;
                                                        cache.put(event.request, processedResponse.clone());
                                                        cov_5zdhhrftg.s[60]++;
                                                        return processedResponse;
                                                    }
                                                });
                                            } else {
                                                cov_5zdhhrftg.b[21][1]++;
                                                cov_5zdhhrftg.s[61]++;
                                                if (url.pathname.match(/(\/|[.]html?)$/)) {
                                                    cov_5zdhhrftg.b[32][0]++;
                                                    let original;
                                                    let decoded;
                                                    let contextGeneratorScripts = (cov_5zdhhrftg.s[62]++, []);
                                                    cov_5zdhhrftg.s[63]++;
                                                    return response.text().then(async function (result) {
                                                        cov_5zdhhrftg.f[17]++;
                                                        cov_5zdhhrftg.s[64]++;
                                                        try {
                                                            cov_5zdhhrftg.s[65]++;
                                                            result = decoded = hook.serviceWorkerTransformers.decodeHtml(original = result);
                                                            cov_5zdhhrftg.s[66]++;
                                                            result = await preprocess._preprocessHtml(decoded, preprocess.getHookNameForServiceWorker(), url, cors, preprocess.getContextGeneratorName(), contextGeneratorScripts, original !== decoded, true, 0, preprocess.getHookProperty(), true);
                                                        } catch (e) {
                                                            cov_5zdhhrftg.s[67]++;
                                                            if (preprocess.getDiscardHookErrors()) {
                                                                cov_5zdhhrftg.b[33][0]++;
                                                                cov_5zdhhrftg.s[68]++;
                                                                console.log(e);
                                                            } else {
                                                                cov_5zdhhrftg.b[33][1]++;
                                                                cov_5zdhhrftg.s[69]++;
                                                                result = '<!-- Empty HTML due to a hook error -->';
                                                                cov_5zdhhrftg.s[70]++;
                                                                console.error(e);
                                                                cov_5zdhhrftg.s[71]++;
                                                                throw e;
                                                            }
                                                        } finally {
                                                            let processedResponse = (cov_5zdhhrftg.s[72]++, new Response(result, { headers: { 'Content-Type': 'text/html' } }));
                                                            cov_5zdhhrftg.s[73]++;
                                                            if (decoded === original) {
                                                                cov_5zdhhrftg.b[34][0]++;
                                                                cov_5zdhhrftg.s[74]++;
                                                                cache.put(event.request, processedResponse.clone());
                                                            } else {
                                                                cov_5zdhhrftg.b[34][1]++;
                                                                let match = (cov_5zdhhrftg.s[75]++, decoded.replace(/\n/g, '\0').match(/<script [^>]*src="[^"]*\/hook[.]min[.]js[\?][^"]*version=(.*)&[^"]*"><\/script>/));
                                                                cov_5zdhhrftg.s[76]++;
                                                                if (match) {
                                                                    cov_5zdhhrftg.b[35][0]++;
                                                                    let newVersion = (cov_5zdhhrftg.s[77]++, match[1]);
                                                                    cov_5zdhhrftg.s[78]++;
                                                                    if (version !== newVersion) {
                                                                        cov_5zdhhrftg.b[36][0]++;
                                                                        cov_5zdhhrftg.s[79]++;
                                                                        version = newVersion;
                                                                        cov_5zdhhrftg.s[80]++;
                                                                        caches.keys().then(keys => {
                                                                            cov_5zdhhrftg.f[18]++;
                                                                            cov_5zdhhrftg.s[81]++;
                                                                            return Promise.all(keys.map(key => {
                                                                                cov_5zdhhrftg.f[19]++;
                                                                                cov_5zdhhrftg.s[82]++;
                                                                                return (cov_5zdhhrftg.b[37][0]++, key === 'version_' + version) || (cov_5zdhhrftg.b[37][1]++, caches.delete(key));
                                                                            }));
                                                                        }).then(() => {
                                                                            cov_5zdhhrftg.f[20]++;
                                                                            cov_5zdhhrftg.s[83]++;
                                                                            return registration.update();
                                                                        });
                                                                    } else {
                                                                        cov_5zdhhrftg.b[36][1]++;
                                                                    }
                                                                } else {
                                                                    cov_5zdhhrftg.b[35][1]++;
                                                                }
                                                            }
                                                            cov_5zdhhrftg.s[84]++;
                                                            if (contextGeneratorScripts.length === 0) {
                                                                cov_5zdhhrftg.b[38][0]++;
                                                                cov_5zdhhrftg.s[85]++;
                                                                return processedResponse;
                                                            } else {
                                                                cov_5zdhhrftg.b[38][1]++;
                                                                let sequence = (cov_5zdhhrftg.s[86]++, Promise.resolve());
                                                                cov_5zdhhrftg.s[87]++;
                                                                contextGeneratorScripts.forEach(script => {
                                                                    cov_5zdhhrftg.f[21]++;
                                                                    cov_5zdhhrftg.s[88]++;
                                                                    sequence = sequence.then(() => {
                                                                        cov_5zdhhrftg.f[22]++;
                                                                        cov_5zdhhrftg.s[89]++;
                                                                        if (typeof script === 'string') {
                                                                            cov_5zdhhrftg.b[39][0]++;
                                                                            let authorized = (cov_5zdhhrftg.s[90]++, preprocess._validateNoHookScript(script, url, true));
                                                                            cov_5zdhhrftg.s[91]++;
                                                                            if (script === authorized) {
                                                                                cov_5zdhhrftg.b[40][0]++;
                                                                                cov_5zdhhrftg.s[92]++;
                                                                                new Function(script)();
                                                                            } else {
                                                                                cov_5zdhhrftg.b[40][1]++;
                                                                                cov_5zdhhrftg.s[93]++;
                                                                                console.error('skip executing unauthorized inline context-generator script at ' + url.href);
                                                                            }
                                                                            cov_5zdhhrftg.s[94]++;
                                                                            return true;
                                                                        } else {
                                                                            cov_5zdhhrftg.b[39][1]++;
                                                                            cov_5zdhhrftg.s[95]++;
                                                                            if (script instanceof URL) {
                                                                                cov_5zdhhrftg.b[41][0]++;
                                                                                let scriptRequest = (cov_5zdhhrftg.s[96]++, new Request(script, { mode: 'cors' }));
                                                                                cov_5zdhhrftg.s[97]++;
                                                                                return fetch(scriptRequest).then(scriptResponse => {
                                                                                    cov_5zdhhrftg.f[23]++;
                                                                                    cov_5zdhhrftg.s[98]++;
                                                                                    if (scriptResponse.status < 400) {
                                                                                        cov_5zdhhrftg.b[42][0]++;
                                                                                        cov_5zdhhrftg.s[99]++;
                                                                                        return scriptResponse.text();
                                                                                    } else {
                                                                                        cov_5zdhhrftg.b[42][1]++;
                                                                                        cov_5zdhhrftg.s[100]++;
                                                                                        throw scriptResponse;
                                                                                    }
                                                                                }).then(text => {
                                                                                    cov_5zdhhrftg.f[24]++;
                                                                                    let authorized = (cov_5zdhhrftg.s[101]++, preprocess._validateNoHookScript(text, script, true));
                                                                                    cov_5zdhhrftg.s[102]++;
                                                                                    if (text === authorized) {
                                                                                        cov_5zdhhrftg.b[43][0]++;
                                                                                        cov_5zdhhrftg.s[103]++;
                                                                                        new Function(text)();
                                                                                    } else {
                                                                                        cov_5zdhhrftg.b[43][1]++;
                                                                                        cov_5zdhhrftg.s[104]++;
                                                                                        console.error('skip executing unauthorized context-generator script at ' + script.href);
                                                                                    }
                                                                                    cov_5zdhhrftg.s[105]++;
                                                                                    return true;
                                                                                }).catch(error => {
                                                                                    cov_5zdhhrftg.f[25]++;
                                                                                    cov_5zdhhrftg.s[106]++;
                                                                                    console.log('Failed to fetch context generator script at ' + script, error);
                                                                                    cov_5zdhhrftg.s[107]++;
                                                                                    if (preprocess.getDiscardHookErrors()) {
                                                                                        cov_5zdhhrftg.b[44][0]++;
                                                                                        cov_5zdhhrftg.s[108]++;
                                                                                        return true;
                                                                                    } else {
                                                                                        cov_5zdhhrftg.b[44][1]++;
                                                                                        cov_5zdhhrftg.s[109]++;
                                                                                        if (error instanceof Response) {
                                                                                            cov_5zdhhrftg.b[45][0]++;
                                                                                            cov_5zdhhrftg.s[110]++;
                                                                                            throw new Error('Failed to fetch context generator script at ' + script + ' ' + error.status + ' ' + error.statusText);
                                                                                        } else {
                                                                                            cov_5zdhhrftg.b[45][1]++;
                                                                                            cov_5zdhhrftg.s[111]++;
                                                                                            throw error;
                                                                                        }
                                                                                    }
                                                                                });
                                                                            } else {
                                                                                cov_5zdhhrftg.b[41][1]++;
                                                                                cov_5zdhhrftg.s[112]++;
                                                                                return true;
                                                                            }
                                                                        }
                                                                    });
                                                                });
                                                                cov_5zdhhrftg.s[113]++;
                                                                return sequence.then(async () => {
                                                                    cov_5zdhhrftg.f[26]++;
                                                                    cov_5zdhhrftg.s[114]++;
                                                                    result = await preprocess._preprocessHtml(decoded, preprocess.getHookNameForServiceWorker(), url, cors, preprocess.getContextGeneratorName(), [], original !== decoded, true, 0, preprocess.getHookProperty(), true);
                                                                    cov_5zdhhrftg.s[115]++;
                                                                    return new Response(result, { headers: { 'Content-Type': 'text/html' } });
                                                                });
                                                            }
                                                        }
                                                    });
                                                } else {
                                                    cov_5zdhhrftg.b[32][1]++;
                                                }
                                            }
                                        } else {
                                            cov_5zdhhrftg.b[16][1]++;
                                        }
                                    } else {
                                        cov_5zdhhrftg.b[15][1]++;
                                    }
                                    cov_5zdhhrftg.s[116]++;
                                    return response;
                                }));
                            }).catch(function (error) {
                                cov_5zdhhrftg.f[27]++;
                                cov_5zdhhrftg.s[117]++;
                                throw error;
                            });
                        }));
                    }
                    function encodeHtml(html) {
                        cov_5zdhhrftg.f[28]++;
                        let html0 = (cov_5zdhhrftg.s[118]++, html.replace(/\n/g, '\0'));
                        let match;
                        cov_5zdhhrftg.s[119]++;
                        if (match = html0.match(/^(.*)(<script [^>]*src="[^"]*\/hook[.]min[.]js[\?][^"]*service-worker-ready=true"><\/script>.*)$/)) {
                            cov_5zdhhrftg.b[46][0]++;
                            cov_5zdhhrftg.s[120]++;
                            html = (match[1] + match[2].replace(/<!--/g, '<C!--').replace(/-->/g, '--C>').replace(/^(.*<script [^>]*src="[^"]*\/hook[.]min[.]js\?[^"]*&service-worker-ready=)true("><\/script>)(.*)$/, '$1false$2</head></html><!--$3-->')).replace(/\0/g, '\n');
                        } else {
                            cov_5zdhhrftg.b[46][1]++;
                        }
                        cov_5zdhhrftg.s[121]++;
                        return html;
                    }
                    function decodeHtml(html) {
                        cov_5zdhhrftg.f[29]++;
                        let html0 = (cov_5zdhhrftg.s[122]++, html.replace(/\n/g, '\0'));
                        cov_5zdhhrftg.s[123]++;
                        if (html0.match(/<script [^>]*src="[^"]*\/hook[.]min[.]js[\?][^"]*service-worker-ready=false"><\/script><\/head><\/html><!--/)) {
                            cov_5zdhhrftg.b[47][0]++;
                            cov_5zdhhrftg.s[124]++;
                            html = html0.replace(/^(.*<script [^>]*src="[^"]*\/hook[.]min[.]js\?[^"]*&service-worker-ready=)false("><\/script>)<\/head><\/html><!--(.*)-->$/, '$1true$2$3').replace(/<C!--/g, '<!--').replace(/--C>/g, '-->').replace(/\0/g, '\n');
                        } else {
                            cov_5zdhhrftg.b[47][1]++;
                        }
                        cov_5zdhhrftg.s[125]++;
                        return html;
                    }
                    function hookWorkerHandler(event) {
                        cov_5zdhhrftg.f[30]++;
                        cov_5zdhhrftg.s[126]++;
                        if (event.data === 'channel') {
                            cov_5zdhhrftg.b[48][0]++;
                            let port = (cov_5zdhhrftg.s[127]++, event.ports[0]);
                            cov_5zdhhrftg.s[128]++;
                            port.onmessage = function (hookEvent) {
                                cov_5zdhhrftg.f[31]++;
                                let message;
                                cov_5zdhhrftg.s[129]++;
                                try {
                                    cov_5zdhhrftg.s[130]++;
                                    message = JSON.parse(hookEvent.data);
                                } catch (parseError) {
                                    cov_5zdhhrftg.s[131]++;
                                    console.error('Hook worker: unknown hookEvent message ', hookEvent.data);
                                    cov_5zdhhrftg.s[132]++;
                                    return;
                                }
                                let id = (cov_5zdhhrftg.s[133]++, message.shift());
                                let type = (cov_5zdhhrftg.s[134]++, message.shift());
                                let parameters = (cov_5zdhhrftg.s[135]++, message);
                                let result;
                                cov_5zdhhrftg.s[136]++;
                                try {
                                    cov_5zdhhrftg.s[137]++;
                                    switch (type) {
                                    case 'text/javascript':
                                        cov_5zdhhrftg.b[49][0]++;
                                        cov_5zdhhrftg.s[138]++;
                                        result = hook(...parameters);
                                        cov_5zdhhrftg.s[139]++;
                                        break;
                                    case 'text/html':
                                        cov_5zdhhrftg.b[49][1]++;
                                        cov_5zdhhrftg.s[140]++;
                                        result = hook.hookHtml(...parameters);
                                        cov_5zdhhrftg.s[141]++;
                                        break;
                                    default:
                                        cov_5zdhhrftg.b[49][2]++;
                                        cov_5zdhhrftg.s[142]++;
                                        throw new Error('hookWorker: Unknown type: ' + type);
                                        cov_5zdhhrftg.s[143]++;
                                        break;
                                    }
                                    cov_5zdhhrftg.s[144]++;
                                    port.postMessage(JSON.stringify([
                                        id,
                                        'success',
                                        result
                                    ], null, 0));
                                } catch (e) {
                                    cov_5zdhhrftg.s[145]++;
                                    port.postMessage(JSON.stringify([
                                        id,
                                        'error',
                                        e.toString()
                                    ], null, 0));
                                }
                            };
                        } else {
                            cov_5zdhhrftg.b[48][1]++;
                            cov_5zdhhrftg.s[146]++;
                            console.error('Hook worker: unknown message ', event.data);
                        }
                    }
                    function registerServiceWorker(fallbackUrl = (cov_5zdhhrftg.b[50][0]++, './index-no-service-worker.html'), reloadTimeout = (cov_5zdhhrftg.b[51][0]++, 500), inactiveReloadTimeout = (cov_5zdhhrftg.b[52][0]++, 1000)) {
                        cov_5zdhhrftg.f[32]++;
                        cov_5zdhhrftg.s[147]++;
                        if ('serviceWorker' in navigator) {
                            cov_5zdhhrftg.b[53][0]++;
                            let script = (cov_5zdhhrftg.s[148]++, (cov_5zdhhrftg.b[54][0]++, document.currentScript) || (cov_5zdhhrftg.b[54][1]++, Array.prototype.filter.call(document.querySelectorAll('script'), s => {
                                cov_5zdhhrftg.f[33]++;
                                cov_5zdhhrftg.s[149]++;
                                return s.src.match(/\/hook.min.js/);
                            })[0]));
                            let src = (cov_5zdhhrftg.s[150]++, new URL(script.src, window.location.href));
                            cov_5zdhhrftg.s[151]++;
                            if (src.searchParams.has('service-worker-ready')) {
                                cov_5zdhhrftg.b[55][0]++;
                                cov_5zdhhrftg.s[152]++;
                                navigator.serviceWorker.register(script.src.replace(/\&service-worker-ready=.*$/, ''), { scope: (cov_5zdhhrftg.b[56][0]++, src.searchParams.get('sw-root')) || (cov_5zdhhrftg.b[56][1]++, window.location.pathname.replace(/\/[^\/]*$/, '/')) }).then(registration => {
                                    cov_5zdhhrftg.f[34]++;
                                    let serviceWorker = (cov_5zdhhrftg.s[153]++, (cov_5zdhhrftg.b[57][0]++, registration.active) || (cov_5zdhhrftg.b[57][1]++, registration.waiting) || (cov_5zdhhrftg.b[57][2]++, registration.installing));
                                    cov_5zdhhrftg.s[154]++;
                                    if (serviceWorker) {
                                        cov_5zdhhrftg.b[58][0]++;
                                        cov_5zdhhrftg.s[155]++;
                                        if (!((cov_5zdhhrftg.b[60][0]++, src.searchParams.get('service-worker-ready') === 'true') && (cov_5zdhhrftg.b[60][1]++, registration.active))) {
                                            cov_5zdhhrftg.b[59][0]++;
                                            cov_5zdhhrftg.s[156]++;
                                            serviceWorker.addEventListener('statechange', function (e) {
                                                cov_5zdhhrftg.f[35]++;
                                                let src = (cov_5zdhhrftg.s[157]++, new URL(script.src, 'https://host/'));
                                                cov_5zdhhrftg.s[158]++;
                                                if (src.searchParams.get('service-worker-ready') !== 'true') {
                                                    cov_5zdhhrftg.b[61][0]++;
                                                    cov_5zdhhrftg.s[159]++;
                                                    window.location.reload();
                                                } else {
                                                    cov_5zdhhrftg.b[61][1]++;
                                                }
                                            });
                                            cov_5zdhhrftg.s[160]++;
                                            setTimeout(function () {
                                                cov_5zdhhrftg.f[36]++;
                                                cov_5zdhhrftg.s[161]++;
                                                window.location.reload();
                                            }, inactiveReloadTimeout);
                                        } else {
                                            cov_5zdhhrftg.b[59][1]++;
                                            cov_5zdhhrftg.s[162]++;
                                            preprocess.setupHookWorkers();
                                        }
                                    } else {
                                        cov_5zdhhrftg.b[58][1]++;
                                        cov_5zdhhrftg.s[163]++;
                                        setTimeout(function () {
                                            cov_5zdhhrftg.f[37]++;
                                            cov_5zdhhrftg.s[164]++;
                                            window.location.reload();
                                        }, reloadTimeout);
                                    }
                                });
                            } else {
                                cov_5zdhhrftg.b[55][1]++;
                            }
                        } else {
                            cov_5zdhhrftg.b[53][1]++;
                            let src = (cov_5zdhhrftg.s[165]++, new URL(document.currentScript.src, 'https://host/'));
                            let match = (cov_5zdhhrftg.s[166]++, src.search.match(/[&\?]fallback-page=([^&\?]*)/));
                            cov_5zdhhrftg.s[167]++;
                            if (match) {
                                cov_5zdhhrftg.b[62][0]++;
                                cov_5zdhhrftg.s[168]++;
                                fallbackUrl = match[1];
                            } else {
                                cov_5zdhhrftg.b[62][1]++;
                            }
                            cov_5zdhhrftg.s[169]++;
                            window.location = fallbackUrl;
                        }
                    }
                    cov_5zdhhrftg.s[170]++;
                    return {
                        serviceWorkerHandlers: {
                            install: onInstall,
                            activate: onActivate,
                            message: onMessage,
                            fetch: onFetch
                        },
                        serviceWorkerTransformers: {
                            encodeHtml: encodeHtml,
                            decodeHtml: decodeHtml
                        },
                        hookWorkerHandler: hookWorkerHandler,
                        registerServiceWorker: registerServiceWorker
                    };
                };
            },
            {}
        ]
    }, {}, [99])(99);
}));